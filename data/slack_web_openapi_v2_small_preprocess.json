{"openapi": "3.0.1", "info": {"title": "Slack Web API", "description": "One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.", "contact": {"name": "Slack developer relations", "url": "https://api.slack.com/support"}, "version": "1.7.0"}, "externalDocs": {"description": "Learn more about the Slack Web API", "url": "https://api.slack.com/web"}, "servers": [{"url": "https://slack.com/api"}], "tags": [], "paths": {"/api.test": {"get": {"tags": ["api"], "description": "Checks API calling code.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/api.test"}, "operationId": "api_test", "parameters": [{"name": "error", "in": "query", "description": "Error response to return", "schema": {"type": "string"}}, {"name": "foo", "in": "query", "description": "example property to return", "schema": {"type": "string"}}], "responses": {"200": {"description": "Standard success response", "content": {"application/json": {"schema": {"title": "api.test success schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response api.test method"}, "example": {"ok": true}}}}, "default": {"description": "Artificial error response", "content": {"application/json": {"schema": {"title": "api.test error schema", "required": ["error", "ok"], "type": "object", "properties": {"error": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response api.test method"}, "example": {"args": {"error": "my_error"}, "error": "my_error", "ok": false}}}}}, "security": [{"slackAuth": ["none"]}]}}, "/bots.info": {"get": {"tags": ["bots"], "description": "Gets information about a bot user.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/bots.info"}, "operationId": "bots_info", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `users:read`", "required": true, "schema": {"type": "string"}}, {"name": "bot", "in": "query", "description": "Bot user to get info on", "schema": {"type": "string"}}], "responses": {"200": {"description": "When successful, returns bot info by bot ID.", "content": {"application/json": {"schema": {"title": "bots.info schema", "required": ["bot", "ok"], "type": "object", "properties": {"bot": {"required": ["app_id", "deleted", "icons", "id", "name", "updated"], "type": "object", "properties": {"app_id": {"$ref": "#/components/schemas/defs_app_id"}, "deleted": {"type": "boolean"}, "icons": {"required": ["image_36", "image_48", "image_72"], "type": "object", "properties": {"image_36": {"type": "string"}, "image_48": {"type": "string"}, "image_72": {"type": "string"}}}, "id": {"$ref": "#/components/schemas/defs_bot_id"}, "name": {"type": "string"}, "updated": {"type": "integer"}, "user_id": {"$ref": "#/components/schemas/defs_user_id"}}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from bots.info method"}, "example": {"bot": {"app_id": "A161CLERW", "deleted": false, "icons": {"image_36": "https://...", "image_48": "https://...", "image_72": "https://..."}, "id": "B061F7JD2", "name": "beforebot", "updated": 1449272004, "user_id": "U012ABCDEF"}, "ok": true}}}}, "default": {"description": "When no bot can be found, it returns an error.", "content": {"application/json": {"schema": {"title": "bots.info error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["bot_not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from bots.info method"}, "example": {"error": "bot_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["users:read"]}]}}, "/chat.delete": {"post": {"tags": ["chat"], "description": "Deletes a message.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/chat.delete"}, "operationId": "chat_delete", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `chat:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "ts"], "properties": {"ts": {"type": "number", "description": "Timestamp of the message to be deleted."}, "channel": {"type": "string", "description": "Channel containing the message to be deleted."}, "as_user": {"type": "boolean", "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."}}}}, "application/json": {"schema": {"required": ["channel", "ts"], "properties": {"ts": {"type": "number", "description": "Timestamp of the message to be deleted."}, "channel": {"type": "string", "description": "Channel containing the message to be deleted."}, "as_user": {"type": "boolean", "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "chat.delete success schema", "required": ["channel", "ok", "ts"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_channel"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "ts": {"$ref": "#/components/schemas/defs_ts"}}, "description": "Schema for successful response of chat.delete method"}, "example": {"channel": "C024BE91L", "ok": true, "ts": "1401383885.000061"}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "chat.delete error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["message_not_found", "channel_not_found", "cant_delete_message", "compliance_exports_prevent_deletion", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from chat.delete method"}, "example": {"error": "message_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["chat:write:user", "chat:write:bot"]}]}}, "/chat.deleteScheduledMessage": {"post": {"tags": ["chat"], "description": "Deletes a pending scheduled message from the queue.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/chat.deleteScheduledMessage"}, "operationId": "chat_deleteScheduledMessage", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `chat:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "scheduled_message_id"], "properties": {"as_user": {"type": "boolean", "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."}, "channel": {"type": "string", "description": "The channel the scheduled_message is posting to"}, "scheduled_message_id": {"type": "string", "description": "`scheduled_message_id` returned from call to chat.scheduleMessage"}}}}, "application/json": {"schema": {"required": ["channel", "scheduled_message_id"], "properties": {"as_user": {"type": "boolean", "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope."}, "channel": {"type": "string", "description": "The channel the scheduled_message is posting to"}, "scheduled_message_id": {"type": "string", "description": "`scheduled_message_id` returned from call to chat.scheduleMessage"}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "chat.deleteScheduledMessage schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from chat.deleteScheduledMessage method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response if no message is found", "content": {"application/json": {"schema": {"title": "chat.deleteScheduledMessage error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["invalid_scheduled_message_id", "channel_not_found", "bad_token", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "ekm_access_denied", "missing_scope", "invalid_arguments", "invalid_arg_name", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from chat.deleteScheduledMessage method"}, "example": {"error": "invalid_scheduled_message_id", "ok": false}}}}}, "security": [{"slackAuth": ["chat:write:user", "chat:write:bot"]}]}}, "/chat.getPermalink": {"get": {"tags": ["chat"], "description": "Retrieve a permalink URL for a specific extant message", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/chat.getPermalink"}, "operationId": "chat_getPermalink", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `none`", "required": true, "schema": {"type": "string"}}, {"name": "channel", "in": "query", "description": "The ID of the conversation or channel containing the message", "required": true, "schema": {"type": "string"}}, {"name": "message_ts", "in": "query", "description": "A message's `ts` value, uniquely identifying it within a channel", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Standard success response", "content": {"application/json": {"schema": {"title": "chat.getPermalink success schema", "required": ["channel", "ok", "permalink"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_channel"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "permalink": {"type": "string"}}, "description": "Schema for successful response chat.getPermalink"}, "example": {"channel": "C1H9RESGA", "ok": true, "permalink": "https://ghostbusters.slack.com/archives/C1H9RESGA/p135854651500008"}}}}, "default": {"description": "Error response when channel cannot be found", "content": {"application/json": {"schema": {"title": "chat.getPermalink error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["channel_not_found", "message_not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from chat.getPermalink method"}, "example": {"error": "channel_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["none"]}]}}, "/chat.meMessage": {"post": {"tags": ["chat"], "description": "Share a me message into a channel.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/chat.meMessage"}, "operationId": "chat_meMessage", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `chat:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "text"], "properties": {"channel": {"type": "string", "description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name."}, "text": {"type": "string", "description": "Text of the message to send."}}}}, "application/json": {"schema": {"required": ["channel", "text"], "properties": {"channel": {"type": "string", "description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name."}, "text": {"type": "string", "description": "Text of the message to send."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "chat.meMessage schema", "required": ["ok"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_channel"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "ts": {"$ref": "#/components/schemas/defs_ts"}}, "description": "Schema for successful response from chat.meMessage method"}, "example": {"channel": "C024BE7LR", "ok": true, "ts": "1417671948.000006"}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "chat.meMessage error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["channel_not_found", "not_in_channel", "is_archived", "msg_too_long", "no_text", "rate_limited", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from chat.meMessage method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["chat:write:user", "chat:write:bot"]}]}}, "/chat.postEphemeral": {"post": {"tags": ["chat"], "description": "Sends an ephemeral message to a user in a channel.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/chat.postEphemeral"}, "operationId": "chat_postEphemeral", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `chat:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["attachments", "channel", "text", "user"], "properties": {"as_user": {"type": "boolean", "description": "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false."}, "attachments": {"type": "string", "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."}, "blocks": {"type": "string", "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."}, "channel": {"type": "string", "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name."}, "icon_emoji": {"type": "string", "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."}, "icon_url": {"type": "string", "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."}, "link_names": {"type": "boolean", "description": "Find and link channel names and usernames."}, "parse": {"type": "string", "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."}, "text": {"type": "string", "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."}, "thread_ts": {"type": "string", "description": "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread."}, "user": {"type": "string", "description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument."}, "username": {"type": "string", "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."}}}}, "application/json": {"schema": {"required": ["attachments", "channel", "text", "user"], "properties": {"as_user": {"type": "boolean", "description": "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false."}, "attachments": {"type": "string", "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."}, "blocks": {"type": "string", "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."}, "channel": {"type": "string", "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name."}, "icon_emoji": {"type": "string", "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."}, "icon_url": {"type": "string", "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."}, "link_names": {"type": "boolean", "description": "Find and link channel names and usernames."}, "parse": {"type": "string", "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."}, "text": {"type": "string", "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."}, "thread_ts": {"type": "string", "description": "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread."}, "user": {"type": "string", "description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument."}, "username": {"type": "string", "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "chat.postEphemeral success schema", "required": ["message_ts", "ok"], "type": "object", "properties": {"message_ts": {"$ref": "#/components/schemas/defs_ts"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from chat.postEphemeral method"}, "example": {"message_ts": "1502210682.580145", "ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "chat.postEphemeral error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["channel_not_found", "is_archived", "msg_too_long", "no_text", "restricted_action", "too_many_attachments", "user_not_in_channel", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from chat.postEphemeral method"}, "example": {"error": "user_not_in_channel", "ok": false}}}}}, "security": [{"slackAuth": ["chat:write:user", "chat:write:bot"]}]}}, "/chat.postMessage": {"post": {"tags": ["chat"], "description": "Sends a message to a channel.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/chat.postMessage"}, "operationId": "chat_postMessage", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `chat:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "text"], "properties": {"as_user": {"type": "string", "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below."}, "attachments": {"type": "string", "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."}, "blocks": {"type": "string", "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."}, "channel": {"type": "string", "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."}, "icon_emoji": {"type": "string", "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."}, "icon_url": {"type": "string", "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."}, "link_names": {"type": "boolean", "description": "Find and link channel names and usernames."}, "mrkdwn": {"type": "boolean", "description": "Disable Slack markup parsing by setting to `false`. Enabled by default."}, "parse": {"type": "string", "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."}, "reply_broadcast": {"type": "boolean", "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."}, "text": {"type": "string", "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."}, "thread_ts": {"type": "string", "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."}, "unfurl_links": {"type": "boolean", "description": "Pass true to enable unfurling of primarily text-based content."}, "unfurl_media": {"type": "boolean", "description": "Pass false to disable unfurling of media content."}, "username": {"type": "string", "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."}}}}, "application/json": {"schema": {"required": ["channel", "text"], "properties": {"as_user": {"type": "string", "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below."}, "attachments": {"type": "string", "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."}, "blocks": {"type": "string", "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."}, "channel": {"type": "string", "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."}, "icon_emoji": {"type": "string", "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below."}, "icon_url": {"type": "string", "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."}, "link_names": {"type": "boolean", "description": "Find and link channel names and usernames."}, "mrkdwn": {"type": "boolean", "description": "Disable Slack markup parsing by setting to `false`. Enabled by default."}, "parse": {"type": "string", "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting)."}, "reply_broadcast": {"type": "boolean", "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."}, "text": {"type": "string", "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."}, "thread_ts": {"type": "string", "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."}, "unfurl_links": {"type": "boolean", "description": "Pass true to enable unfurling of primarily text-based content."}, "unfurl_media": {"type": "boolean", "description": "Pass false to disable unfurling of media content."}, "username": {"type": "string", "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "chat.postMessage success schema", "required": ["channel", "message", "ok", "ts"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_channel"}, "message": {"$ref": "#/components/schemas/objs_message"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "ts": {"$ref": "#/components/schemas/defs_ts"}}, "description": "Schema for successful response of chat.postMessage method"}, "example": {"channel": "C1H9RESGL", "message": {"attachments": [{"fallback": "This is an attachment's fallback", "id": 1, "text": "This is an attachment"}], "bot_id": "B19LU7CSY", "subtype": "bot_message", "text": "Here's a message for you", "ts": "1503435956.000247", "type": "message", "username": "ecto1"}, "ok": true, "ts": "1503435956.000247"}}}}, "default": {"description": "Typical error response if too many attachments are included", "content": {"application/json": {"schema": {"title": "chat.postMessage error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["channel_not_found", "not_in_channel", "is_archived", "msg_too_long", "no_text", "too_many_attachments", "rate_limited", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response chat.postMessage method"}, "example": {"error": "too_many_attachments", "ok": false}}}}}, "security": [{"slackAuth": ["chat:write:user", "chat:write:bot"]}]}}, "/chat.scheduleMessage": {"post": {"tags": ["chat"], "description": "Schedules a message to be sent to a channel.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/chat.scheduleMessage"}, "operationId": "chat_scheduleMessage", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `chat:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "post_at", "text"], "properties": {"channel": {"type": "string", "description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."}, "text": {"type": "string", "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."}, "post_at": {"type": "string", "description": "Unix EPOCH timestamp of time in future to send the message."}, "parse": {"type": "string", "description": "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting)."}, "as_user": {"type": "boolean", "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship)."}, "link_names": {"type": "boolean", "description": "Find and link channel names and usernames."}, "attachments": {"type": "string", "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."}, "blocks": {"type": "string", "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."}, "unfurl_links": {"type": "boolean", "description": "Pass true to enable unfurling of primarily text-based content."}, "unfurl_media": {"type": "boolean", "description": "Pass false to disable unfurling of media content."}, "thread_ts": {"type": "number", "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."}, "reply_broadcast": {"type": "boolean", "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."}}}}, "application/json": {"schema": {"required": ["channel", "post_at", "text"], "properties": {"channel": {"type": "string", "description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details."}, "text": {"type": "string", "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail."}, "post_at": {"type": "string", "description": "Unix EPOCH timestamp of time in future to send the message."}, "parse": {"type": "string", "description": "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting)."}, "as_user": {"type": "boolean", "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship)."}, "link_names": {"type": "boolean", "description": "Find and link channel names and usernames."}, "attachments": {"type": "string", "description": "A JSON-based array of structured attachments, presented as a URL-encoded string."}, "blocks": {"type": "string", "description": "A JSON-based array of structured blocks, presented as a URL-encoded string."}, "unfurl_links": {"type": "boolean", "description": "Pass true to enable unfurling of primarily text-based content."}, "unfurl_media": {"type": "boolean", "description": "Pass false to disable unfurling of media content."}, "thread_ts": {"type": "number", "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead."}, "reply_broadcast": {"type": "boolean", "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "chat.scheduleMessage success schema", "required": ["channel", "message", "ok", "post_at", "scheduled_message_id"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_channel"}, "message": {"required": ["bot_id", "team", "text", "type", "user"], "type": "object", "properties": {"bot_id": {"$ref": "#/components/schemas/defs_bot_id"}, "bot_profile": {"$ref": "#/components/schemas/objs_bot_profile"}, "team": {"$ref": "#/components/schemas/defs_team"}, "text": {"type": "string"}, "type": {"type": "string"}, "user": {"$ref": "#/components/schemas/defs_user_id"}, "username": {"type": "string"}}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "post_at": {"type": "integer"}, "scheduled_message_id": {"title": "Scheduled Message ID", "pattern": "^[Q][A-Z0-9]{8,}$", "type": "string"}}, "description": "Schema for successful response of chat.scheduleMessage method"}, "example": {"channel": "C1H9RESGL", "message": {"attachments": [{"fallback": "This is an attachment's fallback", "id": 1, "text": "This is an attachment"}], "bot_id": "B19LU7CSY", "subtype": "bot_message", "text": "Here's a message for you in the future", "type": "delayed_message", "username": "ecto1"}, "ok": true, "post_at": "1562180400", "scheduled_message_id": "Q1298393284"}}}}, "default": {"description": "Typical error response if the `post_at` is invalid (ex. in the past or too far into the future)", "content": {"application/json": {"schema": {"title": "chat.scheduleMessage error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["invalid_time", "time_in_past", "time_too_far", "channel_not_found", "not_in_channel", "is_archived", "msg_too_long", "no_text", "restricted_action", "restricted_action_read_only_channel", "restricted_action_thread_only_channel", "restricted_action_non_threadable_channel", "too_many_attachments", "rate_limited", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "ekm_access_denied", "missing_scope", "invalid_arguments", "invalid_arg_name", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response chat.scheduleMessage method"}, "example": {"error": "time_in_past", "ok": false}}}}}, "security": [{"slackAuth": ["chat:write:user", "chat:write:bot"]}]}}, "/chat.scheduledMessages.list": {"get": {"tags": ["chat.scheduledMessages", "chat"], "description": "Returns a list of scheduled messages.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/chat.scheduledMessages.list"}, "operationId": "chat_scheduledMessages_list", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `none`", "required": true, "schema": {"type": "string"}}, {"name": "channel", "in": "query", "description": "The channel of the scheduled messages", "schema": {"type": "string"}}, {"name": "latest", "in": "query", "description": "A UNIX timestamp of the latest value in the time range", "schema": {"type": "number"}}, {"name": "oldest", "in": "query", "description": "A UNIX timestamp of the oldest value in the time range", "schema": {"type": "number"}}, {"name": "limit", "in": "query", "description": "Maximum number of original entries to return.", "schema": {"type": "integer"}}, {"name": "cursor", "in": "query", "description": "For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "chat.scheduledMessages.list schema", "required": ["ok", "response_metadata", "scheduled_messages"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "response_metadata": {"required": ["next_cursor"], "type": "object", "properties": {"next_cursor": {"type": "string"}}}, "scheduled_messages": {"type": "array", "items": {"required": ["channel_id", "date_created", "id", "post_at"], "type": "object", "properties": {"channel_id": {"$ref": "#/components/schemas/defs_channel_id"}, "date_created": {"type": "integer"}, "id": {"pattern": "^[Q][A-Z0-9]{8,}$", "type": "string"}, "post_at": {"type": "integer"}, "text": {"type": "string"}}}}}, "description": "Schema for successful response from chat.scheduledMessages.list method"}, "example": {"ok": true, "response_metadata": {"next_cursor": ""}, "scheduled_messages": [{"channel_id": "C1H9RESGL", "date_created": 1551891734, "id": 1298393284, "post_at": 1551991428, "text": "Here's a message for you in the future"}]}}}}, "default": {"description": "Typical error response if the channel passed is invalid", "content": {"application/json": {"schema": {"title": "chat.scheduledMessages.list error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["invalid_channel", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "ekm_access_denied", "missing_scope", "invalid_arguments", "invalid_arg_name", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from chat.scheduledMessages.list method"}, "example": {"error": "invalid_channel", "ok": false}}}}}, "security": [{"slackAuth": ["none"]}]}}, "/chat.unfurl": {"post": {"tags": ["chat"], "description": "Provide custom unfurl behavior for user-posted URLs", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/chat.unfurl"}, "operationId": "chat_unfurl", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `links:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "ts", "unfurls"], "properties": {"channel": {"type": "string", "description": "Channel ID of the message"}, "ts": {"type": "string", "description": "Timestamp of the message to add unfurl behavior to."}, "unfurls": {"type": "string", "description": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments."}, "user_auth_message": {"type": "string", "description": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior"}, "user_auth_required": {"type": "boolean", "description": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain"}, "user_auth_url": {"type": "string", "description": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded."}}}}, "application/json": {"schema": {"required": ["channel", "ts", "unfurls"], "properties": {"channel": {"type": "string", "description": "Channel ID of the message"}, "ts": {"type": "string", "description": "Timestamp of the message to add unfurl behavior to."}, "unfurls": {"type": "string", "description": "URL-encoded JSON map with keys set to URLs featured in the the message, pointing to their unfurl blocks or message attachments."}, "user_auth_message": {"type": "string", "description": "Provide a simply-formatted string to send as an ephemeral message to the user as invitation to authenticate further and enable full unfurling behavior"}, "user_auth_required": {"type": "boolean", "description": "Set to `true` or `1` to indicate the user must install your Slack app to trigger unfurls for this domain"}, "user_auth_url": {"type": "string", "description": "Send users to this custom URL where they will complete authentication in your app to fully trigger unfurling. Value should be properly URL-encoded."}}}}}, "required": true}, "responses": {"200": {"description": "Typical, minimal success response", "content": {"application/json": {"schema": {"title": "chat.unfurl success schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from chat.unfurl method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "chat.unfurl error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["cannot_unfurl_url", "cannot_find_service", "missing_unfurls", "cannot_prompt", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from chat.unfurl method"}, "example": {"error": "cannot_unfurl_url", "ok": false}}}}}, "security": [{"slackAuth": ["links:write"]}]}}, "/chat.update": {"post": {"tags": ["chat"], "description": "Updates a message.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/chat.update"}, "operationId": "chat_update", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `chat:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "ts"], "properties": {"as_user": {"type": "string", "description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users."}, "attachments": {"type": "string", "description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field."}, "blocks": {"type": "string", "description": "A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field."}, "channel": {"type": "string", "description": "Channel containing the message to be updated."}, "link_names": {"type": "string", "description": "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`."}, "parse": {"type": "string", "description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`."}, "text": {"type": "string", "description": "New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`."}, "ts": {"type": "string", "description": "Timestamp of the message to be updated."}}}}, "application/json": {"schema": {"required": ["channel", "ts"], "properties": {"as_user": {"type": "string", "description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users."}, "attachments": {"type": "string", "description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field."}, "blocks": {"type": "string", "description": "A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field."}, "channel": {"type": "string", "description": "Channel containing the message to be updated."}, "link_names": {"type": "string", "description": "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`."}, "parse": {"type": "string", "description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`."}, "text": {"type": "string", "description": "New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`."}, "ts": {"type": "string", "description": "Timestamp of the message to be updated."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "chat.update success schema", "required": ["channel", "message", "ok", "text", "ts"], "type": "object", "properties": {"channel": {"type": "string"}, "message": {"title": "Message object", "required": ["text"], "type": "object", "properties": {"attachments": {"type": "array", "items": {"type": "object", "properties": {}}}, "blocks": {"type": "object", "properties": {}}, "text": {"type": "string"}}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "text": {"type": "string"}, "ts": {"type": "string"}}, "description": "Schema for successful response of chat.update method"}, "example": {"channel": "C024BE91L", "message": {"text": "Updated text you carefully authored", "user": "U34567890"}, "ok": true, "text": "Updated text you carefully authored", "ts": "1401383885.000061"}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "chat.update error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["message_not_found", "cant_update_message", "channel_not_found", "edit_window_closed", "msg_too_long", "too_many_attachments", "rate_limited", "no_text", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "request_timeout", "invalid_json", "json_not_object", "upgrade_required", "fatal_error", "is_inactive"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response chat.update method"}, "example": {"error": "cant_update_message", "ok": false}}}}}, "security": [{"slackAuth": ["chat:write:user", "chat:write:bot"]}]}}, "/conversations.archive": {"post": {"tags": ["conversations"], "description": "Archives a conversation.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.archive"}, "operationId": "conversations_archive", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "ID of conversation to archive"}}}}, "application/json": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "ID of conversation to archive"}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.archive success schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response conversations.archive method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "conversations.archive error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "not_supported", "channel_not_found", "already_archived", "cant_archive_general", "restricted_action", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.archive method"}, "example": {"error": "channel_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.close": {"post": {"tags": ["conversations"], "description": "Closes a direct message or multi-person direct message.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.close"}, "operationId": "conversations_close", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "Conversation to close."}}}}, "application/json": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "Conversation to close."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.close success schema", "required": ["ok"], "type": "object", "properties": {"already_closed": {"type": "boolean"}, "no_op": {"type": "boolean"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response conversations.close method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "conversations.close error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "channel_not_found", "user_does_not_own_channel", "missing_scope", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.close method"}, "example": {"error": "channel_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.create": {"post": {"tags": ["conversations"], "description": "Initiates a public or private channel-based conversation", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.create"}, "operationId": "conversations_create", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["name"], "properties": {"name": {"type": "string", "description": "Name of the public or private channel to create"}, "is_private": {"type": "boolean", "description": "Create a private channel instead of a public one"}}}}, "application/json": {"schema": {"required": ["name"], "properties": {"name": {"type": "string", "description": "Name of the public or private channel to create"}, "is_private": {"type": "boolean", "description": "Create a private channel instead of a public one"}}}}}, "required": true}, "responses": {"200": {"description": "If successful, the command returns a rather stark [conversation object](/types/conversation)", "content": {"application/json": {"schema": {"title": "conversations.create success schema", "required": ["channel", "ok"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/objs_conversation"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response conversations.create method"}, "example": {"channel": {"created": 1504554479, "creator": "U0123456", "id": "C0EAQDV4Z", "is_archived": false, "is_channel": true, "is_ext_shared": false, "is_general": false, "is_group": false, "is_im": false, "is_member": true, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_shared": false, "last_read": "0000000000.000000", "name": "endeavor", "name_normalized": "endeavor", "pending_shared": [], "previous_names": [], "priority": 0, "purpose": {"creator": "", "last_set": 0, "value": ""}, "topic": {"creator": "", "last_set": 0, "value": ""}, "unlinked": 0, "unread_count": 0, "unread_count_display": 0}, "ok": true}}}}, "default": {"description": "Typical error response when name already in use", "content": {"application/json": {"schema": {"title": "conversations.create error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "detail": {"type": "string"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "name_taken", "restricted_action", "no_channel", "invalid_name_required", "invalid_name_punctuation", "invalid_name_maxlength", "invalid_name_specials", "invalid_name", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.create method"}, "example": {"error": "name_taken", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.history": {"get": {"tags": ["conversations"], "description": "Fetches a conversation's history of messages and events.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.history"}, "operationId": "conversations_history", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `conversations:history`", "required": true, "schema": {"type": "string"}}, {"name": "channel", "in": "query", "description": "Conversation ID to fetch history for.", "required": true, "schema": {"type": "string"}}, {"name": "latest", "in": "query", "description": "End of time range of messages to include in results.", "schema": {"type": "number"}}, {"name": "oldest", "in": "query", "description": "Start of time range of messages to include in results.", "schema": {"type": "number"}}, {"name": "inclusive", "in": "query", "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified.", "schema": {"type": "boolean"}}, {"name": "limit", "in": "query", "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.", "schema": {"type": "integer"}}, {"name": "cursor", "in": "query", "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response containing a channel's messages", "content": {"application/json": {"schema": {"title": "conversations.history success schema", "required": ["channel_actions_count", "channel_actions_ts", "has_more", "messages", "ok", "pin_count"], "type": "object", "properties": {"channel_actions_count": {"type": "integer"}, "channel_actions_ts": {"$ref": "#/components/schemas/obj_ref_12"}, "has_more": {"type": "boolean"}, "messages": {"minItems": 1, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/objs_message"}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "pin_count": {"type": "integer"}}, "description": "Schema for successful response from conversations.history method"}, "example": {"has_more": true, "messages": [{"text": "I find you punny and would like to smell your nose letter", "ts": "1512085950.000216", "type": "message", "user": "U012AB3CDE"}, {"text": "What, you want to smell my shoes better?", "ts": "1512104434.000490", "type": "message", "user": "U061F7AUR"}], "ok": true, "pin_count": 0, "response_metadata": {"next_cursor": "bmV4dF90czoxNTEyMDg1ODYxMDAwNTQz"}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "conversations.history error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["missing_scope", "channel_not_found", "invalid_ts_latest", "invalid_ts_oldest", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.history method"}, "example": {"error": "channel_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["channels:history", "groups:history", "im:history", "mpim:history"]}]}}, "/conversations.info": {"get": {"tags": ["conversations"], "description": "Retrieve information about a conversation.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.info"}, "operationId": "conversations_info", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `conversations:read`", "required": true, "schema": {"type": "string"}}, {"name": "channel", "in": "query", "description": "Conversation ID to learn more about", "required": true, "schema": {"type": "string"}}, {"name": "include_locale", "in": "query", "description": "Set this to `true` to receive the locale for this conversation. Defaults to `false`", "schema": {"type": "boolean"}}, {"name": "include_num_members", "in": "query", "description": "Set to `true` to include the member count for the specified conversation. Defaults to `false`", "schema": {"type": "boolean"}}], "responses": {"200": {"description": "Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.)", "content": {"application/json": {"schema": {"title": "conversations.info success schema", "required": ["channel", "ok"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/objs_conversation"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response conversations.info"}, "example": {"channel": {"created": 1449252889, "creator": "W012A3BCD", "id": "C012AB3CD", "is_archived": false, "is_channel": true, "is_ext_shared": false, "is_general": true, "is_group": false, "is_im": false, "is_member": true, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_read_only": false, "is_shared": false, "last_read": "1502126650.228446", "locale": "en-US", "name": "general", "name_normalized": "general", "pending_shared": [], "previous_names": ["specifics", "abstractions", "etc"], "purpose": {"creator": "W012A3BCD", "last_set": 1449709364, "value": "This part of the workspace is for fun. Make fun here."}, "topic": {"creator": "W012A3BCD", "last_set": 1449709364, "value": "For public discussion of generalities"}, "unlinked": 0}, "ok": true}}}}, "default": {"description": "Typical error response when a channel cannot be found", "content": {"application/json": {"schema": {"title": "conversations.info error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["missing_scope", "channel_not_found", "team_added_to_org", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.info method"}, "example": {"error": "channel_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["channels:read", "groups:read", "im:read", "mpim:read"]}]}}, "/conversations.invite": {"post": {"tags": ["conversations"], "description": "Invites users to a channel.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.invite"}, "operationId": "conversations_invite", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "users"], "properties": {"channel": {"type": "string", "description": "The ID of the public or private channel to invite user(s) to."}, "users": {"type": "string", "description": "A comma separated list of user IDs. Up to 1000 users may be listed."}}}}, "application/json": {"schema": {"required": ["channel", "users"], "properties": {"channel": {"type": "string", "description": "The ID of the public or private channel to invite user(s) to."}, "users": {"type": "string", "description": "A comma separated list of user IDs. Up to 1000 users may be listed."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response when an invitation is extended", "content": {"application/json": {"schema": {"title": "conversations.invite error schema", "required": ["channel", "ok"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/objs_conversation"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from conversations.invite method"}, "example": {"channel": {"created": 1449252889, "creator": "W012A3BCD", "id": "C012AB3CD", "is_archived": false, "is_channel": true, "is_ext_shared": false, "is_general": true, "is_group": false, "is_im": false, "is_member": true, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_read_only": false, "is_shared": false, "last_read": "1502126650.228446", "locale": "en-US", "name": "general", "name_normalized": "general", "num_members": 23, "pending_shared": [], "previous_names": ["specifics", "abstractions", "etc"], "purpose": {"creator": "W012A3BCD", "last_set": 1449709364, "value": "This part of the workspace is for fun. Make fun here."}, "topic": {"creator": "W012A3BCD", "last_set": 1449709364, "value": "For public discussion of generalities"}, "unlinked": 0}, "ok": true}}}}, "default": {"description": "Typical error response when an invite is attempted on a conversation type that does not support it", "content": {"application/json": {"schema": {"title": "conversations.invite error schema", "required": ["ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "user_not_found", "no_user", "cant_invite_self", "not_in_channel", "already_in_channel", "is_archived", "cant_invite", "too_many_users", "ura_max_channels", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset"]}, "errors": {"title": "errors is returned when an error associates an user", "minItems": 1, "uniqueItems": true, "type": "array", "items": {"required": ["error", "ok"], "type": "object", "properties": {"error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "user_not_found", "no_user", "cant_invite_self", "not_in_channel", "already_in_channel", "is_archived", "cant_invite", "too_many_users", "ura_max_channels", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "user": {"$ref": "#/components/schemas/defs_user_id"}}}}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.invite method"}, "example": {"error": "method_not_supported_for_channel_type", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.join": {"post": {"tags": ["conversations"], "description": "Joins an existing conversation.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.join"}, "operationId": "conversations_join", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `channels:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "ID of conversation to join"}}}}, "application/json": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "ID of conversation to join"}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.join success schema", "required": ["channel", "ok"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/objs_conversation"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "response_metadata": {"title": "Response metadata", "type": "object", "properties": {"warnings": {"minItems": 1, "uniqueItems": true, "type": "array", "items": {"type": "string"}}}}, "warning": {"type": "string"}}, "description": "Schema for successful response from conversations.join method"}, "example": {"channel": {"created": 1449252889, "creator": "U061F7AUR", "id": "C061EG9SL", "is_archived": false, "is_channel": true, "is_ext_shared": false, "is_general": true, "is_group": false, "is_im": false, "is_member": true, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_shared": false, "name": "general", "name_normalized": "general", "pending_shared": [], "previous_names": [], "purpose": {"creator": "", "last_set": 0, "value": "For widget discussion"}, "topic": {"creator": "", "last_set": 0, "value": "Which widget do you worry about?"}, "unlinked": 0}, "ok": true, "response_metadata": {"warnings": ["already_in_channel"]}, "warning": "already_in_channel"}}}}, "default": {"description": "Typical error response if the conversation is archived and cannot be joined", "content": {"application/json": {"schema": {"title": "conversations.join error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "is_archived", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.join method"}, "example": {"error": "is_archived", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write"]}]}}, "/conversations.kick": {"post": {"tags": ["conversations"], "description": "Removes a user from a conversation.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.kick"}, "operationId": "conversations_kick", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "user"], "properties": {"channel": {"type": "string", "description": "ID of conversation to remove user from."}, "user": {"type": "string", "description": "User ID to be removed."}}}}, "application/json": {"schema": {"required": ["channel", "user"], "properties": {"channel": {"type": "string", "description": "ID of conversation to remove user from."}, "user": {"type": "string", "description": "User ID to be removed."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.kick success schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response conversations.kick method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response when you attempt to kick yourself from a channel", "content": {"application/json": {"schema": {"title": "conversations.kick error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "user_not_found", "cant_kick_self", "not_in_channel", "cant_kick_from_general", "restricted_action", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response conversations.kick method"}, "example": {"error": "cant_kick_self", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.leave": {"post": {"tags": ["conversations"], "description": "Leaves a conversation.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.leave"}, "operationId": "conversations_leave", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "Conversation to leave"}}}}, "application/json": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "Conversation to leave"}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.leave success schema", "required": ["ok"], "type": "object", "properties": {"not_in_channel": {"type": "boolean"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from conversations.leave method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response when attempting to leave a workspace's \"general\" channel", "content": {"application/json": {"schema": {"title": "conversations.leave error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "last_member", "missing_scope", "channel_not_found", "is_archived", "cant_leave_general", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.leave method"}, "example": {"error": "cant_leave_general", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.list": {"get": {"tags": ["conversations"], "description": "Lists all channels in a Slack team.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.list"}, "operationId": "conversations_list", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `conversations:read`", "required": true, "schema": {"type": "string"}}, {"name": "exclude_archived", "in": "query", "description": "Set to `true` to exclude archived channels from the list", "schema": {"type": "boolean"}}, {"name": "types", "in": "query", "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.", "schema": {"type": "integer"}}, {"name": "cursor", "in": "query", "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response with only public channels", "content": {"application/json": {"schema": {"title": "conversations.list success schema", "required": ["channels", "ok"], "type": "object", "properties": {"channels": {"uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/objs_conversation"}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "response_metadata": {"required": ["next_cursor"], "type": "object", "properties": {"next_cursor": {"type": "string"}}}}, "description": "Schema for successful response from conversations.list method"}, "example": {"channels": [{"created": 1449252889, "creator": "U012A3CDE", "id": "C012AB3CD", "is_archived": false, "is_channel": true, "is_ext_shared": false, "is_general": true, "is_group": false, "is_im": false, "is_member": true, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_shared": false, "name": "general", "name_normalized": "general", "num_members": 4, "pending_shared": [], "previous_names": [], "purpose": {"creator": "", "last_set": 0, "value": "This channel is for team-wide communication and announcements. All team members are in this channel."}, "topic": {"creator": "", "last_set": 0, "value": "Company-wide announcements and work-based matters"}, "unlinked": 0}, {"created": 1449252889, "creator": "U061F7AUR", "id": "C061EG9T2", "is_archived": false, "is_channel": true, "is_ext_shared": false, "is_general": false, "is_group": false, "is_im": false, "is_member": true, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_shared": false, "name": "random", "name_normalized": "random", "num_members": 4, "pending_shared": [], "previous_names": [], "purpose": {"creator": "", "last_set": 0, "value": "A place for non-work-related flimflam, faffing, hodge-podge or jibber-jabber you'd prefer to keep out of more focused work-related channels."}, "topic": {"creator": "", "last_set": 0, "value": "Non-work banter and water cooler conversation"}, "unlinked": 0}], "ok": true, "response_metadata": {"next_cursor": "dGVhbTpDMDYxRkE1UEI="}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "conversations.list error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["missing_scope", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.list method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["channels:read", "groups:read", "im:read", "mpim:read"]}]}}, "/conversations.mark": {"post": {"tags": ["conversations"], "description": "Sets the read cursor in a channel.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.mark"}, "operationId": "conversations_mark", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "ts"], "properties": {"channel": {"type": "string", "description": "Channel or conversation to set the read cursor for."}, "ts": {"type": "number", "description": "Unique identifier of message you want marked as most recently seen in this conversation."}}}}, "application/json": {"schema": {"required": ["channel", "ts"], "properties": {"channel": {"type": "string", "description": "Channel or conversation to set the read cursor for."}, "ts": {"type": "number", "description": "Unique identifier of message you want marked as most recently seen in this conversation."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.mark success schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response conversations.mark method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "conversations.mark error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "invalid_timestamp", "not_in_channel", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "not_allowed_token_type"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.mark method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.members": {"get": {"tags": ["conversations"], "description": "Retrieve members of a conversation.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.members"}, "operationId": "conversations_members", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `conversations:read`", "required": true, "schema": {"type": "string"}}, {"name": "channel", "in": "query", "description": "ID of the conversation to retrieve members for", "required": true, "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.", "schema": {"type": "integer"}}, {"name": "cursor", "in": "query", "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical paginated success response", "content": {"application/json": {"schema": {"title": "conversations.members success schema", "required": ["members", "ok", "response_metadata"], "type": "object", "properties": {"members": {"minItems": 1, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_user_id"}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "response_metadata": {"required": ["next_cursor"], "type": "object", "properties": {"next_cursor": {"type": "string"}}}}, "description": "Schema for successful response conversations.members method"}, "example": {"members": ["U023BECGF", "U061F7AUR", "W012A3CDE"], "ok": true, "response_metadata": {"next_cursor": "e3VzZXJfaWQ6IFcxMjM0NTY3fQ=="}}}}}, "default": {"description": "Typical error response when an invalid cursor is provided", "content": {"application/json": {"schema": {"title": "conversations.members error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["channel_not_found", "invalid_limit", "invalid_cursor", "fetch_members_failed", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response conversations.members method"}, "example": {"error": "invalid_cursor", "ok": false}}}}}, "security": [{"slackAuth": ["channels:read", "groups:read", "im:read", "mpim:read"]}]}}, "/conversations.open": {"post": {"tags": ["conversations"], "description": "Opens or resumes a direct message or multi-person direct message.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.open"}, "operationId": "conversations_open", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"properties": {"channel": {"type": "string", "description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead."}, "users": {"type": "string", "description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`."}, "return_im": {"type": "boolean", "description": "Boolean, indicates you want the full IM channel definition in the response."}}}}, "application/json": {"schema": {"properties": {"channel": {"type": "string", "description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead."}, "users": {"type": "string", "description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`."}, "return_im": {"type": "boolean", "description": "Boolean, indicates you want the full IM channel definition in the response."}}}}}}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.open success schema", "required": ["channel", "ok"], "type": "object", "properties": {"already_open": {"type": "boolean"}, "channel": {"oneOf": [{"$ref": "#/components/schemas/objs_conversation"}, {"$ref": "#/components/schemas/obj_ref_13"}]}, "no_op": {"type": "boolean"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from conversations.open method when opening channels, ims, mpims"}, "example": {"channel": {"id": "D069C7QFK"}, "ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "conversations.open error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "user_not_found", "user_not_visible", "user_disabled", "users_list_not_supplied", "not_enough_users", "too_many_users", "invalid_user_combination", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "channel_not_found"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from conversations.open method"}, "example": {"error": "channel_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.rename": {"post": {"tags": ["conversations"], "description": "Renames a conversation.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.rename"}, "operationId": "conversations_rename", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "name"], "properties": {"channel": {"type": "string", "description": "ID of conversation to rename"}, "name": {"type": "string", "description": "New name for conversation."}}}}, "application/json": {"schema": {"required": ["channel", "name"], "properties": {"channel": {"type": "string", "description": "ID of conversation to rename"}, "name": {"type": "string", "description": "New name for conversation."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.rename success schema", "required": ["channel", "ok"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/objs_conversation"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from conversations.rename method"}, "example": {"channel": {"created": 1449252889, "creator": "W012A3BCD", "id": "C012AB3CD", "is_archived": false, "is_channel": true, "is_ext_shared": false, "is_general": true, "is_group": false, "is_im": false, "is_member": true, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_read_only": false, "is_shared": false, "last_read": "1502126650.228446", "locale": "en-US", "name": "general", "name_normalized": "general", "num_members": 23, "pending_shared": [], "previous_names": ["specifics", "abstractions", "etc"], "purpose": {"creator": "W012A3BCD", "last_set": 1449709364, "value": "This part of the workspace is for fun. Make fun here."}, "topic": {"creator": "W012A3BCD", "last_set": 1449709364, "value": "For public discussion of generalities"}, "unlinked": 0}, "ok": true}}}}, "default": {"description": "Typical error response when the calling user is not a member of the conversation", "content": {"application/json": {"schema": {"title": "conversations.rename error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["user_is_restricted", "method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "not_in_channel", "not_authorized", "invalid_name", "name_taken", "invalid_name_required", "invalid_name_punctuation", "invalid_name_maxlength", "invalid_name_specials", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.rename method"}, "example": {"error": "not_in_channel", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.replies": {"get": {"tags": ["conversations"], "description": "Retrieve a thread of messages posted to a conversation", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.replies"}, "operationId": "conversations_replies", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `conversations:history`", "required": true, "schema": {"type": "string"}}, {"name": "channel", "in": "query", "description": "Conversation ID to fetch thread from.", "required": true, "schema": {"type": "string"}}, {"name": "ts", "in": "query", "description": "Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message.", "required": true, "schema": {"type": "number"}}, {"name": "latest", "in": "query", "description": "End of time range of messages to include in results.", "schema": {"type": "number"}}, {"name": "oldest", "in": "query", "description": "Start of time range of messages to include in results.", "schema": {"type": "number"}}, {"name": "inclusive", "in": "query", "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified.", "schema": {"type": "boolean"}}, {"name": "limit", "in": "query", "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.", "schema": {"type": "integer"}}, {"name": "cursor", "in": "query", "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.replies success schema", "required": ["messages", "ok"], "type": "object", "properties": {"has_more": {"type": "boolean"}, "messages": {"type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/obj_ref_14"}, {"$ref": "#/components/schemas/obj_ref_15"}]}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from conversations.replies method"}, "example": {"has_more": true, "messages": [{"last_read": "1484678597.521003", "reply_count": 3, "subscribed": true, "text": "island", "thread_ts": "1482960137.003543", "ts": "1482960137.003543", "type": "message", "unread_count": 0, "user": "U061F7AUR"}, {"parent_user_id": "U061F7AUR", "text": "one island", "thread_ts": "1482960137.003543", "ts": "1483037603.017503", "type": "message", "user": "U061F7AUR"}, {"parent_user_id": "U061F7AUR", "text": "two island", "thread_ts": "1482960137.003543", "ts": "1483051909.018632", "type": "message", "user": "U061F7AUR"}, {"parent_user_id": "U061F7AUR", "text": "three for the land", "thread_ts": "1482960137.003543", "ts": "1483125339.020269", "type": "message", "user": "U061F7AUR"}], "ok": true, "response_metadata": {"next_cursor": "bmV4dF90czoxNDg0Njc4MjkwNTE3MDkx"}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "conversations.replies error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["missing_scope", "channel_not_found", "thread_not_found", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.replies method"}, "example": {"error": "thread_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["channels:history", "groups:history", "im:history", "mpim:history"]}]}}, "/conversations.setPurpose": {"post": {"tags": ["conversations"], "description": "Sets the purpose for a conversation.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.setPurpose"}, "operationId": "conversations_setPurpose", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "purpose"], "properties": {"channel": {"type": "string", "description": "Conversation to set the purpose of"}, "purpose": {"type": "string", "description": "A new, specialer purpose"}}}}, "application/json": {"schema": {"required": ["channel", "purpose"], "properties": {"channel": {"type": "string", "description": "Conversation to set the purpose of"}, "purpose": {"type": "string", "description": "A new, specialer purpose"}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.setPurpose success schema", "required": ["channel", "ok"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/objs_conversation"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from conversations.setPurpose method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "conversations.setPurpose error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "not_in_channel", "is_archived", "too_long", "user_is_restricted", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.setPurpose method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.setTopic": {"post": {"tags": ["conversations"], "description": "Sets the topic for a conversation.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.setTopic"}, "operationId": "conversations_setTopic", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "topic"], "properties": {"channel": {"type": "string", "description": "Conversation to set the topic of"}, "topic": {"type": "string", "description": "The new topic string. Does not support formatting or linkification."}}}}, "application/json": {"schema": {"required": ["channel", "topic"], "properties": {"channel": {"type": "string", "description": "Conversation to set the topic of"}, "topic": {"type": "string", "description": "The new topic string. Does not support formatting or linkification."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.setTopic success schema", "required": ["channel", "ok"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/objs_conversation"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from conversations.setTopic method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "conversations.setTopic error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "not_in_channel", "is_archived", "too_long", "user_is_restricted", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.setTopic method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/conversations.unarchive": {"post": {"tags": ["conversations"], "description": "Reverses conversation archival.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/conversations.unarchive"}, "operationId": "conversations_unarchive", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `conversations:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "ID of conversation to unarchive"}}}}, "application/json": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "ID of conversation to unarchive"}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "conversations.unarchive success schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from conversations.unarchive method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "conversations.unarchive error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "channel_not_found", "not_archived", "not_authed", "invalid_auth", "account_inactive", "user_is_bot", "user_is_restricted", "user_is_ultra_restricted", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "team_added_to_org", "missing_charset", "superfluous_charset"]}, "needed": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "provided": {"type": "string"}}, "description": "Schema for error response from conversations.unarchive method"}, "example": {"error": "channel_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["channels:write", "groups:write", "im:write", "mpim:write"]}]}}, "/dnd.endDnd": {"post": {"tags": ["dnd"], "description": "Ends the current user's Do Not Disturb session immediately.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/dnd.endDnd"}, "operationId": "dnd_endDnd", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `dnd:write`", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "dnd.endDnd schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from dnd.endDnd method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "dnd.endDnd error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["unknown_error", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from dnd.endDnd method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["dnd:write"]}]}}, "/dnd.endSnooze": {"post": {"tags": ["dnd"], "description": "Ends the current user's snooze mode immediately.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/dnd.endSnooze"}, "operationId": "dnd_endSnooze", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `dnd:write`", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "dnd.endSnooze schema", "required": ["dnd_enabled", "next_dnd_end_ts", "next_dnd_start_ts", "ok", "snooze_enabled"], "type": "object", "properties": {"dnd_enabled": {"type": "boolean"}, "next_dnd_end_ts": {"type": "integer"}, "next_dnd_start_ts": {"type": "integer"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "snooze_enabled": {"type": "boolean"}}, "description": "Schema for successful response from dnd.endSnooze method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "dnd.endSnooze error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["snooze_not_active", "snooze_end_failed", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from dnd.endSnooze method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["dnd:write"]}]}}, "/dnd.info": {"get": {"tags": ["dnd"], "description": "Retrieves a user's current Do Not Disturb status.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/dnd.info"}, "operationId": "dnd_info", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `dnd:read`", "required": true, "schema": {"type": "string"}}, {"name": "user", "in": "query", "description": "User to fetch status for (defaults to current user)", "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "dnd.info schema", "required": ["dnd_enabled", "next_dnd_end_ts", "next_dnd_start_ts", "ok"], "type": "object", "properties": {"dnd_enabled": {"type": "boolean"}, "next_dnd_end_ts": {"type": "integer"}, "next_dnd_start_ts": {"type": "integer"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "snooze_enabled": {"type": "boolean"}, "snooze_endtime": {"type": "integer"}, "snooze_remaining": {"type": "integer"}}, "description": "Schema for successful response from dnd.info method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "dnd.info error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["user_not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from dnd.info method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["dnd:read"]}]}}, "/dnd.setSnooze": {"post": {"tags": ["dnd"], "description": "Turns on Do Not Disturb mode for the current user, or changes its duration.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/dnd.setSnooze"}, "operationId": "dnd_setSnooze", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["num_minutes", "token"], "properties": {"token": {"type": "string", "description": "Authentication token. Requires scope: `dnd:write`"}, "num_minutes": {"type": "string", "description": "Number of minutes, from now, to snooze until."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "dnd.setSnooze schema", "required": ["ok", "snooze_enabled", "snooze_endtime", "snooze_remaining"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "snooze_enabled": {"type": "boolean"}, "snooze_endtime": {"type": "integer"}, "snooze_remaining": {"type": "integer"}}, "description": "Schema for successful response from dnd.setSnooze method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "dnd.setSnooze error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["missing_duration", "snooze_failed", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "too_long", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from dnd.setSnooze method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["dnd:write"]}]}}, "/dnd.teamInfo": {"get": {"tags": ["dnd"], "description": "Retrieves the Do Not Disturb status for up to 50 users on a team.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/dnd.teamInfo"}, "operationId": "dnd_teamInfo", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `dnd:read`", "required": true, "schema": {"type": "string"}}, {"name": "users", "in": "query", "description": "Comma-separated list of users to fetch Do Not Disturb status for", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "Default success template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."}, "example": {"ok": true, "users": {"U023BECGF": {"dnd_enabled": true, "next_dnd_end_ts": 1450423800, "next_dnd_start_ts": 1450387800}, "W058CJVAA": {"dnd_enabled": false, "next_dnd_end_ts": 1, "next_dnd_start_ts": 1}}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "Default error template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["dnd:read"]}]}}, "/emoji.list": {"get": {"tags": ["emoji"], "description": "Lists custom emoji for a team.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/emoji.list"}, "operationId": "emoji_list", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `emoji:read`", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "Default success template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "Default error template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["emoji:read"]}]}}, "/oauth.access": {"get": {"tags": ["oauth"], "description": "Exchanges a temporary OAuth verifier code for an access token.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/oauth.access"}, "operationId": "oauth_access", "parameters": [{"name": "client_id", "in": "query", "description": "Issued when you created your application.", "schema": {"type": "string"}}, {"name": "client_secret", "in": "query", "description": "Issued when you created your application.", "schema": {"type": "string"}}, {"name": "code", "in": "query", "description": "The `code` param returned via the OAuth callback.", "schema": {"type": "string"}}, {"name": "redirect_uri", "in": "query", "description": "This must match the originally submitted URI (if one was sent).", "schema": {"type": "string"}}, {"name": "single_channel", "in": "query", "description": "Request the user to add your app only to a single channel. Only valid with a [legacy workspace app](https://api.slack.com/legacy-workspace-apps).", "schema": {"type": "boolean"}}], "responses": {"200": {"description": "Successful user token negotiation for a single scope", "content": {"application/json": {"schema": {"title": "Default success template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."}, "example": {"access_token": "xoxp-XXXXXXXX-XXXXXXXX-XXXXX", "scope": "groups:write", "team_id": "TXXXXXXXXX", "team_name": "Wyld Stallyns LLC"}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "Default error template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."}, "example": {"error": "invalid_client_id", "ok": false}}}}}, "security": [{"slackAuth": ["none"]}]}}, "/oauth.token": {"get": {"tags": ["oauth"], "description": "Exchanges a temporary OAuth verifier code for a workspace token.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/oauth.token"}, "operationId": "oauth_token", "parameters": [{"name": "client_id", "in": "query", "description": "Issued when you created your application.", "schema": {"type": "string"}}, {"name": "client_secret", "in": "query", "description": "Issued when you created your application.", "schema": {"type": "string"}}, {"name": "code", "in": "query", "description": "The `code` param returned via the OAuth callback.", "schema": {"type": "string"}}, {"name": "redirect_uri", "in": "query", "description": "This must match the originally submitted URI (if one was sent).", "schema": {"type": "string"}}, {"name": "single_channel", "in": "query", "description": "Request the user to add your app only to a single channel.", "schema": {"type": "boolean"}}], "responses": {"200": {"description": "Success example using a workspace app produces a very different kind of response", "content": {"application/json": {"schema": {"title": "Default success template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."}, "example": {"access_token": "xoxa-access-token-string", "app_id": "A012345678", "app_user_id": "U0AB12ABC", "authorizing_user_id": "U0HTT3Q0G", "installer_user_id": "U061F7AUR", "ok": true, "permissions": [{"resource_id": 0, "resource_type": "channel", "scopes": ["channels:read", "chat:write:user"]}], "single_channel_id": "C061EG9T2", "team_id": "T061EG9Z9", "team_name": "Subarachnoid Workspace", "token_type": "app"}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "Default error template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."}, "example": {"error": "invalid_client_id", "ok": false}}}}}, "security": [{"slackAuth": ["none"]}]}}, "/oauth.v2.access": {"get": {"tags": ["oauth.v2", "oauth"], "description": "Exchanges a temporary OAuth verifier code for an access token.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/oauth.v2.access"}, "operationId": "oauth_v2_access", "parameters": [{"name": "client_id", "in": "query", "description": "Issued when you created your application.", "schema": {"type": "string"}}, {"name": "client_secret", "in": "query", "description": "Issued when you created your application.", "schema": {"type": "string"}}, {"name": "code", "in": "query", "description": "The `code` param returned via the OAuth callback.", "required": true, "schema": {"type": "string"}}, {"name": "redirect_uri", "in": "query", "description": "This must match the originally submitted URI (if one was sent).", "schema": {"type": "string"}}], "responses": {"200": {"description": "Successful token request with scopes for both a bot user and a user token", "content": {"application/json": {"schema": {"title": "Default success template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."}, "example": {"access_token": "xoxb-17653672481-19874698323-pdFZKVeTuE8sk7oOcBrzbqgy", "app_id": "A0KRD7HC3", "authed_user": {"access_token": "xoxp-1234", "id": "U1234", "scope": "chat:write", "token_type": "user"}, "bot_user_id": "U0KRQLJ9H", "enterprise": {"id": "E12345678", "name": "slack-sports"}, "ok": true, "scope": "commands,incoming-webhook", "team": {"id": "T9TK3CUKW", "name": "Slack Softball Team"}, "token_type": "bot"}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "Default error template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."}, "example": {"error": "invalid_client_id", "ok": false}}}}}, "security": [{"slackAuth": ["none"]}]}}, "/pins.add": {"post": {"tags": ["pins"], "description": "Pins an item to a channel.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/pins.add"}, "operationId": "pins_add", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `pins:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "Channel to pin the item in."}, "timestamp": {"type": "string", "description": "Timestamp of the message to pin."}}}}, "application/json": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "Channel to pin the item in."}, "timestamp": {"type": "string", "description": "Timestamp of the message to pin."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "pins.add schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from pins.add method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "pins.add error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["bad_timestamp", "message_not_found", "channel_not_found", "no_item_specified", "already_pinned", "permission_denied", "file_not_shared", "not_pinnable", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from pins.add method"}, "example": {"error": "channel_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["pins:write"]}]}}, "/pins.list": {"get": {"tags": ["pins"], "description": "Lists items pinned to a channel.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/pins.list"}, "operationId": "pins_list", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `pins:read`", "required": true, "schema": {"type": "string"}}, {"name": "channel", "in": "query", "description": "Channel to get pinned items for.", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"oneOf": [{"$ref": "#/components/schemas/obj_ref_16"}, {"$ref": "#/components/schemas/obj_ref_19"}]}, "example": {"items": [{"channel": "C2U86NC6H", "created": 1508881078, "created_by": "U2U85N1RZ", "message": {"permalink": "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508197641000151", "pinned_to": ["C2U86NC6H"], "text": "What is the meaning of life?", "ts": "1508197641.000151", "type": "message", "user": "U2U85N1RZ"}, "type": "message"}, {"channel": "C2U86NC6H", "created": 1508880991, "created_by": "U2U85N1RZ", "message": {"permalink": "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508284197000015", "pinned_to": ["C2U86NC6H"], "text": "The meaning of life, the universe, and everything is 42.", "ts": "1503289197.000015", "type": "message", "user": "U2U85N1RZ"}, "type": "message"}], "ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "pins.list error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["channel_not_found", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from pins.list method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["pins:read"]}]}}, "/pins.remove": {"post": {"tags": ["pins"], "description": "Un-pins an item from a channel.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/pins.remove"}, "operationId": "pins_remove", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `pins:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "Channel where the item is pinned to."}, "timestamp": {"type": "string", "description": "Timestamp of the message to un-pin."}}}}, "application/json": {"schema": {"required": ["channel"], "properties": {"channel": {"type": "string", "description": "Channel where the item is pinned to."}, "timestamp": {"type": "string", "description": "Timestamp of the message to un-pin."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "pins.remove schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from pins.remove method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "pins.remove error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["bad_timestamp", "file_not_found", "file_comment_not_found", "message_not_found", "no_item_specified", "not_pinned", "permission_denied", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_typ", "missing_post_typ", "team_added_to_org", "invalid_json", "json_not_object", "request_timeou", "upgrade_required"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from pins.remove method"}, "example": {"error": "no_pin", "ok": false}}}}}, "security": [{"slackAuth": ["pins:write"]}]}}, "/reactions.add": {"post": {"tags": ["reactions"], "description": "Adds a reaction to an item.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/reactions.add"}, "operationId": "reactions_add", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `reactions:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["channel", "name", "timestamp"], "properties": {"channel": {"type": "string", "description": "Channel where the message to add reaction to was posted."}, "name": {"type": "string", "description": "Reaction (emoji) name."}, "timestamp": {"type": "string", "description": "Timestamp of the message to add reaction to."}}}}, "application/json": {"schema": {"required": ["channel", "name", "timestamp"], "properties": {"channel": {"type": "string", "description": "Channel where the message to add reaction to was posted."}, "name": {"type": "string", "description": "Reaction (emoji) name."}, "timestamp": {"type": "string", "description": "Timestamp of the message to add reaction to."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "reactions.add schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from reactions.add method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "reactions.add error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["bad_timestamp", "message_not_found", "no_item_specified", "invalid_name", "already_reacted", "too_many_emoji", "too_many_reactions", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from reactions.add method"}, "example": {"error": "already_reacted", "ok": false}}}}}, "security": [{"slackAuth": ["reactions:write"]}]}}, "/reactions.get": {"get": {"tags": ["reactions"], "description": "Gets reactions for an item.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/reactions.get"}, "operationId": "reactions_get", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `reactions:read`", "required": true, "schema": {"type": "string"}}, {"name": "channel", "in": "query", "description": "Channel where the message to get reactions for was posted.", "schema": {"type": "string"}}, {"name": "file", "in": "query", "description": "File to get reactions for.", "schema": {"type": "string"}}, {"name": "file_comment", "in": "query", "description": "File comment to get reactions for.", "schema": {"type": "string"}}, {"name": "full", "in": "query", "description": "If true always return the complete reaction list.", "schema": {"type": "boolean"}}, {"name": "timestamp", "in": "query", "description": "Timestamp of the message to get reactions for.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"oneOf": [{"$ref": "#/components/schemas/obj_ref_20"}, {"$ref": "#/components/schemas/obj_ref_21"}, {"$ref": "#/components/schemas/obj_ref_22"}]}, "example": {"file": {"channels": ["C2U7V2YA2"], "comments_count": 1, "created": 1507850315, "groups": [], "id": "F7H0D7ZA4", "ims": [], "name": "computer.gif", "reactions": [{"count": 1, "name": "stuck_out_tongue_winking_eye", "users": ["U2U85N1RV"]}], "timestamp": 1507850315, "title": "computer.gif", "user": "U2U85N1RV"}, "ok": true, "type": "file"}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "reactions.get error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["bad_timestamp", "file_not_found", "file_comment_not_found", "message_not_found", "no_item_specified", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from reactions.get method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["reactions:read"]}]}}, "/reactions.list": {"get": {"tags": ["reactions"], "description": "Lists reactions made by a user.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/reactions.list"}, "operationId": "reactions_list", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `reactions:read`", "required": true, "schema": {"type": "string"}}, {"name": "user", "in": "query", "description": "Show reactions made by this user. Defaults to the authed user.", "schema": {"type": "string"}}, {"name": "full", "in": "query", "description": "If true always return the complete reaction list.", "schema": {"type": "boolean"}}, {"name": "count", "in": "query", "schema": {"type": "integer"}}, {"name": "page", "in": "query", "schema": {"type": "integer"}}, {"name": "cursor", "in": "query", "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.", "schema": {"type": "integer"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "reactions.list schema", "required": ["items", "ok"], "type": "object", "properties": {"items": {"type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/obj_ref_23"}, {"$ref": "#/components/schemas/obj_ref_24"}, {"$ref": "#/components/schemas/obj_ref_25"}]}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "paging": {"$ref": "#/components/schemas/objs_paging"}, "response_metadata": {"$ref": "#/components/schemas/objs_response_metadata"}}, "description": "Schema for successful response from reactions.list method"}, "example": {"items": [{"channel": "C3UKJTQAC", "message": {"bot_id": "B4VLRLMKJ", "reactions": [{"count": 1, "name": "robot_face", "users": ["U2U85N1RV"]}], "subtype": "bot_message", "text": "Hello from Python! :tada:", "ts": "1507849573.000090", "username": "Shipit Notifications"}, "type": "message"}, {"comment": {"comment": "This is a file comment", "created": 1508286096, "id": "Fc7LP08P1U", "reactions": [{"count": 1, "name": "white_check_mark", "users": ["U2U85N1RV"]}], "timestamp": 1508286096, "type": "file_comment", "user": "U2U85N1RV"}, "file": {"channels": ["C2U7V2YA2"], "comments_count": 1, "created": 1507850315, "reactions": [{"count": 1, "name": "stuck_out_tongue_winking_eye", "users": ["U2U85N1RV"]}], "title": "computer.gif", "user": "U2U85N1RV", "username": ""}}, {"file": {"channels": ["C2U7V2YA2"], "comments_count": 1, "created": 1507850315, "id": "F7H0D7ZA4", "name": "computer.gif", "reactions": [{"count": 1, "name": "stuck_out_tongue_winking_eye", "users": ["U2U85N1RV"]}], "size": 1639034, "title": "computer.gif", "user": "U2U85N1RV", "username": ""}, "type": "file"}], "ok": true, "response_metadata": {"next_cursor": "dGVhbTpDMUg5UkVTR0w="}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "reactions.list error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["user_not_found", "not_authed", "invalid_auth", "account_inactiv", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from reactions.list method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["reactions:read"]}]}}, "/reactions.remove": {"post": {"tags": ["reactions"], "description": "Removes a reaction from an item.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/reactions.remove"}, "operationId": "reactions_remove", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `reactions:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["name"], "properties": {"name": {"type": "string", "description": "Reaction (emoji) name."}, "file": {"type": "string", "description": "File to remove reaction from."}, "file_comment": {"type": "string", "description": "File comment to remove reaction from."}, "channel": {"type": "string", "description": "Channel where the message to remove reaction from was posted."}, "timestamp": {"type": "string", "description": "Timestamp of the message to remove reaction from."}}}}, "application/json": {"schema": {"required": ["name"], "properties": {"name": {"type": "string", "description": "Reaction (emoji) name."}, "file": {"type": "string", "description": "File to remove reaction from."}, "file_comment": {"type": "string", "description": "File comment to remove reaction from."}, "channel": {"type": "string", "description": "Channel where the message to remove reaction from was posted."}, "timestamp": {"type": "string", "description": "Timestamp of the message to remove reaction from."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "reactions.remove schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from reactions.remove method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "reactions.remove error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["bad_timestamp", "file_not_found", "file_comment_not_found", "message_not_found", "no_item_specified", "invalid_name", "no_reaction", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from reactions.remove method"}, "example": {"error": "no_reaction", "ok": false}}}}}, "security": [{"slackAuth": ["reactions:write"]}]}}, "/reminders.add": {"post": {"tags": ["reminders"], "description": "Creates a reminder.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/reminders.add"}, "operationId": "reminders_add", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `reminders:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["text", "time"], "properties": {"text": {"type": "string", "description": "The content of the reminder"}, "time": {"type": "string", "description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")"}, "user": {"type": "string", "description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it."}}}}, "application/json": {"schema": {"required": ["text", "time"], "properties": {"text": {"type": "string", "description": "The content of the reminder"}, "time": {"type": "string", "description": "When this reminder should happen: the Unix timestamp (up to five years from now), the number of seconds until the reminder (if within 24 hours), or a natural language description (Ex. \"in 15 minutes,\" or \"every Thursday\")"}, "user": {"type": "string", "description": "The user who will receive the reminder. If no user is specified, the reminder will go to user who created it."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "reminders.add schema", "required": ["ok", "reminder"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "reminder": {"$ref": "#/components/schemas/objs_reminder"}}, "description": "Schema for successful response from reminders.add method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "reminders.add error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["cannot_parse", "user_not_found", "cannot_add_bot", "cannot_add_slackbot", "cannot_add_others", "cannot_add_others_recurring", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from reminders.add method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["reminders:write"]}]}}, "/reminders.complete": {"post": {"tags": ["reminders"], "description": "Marks a reminder as complete.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/reminders.complete"}, "operationId": "reminders_complete", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `reminders:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["reminder"], "properties": {"reminder": {"type": "string", "description": "The ID of the reminder to be marked as complete"}}}}, "application/json": {"schema": {"required": ["reminder"], "properties": {"reminder": {"type": "string", "description": "The ID of the reminder to be marked as complete"}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "reminders.complete schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from reminders.complete method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "reminders.complete error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["not_found", "cannot_complete_recurring", "cannot_complete_others", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from reminders.complete method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["reminders:write"]}]}}, "/reminders.delete": {"post": {"tags": ["reminders"], "description": "Deletes a reminder.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/reminders.delete"}, "operationId": "reminders_delete", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `reminders:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["reminder"], "properties": {"reminder": {"type": "string", "description": "The ID of the reminder"}}}}, "application/json": {"schema": {"required": ["reminder"], "properties": {"reminder": {"type": "string", "description": "The ID of the reminder"}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "reminders.delete schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from reminders.delete method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "reminders.delete error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from reminders.delete method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["reminders:write"]}]}}, "/reminders.info": {"get": {"tags": ["reminders"], "description": "Gets information about a reminder.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/reminders.info"}, "operationId": "reminders_info", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `reminders:read`", "required": true, "schema": {"type": "string"}}, {"name": "reminder", "in": "query", "description": "The ID of the reminder", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "reminders.info schema", "required": ["ok", "reminder"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "reminder": {"$ref": "#/components/schemas/objs_reminder"}}, "description": "Schema for successful response from reminders.info method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "reminders.info error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from reminders.info method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["reminders:read"]}]}}, "/reminders.list": {"get": {"tags": ["reminders"], "description": "Lists all reminders created by or for a given user.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/reminders.list"}, "operationId": "reminders_list", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `reminders:read`", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "reminders.list schema", "required": ["ok", "reminders"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "reminders": {"type": "array", "items": {"$ref": "#/components/schemas/objs_reminder"}}}, "description": "Schema for successful response from reminders.list method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "reminders.list error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from reminders.list method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["reminders:read"]}]}}, "/search.messages": {"get": {"tags": ["search"], "description": "Searches for messages matching a query.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/search.messages"}, "operationId": "search_messages", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `search:read`", "required": true, "schema": {"type": "string"}}, {"name": "count", "in": "query", "description": "Pass the number of results you want per \"page\". Maximum of `100`.", "schema": {"type": "integer"}}, {"name": "highlight", "in": "query", "description": "Pass a value of `true` to enable query highlight markers (see below).", "schema": {"type": "boolean"}}, {"name": "page", "in": "query", "schema": {"type": "integer"}}, {"name": "query", "in": "query", "description": "Search query.", "required": true, "schema": {"type": "string"}}, {"name": "sort", "in": "query", "description": "Return matches sorted by either `score` or `timestamp`.", "schema": {"type": "string"}}, {"name": "sort_dir", "in": "query", "description": "Change sort direction to ascending (`asc`) or descending (`desc`).", "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "Default success template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method."}, "example": {"messages": {"matches": [{"channel": {"id": "C12345678", "is_ext_shared": false, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_shared": false, "name": "general", "pending_shared": []}, "iid": "cb64bdaa-c1e8-4631-8a91-0f78080113e9", "permalink": "https://hitchhikers.slack.com/archives/C12345678/p1508284197000015", "team": "T12345678", "text": "The meaning of life the universe and everything is 42.", "ts": "1508284197.000015", "type": "message", "user": "U2U85N1RV", "username": "roach"}, {"channel": {"id": "C12345678", "is_ext_shared": false, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_shared": false, "name": "random", "pending_shared": []}, "iid": "9a00d3c9-bd2d-45b0-988b-6cff99ae2a90", "permalink": "https://hitchhikers.slack.com/archives/C12345678/p1508795665000236", "team": "T12345678", "text": "The meaning of life the universe and everything is 101010", "ts": "1508795665.000236", "type": "message", "user": "", "username": "robot overlord"}], "pagination": {"first": 1, "last": 2, "page": 1, "page_count": 1, "per_page": 20, "total_count": 2}, "paging": {"count": 20, "page": 1, "pages": 1, "total": 2}, "total": 2}, "ok": true, "query": "The meaning of life the universe and everything"}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "Default error template", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method."}, "example": {"error": "No query passed", "ok": false}}}}}, "security": [{"slackAuth": ["search:read"]}]}}, "/stars.add": {"post": {"tags": ["stars"], "description": "Adds a star to an item.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/stars.add"}, "operationId": "stars_add", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `stars:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"properties": {"channel": {"type": "string", "description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`)."}, "file": {"type": "string", "description": "File to add star to."}, "file_comment": {"type": "string", "description": "File comment to add star to."}, "timestamp": {"type": "string", "description": "Timestamp of the message to add star to."}}}}, "application/json": {"schema": {"properties": {"channel": {"type": "string", "description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`)."}, "file": {"type": "string", "description": "File to add star to."}, "file_comment": {"type": "string", "description": "File comment to add star to."}, "timestamp": {"type": "string", "description": "Timestamp of the message to add star to."}}}}}}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "stars.add schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from stars.add method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "stars.add error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["bad_timestamp", "message_not_found", "file_not_found", "file_comment_not_found", "channel_not_found", "no_item_specified", "already_starred", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from stars.add method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["stars:write"]}]}}, "/stars.list": {"get": {"tags": ["stars"], "description": "Lists stars for a user.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/stars.list"}, "operationId": "stars_list", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `stars:read`", "required": true, "schema": {"type": "string"}}, {"name": "count", "in": "query", "schema": {"type": "string"}}, {"name": "page", "in": "query", "schema": {"type": "string"}}, {"name": "cursor", "in": "query", "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.", "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.", "schema": {"type": "integer"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "stars.list schema", "required": ["items", "ok"], "type": "object", "properties": {"items": {"type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/obj_ref_26"}, {"$ref": "#/components/schemas/obj_ref_27"}, {"$ref": "#/components/schemas/obj_ref_28"}, {"$ref": "#/components/schemas/obj_ref_29"}, {"$ref": "#/components/schemas/obj_ref_30"}, {"$ref": "#/components/schemas/obj_ref_31"}]}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "paging": {"$ref": "#/components/schemas/objs_paging"}}, "description": "Schema for successful response from stars.list method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "stars.list error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from stars.list method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["stars:read"]}]}}, "/stars.remove": {"post": {"tags": ["stars"], "description": "Removes a star from an item.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/stars.remove"}, "operationId": "stars_remove", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `stars:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"properties": {"channel": {"type": "string", "description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`)."}, "file": {"type": "string", "description": "File to remove star from."}, "file_comment": {"type": "string", "description": "File comment to remove star from."}, "timestamp": {"type": "string", "description": "Timestamp of the message to remove star from."}}}}, "application/json": {"schema": {"properties": {"channel": {"type": "string", "description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`)."}, "file": {"type": "string", "description": "File to remove star from."}, "file_comment": {"type": "string", "description": "File comment to remove star from."}, "timestamp": {"type": "string", "description": "Timestamp of the message to remove star from."}}}}}}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "stars.remove schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from stars.remove method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "stars.remove error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["bad_timestamp", "message_not_found", "file_not_found", "file_comment_not_found", "channel_not_found", "no_item_specified", "not_starred", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from stars.remove method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["stars:write"]}]}}, "/users.conversations": {"get": {"tags": ["users"], "description": "List conversations the calling user may access.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.conversations"}, "operationId": "users_conversations", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `conversations:read`", "required": true, "schema": {"type": "string"}}, {"name": "user", "in": "query", "description": "Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership.", "schema": {"type": "string"}}, {"name": "types", "in": "query", "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`", "schema": {"type": "string"}}, {"name": "exclude_archived", "in": "query", "description": "Set to `true` to exclude archived channels from the list", "schema": {"type": "boolean"}}, {"name": "limit", "in": "query", "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.", "schema": {"type": "integer"}}, {"name": "cursor", "in": "query", "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response with only public channels. Note how `num_members` and `is_member` are not returned like typical `conversations` objects.", "content": {"application/json": {"schema": {"title": "users.conversations success schema", "required": ["channels", "ok"], "type": "object", "properties": {"channels": {"uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/objs_conversation"}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "response_metadata": {"required": ["next_cursor"], "type": "object", "properties": {"next_cursor": {"type": "string"}}}}, "description": "Schema for successful response from users.conversations method. Returned conversation objects do not include `num_members` or `is_member`"}, "example": {"channels": [{"created": 1449252889, "creator": "U012A3CDE", "id": "C012AB3CD", "is_archived": false, "is_channel": true, "is_ext_shared": false, "is_general": true, "is_group": false, "is_im": false, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_shared": false, "name": "general", "name_normalized": "general", "pending_shared": [], "previous_names": [], "purpose": {"creator": "", "last_set": 0, "value": "This channel is for team-wide communication and announcements. All team members are in this channel."}, "topic": {"creator": "", "last_set": 0, "value": "Company-wide announcements and work-based matters"}, "unlinked": 0}, {"created": 1449252889, "creator": "U061F7AUR", "id": "C061EG9T2", "is_archived": false, "is_channel": true, "is_ext_shared": false, "is_general": false, "is_group": false, "is_im": false, "is_mpim": false, "is_org_shared": false, "is_pending_ext_shared": false, "is_private": false, "is_shared": false, "name": "random", "name_normalized": "random", "pending_shared": [], "previous_names": [], "purpose": {"creator": "", "last_set": 0, "value": "A place for non-work-related flimflam, faffing, hodge-podge or jibber-jabber you'd prefer to keep out of more focused work-related channels."}, "topic": {"creator": "", "last_set": 0, "value": "Non-work banter and water cooler conversation"}, "unlinked": 0}], "ok": true, "response_metadata": {"next_cursor": "dGVhbTpDMDYxRkE1UEI="}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.conversations error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["method_not_supported_for_channel_type", "missing_scope", "invalid_types", "invalid_cursor", "invalid_limit", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from users.conversations method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["channels:read", "groups:read", "im:read", "mpim:read"]}]}}, "/users.deletePhoto": {"post": {"tags": ["users"], "description": "Delete the user profile photo", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.deletePhoto"}, "operationId": "users_deletePhoto", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["token"], "properties": {"token": {"type": "string", "description": "Authentication token. Requires scope: `users.profile:write`"}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "users.deletePhoto schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from users.deletePhoto method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.deletePhoto error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from users.deletePhoto method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["users.profile:write"]}]}}, "/users.getPresence": {"get": {"tags": ["users"], "description": "Gets user presence information.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.getPresence"}, "operationId": "users_getPresence", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `users:read`", "required": true, "schema": {"type": "string"}}, {"name": "user", "in": "query", "description": "User to get presence info on. Defaults to the authed user.", "schema": {"type": "string"}}], "responses": {"200": {"description": "When requesting information for a different user, this method just returns the current presence (either `active` or `away`).", "content": {"application/json": {"schema": {"title": "API method: users.getPresence", "required": ["ok", "presence"], "type": "object", "properties": {"auto_away": {"type": "boolean"}, "connection_count": {"type": "integer"}, "last_activity": {"type": "integer"}, "manual_away": {"type": "boolean"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "online": {"type": "boolean"}, "presence": {"type": "string"}}, "description": "Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65"}, "example": {"ok": true, "presence": "active"}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.counts error schema", "required": ["error", "ok"], "type": "object", "properties": {"error": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response users.getPresence method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["users:read"]}]}}, "/users.identity": {"get": {"tags": ["users"], "description": "Get a user's identity.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.identity"}, "operationId": "users_identity", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `identity.basic`", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "You will receive at a minimum the following information:", "content": {"application/json": {"schema": {"oneOf": [{"$ref": "#/components/schemas/obj_ref_32"}, {"$ref": "#/components/schemas/obj_ref_33"}, {"$ref": "#/components/schemas/obj_ref_34"}, {"$ref": "#/components/schemas/obj_ref_35"}]}, "example": {"ok": true, "team": {"id": "T0G9PQBBK"}, "user": {"id": "U0G9QF9C6", "name": "Sonny Whether"}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.identity error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from users.identity method"}, "example": {"error": "account_inactive", "ok": false}}}}}, "security": [{"slackAuth": ["identity.basic"]}]}}, "/users.info": {"get": {"tags": ["users"], "description": "Gets information about a user.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.info"}, "operationId": "users_info", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `users:read`", "required": true, "schema": {"type": "string"}}, {"name": "include_locale", "in": "query", "description": "Set this to `true` to receive the locale for this user. Defaults to `false`", "schema": {"type": "boolean"}}, {"name": "user", "in": "query", "description": "User to get info on", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "users.info success schema", "required": ["ok", "user"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "user": {"$ref": "#/components/schemas/objs_user"}}, "description": "Schema for successful response from users.info method"}, "example": {"ok": true, "user": {"color": "9f69e7", "deleted": false, "has_2fa": false, "id": "W012A3CDE", "is_admin": true, "is_app_user": false, "is_bot": false, "is_owner": false, "is_primary_owner": false, "is_restricted": false, "is_ultra_restricted": false, "name": "spengler", "profile": {"avatar_hash": "ge3b51ca72de", "display_name": "spengler", "display_name_normalized": "spengler", "email": "spengler@ghostbusters.example.com", "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_original": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "real_name": "Egon Spengler", "real_name_normalized": "Egon Spengler", "status_emoji": ":books:", "status_text": "Print is dead", "team": "T012AB3C4"}, "real_name": "Egon Spengler", "team_id": "T012AB3C4", "tz": "America/Los_Angeles", "tz_label": "Pacific Daylight Time", "tz_offset": -25200, "updated": 1502138686}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.info error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string"}, "error": {"type": "string", "enum": ["user_not_found", "user_not_visible", "not_authed", "invalid_auth", "account_inactive", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from users.info method"}, "example": {"error": "user_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["users:read"]}]}}, "/users.list": {"get": {"tags": ["users"], "description": "Lists all users in a Slack team.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.list"}, "operationId": "users_list", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `users:read`", "required": true, "schema": {"type": "string"}}, {"name": "limit", "in": "query", "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors.", "schema": {"type": "integer"}}, {"name": "cursor", "in": "query", "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.", "schema": {"type": "string"}}, {"name": "include_locale", "in": "query", "description": "Set this to `true` to receive the locale for users. Defaults to `false`", "schema": {"type": "boolean"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "users.list schema", "required": ["cache_ts", "members", "ok"], "type": "object", "properties": {"cache_ts": {"type": "integer"}, "members": {"minItems": 1, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/objs_user"}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "response_metadata": {"$ref": "#/components/schemas/objs_response_metadata"}}, "description": "Schema for successful response from users.list method"}, "example": {"cache_ts": 1498777272, "members": [{"color": "9f69e7", "deleted": false, "has_2fa": false, "id": "W012A3CDE", "is_admin": true, "is_app_user": false, "is_bot": false, "is_owner": false, "is_primary_owner": false, "is_restricted": false, "is_ultra_restricted": false, "name": "spengler", "profile": {"avatar_hash": "ge3b51ca72de", "display_name": "spengler", "display_name_normalized": "spengler", "email": "spengler@ghostbusters.example.com", "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "real_name": "Egon Spengler", "real_name_normalized": "Egon Spengler", "status_emoji": ":books:", "status_text": "Print is dead", "team": "T012AB3C4"}, "real_name": "spengler", "team_id": "T012AB3C4", "tz": "America/Los_Angeles", "tz_label": "Pacific Daylight Time", "tz_offset": -25200, "updated": 1502138686}, {"color": "9f69e7", "deleted": false, "has_2fa": false, "id": "W07QCRPA4", "is_admin": true, "is_bot": false, "is_owner": false, "is_primary_owner": false, "is_restricted": false, "is_ultra_restricted": false, "name": "glinda", "profile": {"avatar_hash": "8fbdd10b41c6", "display_name": "Glinda the Fairly Good", "display_name_normalized": "Glinda the Fairly Good", "email": "glenda@south.oz.coven", "first_name": "Glinda", "image_1024": "https://a.slack-edge.com...png", "image_192": "https://a.slack-edge.com...png", "image_24": "https://a.slack-edge.com...png", "image_32": "https://a.slack-edge.com...png", "image_48": "https://a.slack-edge.com...png", "image_512": "https://a.slack-edge.com...png", "image_72": "https://a.slack-edge.com...png", "image_original": "https://a.slack-edge.com...png", "last_name": "Southgood", "phone": "", "real_name": "Glinda Southgood", "real_name_normalized": "Glinda Southgood", "skype": "", "title": "Glinda the Good"}, "real_name": "Glinda Southgood", "team_id": "T0G9PQBBK", "tz": "America/Los_Angeles", "tz_label": "Pacific Daylight Time", "tz_offset": -25200, "updated": 1480527098}], "ok": true, "response_metadata": {"next_cursor": "dXNlcjpVMEc5V0ZYTlo="}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.list error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["limit_required", "invalid_cursor", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from users.list method"}, "example": {"error": "invalid_cursor", "ok": false}}}}}, "security": [{"slackAuth": ["users:read"]}]}}, "/users.lookupByEmail": {"get": {"tags": ["users"], "description": "Find a user with an email address.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.lookupByEmail"}, "operationId": "users_lookupByEmail", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `users:read.email`", "required": true, "schema": {"type": "string"}}, {"name": "email", "in": "query", "description": "An email address belonging to a user in the workspace", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "users.lookupByEmail success schema", "required": ["ok", "user"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "user": {"$ref": "#/components/schemas/objs_user"}}, "description": "Schema for successful response from users.lookupByEmail method"}, "example": {"ok": true, "user": {"color": "9f69e7", "deleted": false, "has_2fa": false, "id": "W012A3CDE", "is_admin": true, "is_app_user": false, "is_bot": false, "is_owner": false, "is_primary_owner": false, "is_restricted": false, "is_ultra_restricted": false, "name": "spengler", "profile": {"avatar_hash": "ge3b51ca72de", "display_name": "spengler", "display_name_normalized": "spengler", "email": "spengler@ghostbusters.example.com", "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "real_name": "Egon Spengler", "real_name_normalized": "Egon Spengler", "status_emoji": ":books:", "status_text": "Print is dead", "team": "T012AB3C4"}, "real_name": "Egon Spengler", "team_id": "T012AB3C4", "tz": "America/Los_Angeles", "tz_label": "Pacific Daylight Time", "tz_offset": -25200, "updated": 1502138686}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.lookupByEmail error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["users_not_found", "enterprise_is_restricted", "not_authed", "invalid_auth", "account_inactive", "no_permission", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from users.lookupByEmail method"}, "example": {"error": "users_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["users:read.email"]}]}}, "/users.profile.get": {"get": {"tags": ["users.profile", "users"], "description": "Retrieves a user's profile information.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.profile.get"}, "operationId": "users_profile_get", "parameters": [{"name": "token", "in": "query", "description": "Authentication token. Requires scope: `users.profile:read`", "required": true, "schema": {"type": "string"}}, {"name": "include_labels", "in": "query", "description": "Include labels for each ID in custom profile fields", "schema": {"type": "boolean"}}, {"name": "user", "in": "query", "description": "User to retrieve profile info for", "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "users.profile.get schema", "required": ["ok", "profile"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "profile": {"$ref": "#/components/schemas/objs_user_profile"}}, "description": "Schema for successful response from users.profile.get method"}, "example": {"ok": true, "profile": {"avatar_hash": "ge3b51ca72de", "display_name": "spengler", "display_name_normalized": "spengler", "email": "spengler@ghostbusters.example.com", "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_original": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "real_name": "Egon Spengler", "real_name_normalized": "Egon Spengler", "status_emoji": ":books:", "status_expiration": 0, "status_text": "Print is dead", "team": "T012AB3C4"}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.profile.get error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["user_not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from users.profile.get method"}, "example": {"error": "user_not_found", "ok": false}}}}}, "security": [{"slackAuth": ["users.profile:read"]}]}}, "/users.profile.set": {"post": {"tags": ["users.profile", "users"], "description": "Set the profile information for a user.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.profile.set"}, "operationId": "users_profile_set", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `users.profile:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"properties": {"name": {"type": "string", "description": "Name of a single key to set. Usable only if `profile` is not passed."}, "profile": {"type": "string", "description": "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters."}, "user": {"type": "string", "description": "ID of user to change. This argument may only be specified by team admins on paid teams."}, "value": {"type": "string", "description": "Value to set a single key to. Usable only if `profile` is not passed."}}}}, "application/json": {"schema": {"properties": {"name": {"type": "string", "description": "Name of a single key to set. Usable only if `profile` is not passed."}, "profile": {"type": "string", "description": "Collection of key:value pairs presented as a URL-encoded JSON hash. At most 50 fields may be set. Each field name is limited to 255 characters."}, "user": {"type": "string", "description": "ID of user to change. This argument may only be specified by team admins on paid teams."}, "value": {"type": "string", "description": "Value to set a single key to. Usable only if `profile` is not passed."}}}}}}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "users.profile.set schema", "required": ["ok", "profile", "username"], "type": "object", "properties": {"email_pending": {"type": "string"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "profile": {"$ref": "#/components/schemas/objs_user_profile"}, "username": {"type": "string"}}, "description": "Schema for successful response from users.profile.set method"}, "example": {"ok": true, "profile": {"avatar_hash": "ge3b51ca72de", "display_name": "spengler", "display_name_normalized": "spengler", "email": "spengler@ghostbusters.example.com", "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg", "real_name": "Egon Spengler", "real_name_normalized": "Egon Spengler", "status_emoji": ":books:", "status_expiration": 0, "status_text": "Print is dead", "team": "T012AB3C4"}}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.profile.set error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["reserved_name", "invalid_profile", "profile_set_failed", "not_admin", "not_app_admin", "cannot_update_admin_user", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from users.profile.set method"}, "example": {"error": "invalid_profile", "ok": false}}}}}, "security": [{"slackAuth": ["users.profile:write"]}]}}, "/users.setActive": {"post": {"tags": ["users"], "description": "Marked a user as active. Deprecated and non-functional.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.setActive"}, "operationId": "users_setActive", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `users:write`", "required": true, "schema": {"type": "string"}}], "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "users.setActive schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from users.setActive method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.setActive error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "ekm_access_denied", "missing_scope", "invalid_arguments", "invalid_arg_name", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "request_timeout", "fatal_error", "internal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from users.setActive method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["users:write"]}]}}, "/users.setPhoto": {"post": {"tags": ["users"], "description": "Set the user profile photo", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.setPhoto"}, "operationId": "users_setPhoto", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["token"], "properties": {"token": {"type": "string", "description": "Authentication token. Requires scope: `users.profile:write`"}, "crop_w": {"type": "string", "description": "Width/height of crop box (always square)"}, "crop_x": {"type": "string", "description": "X coordinate of top-left corner of crop box"}, "crop_y": {"type": "string", "description": "Y coordinate of top-left corner of crop box"}, "image": {"type": "string", "description": "File contents via `multipart/form-data`."}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "users.setPhoto schema", "required": ["ok", "profile"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "profile": {"required": ["avatar_hash", "image_1024", "image_192", "image_24", "image_32", "image_48", "image_512", "image_72", "image_original"], "type": "object", "properties": {"avatar_hash": {"pattern": "^[0-9a-f]{12}$", "type": "string"}, "image_1024": {"type": "string"}, "image_192": {"type": "string"}, "image_24": {"type": "string"}, "image_32": {"type": "string"}, "image_48": {"type": "string"}, "image_512": {"type": "string"}, "image_72": {"type": "string"}, "image_original": {"type": "string"}}}}, "description": "Schema for successful response from users.setPhoto method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.setPhoto error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "debug_step": {"type": "string", "description": "possibly DEV/QA only"}, "dims": {"type": "string", "description": "possibly DEV/QA only"}, "error": {"type": "string", "enum": ["bad_image", "too_large", "too_many_frames", "not_found", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "user_is_bot", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}, "time_ident": {"type": "integer", "description": "possibly DEV/QA only"}}, "description": "Schema for error response from users.setPhoto method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["users.profile:write"]}]}}, "/users.setPresence": {"post": {"tags": ["users"], "description": "Manually sets user presence.", "externalDocs": {"description": "API method documentation", "url": "https://api.slack.com/methods/users.setPresence"}, "operationId": "users_setPresence", "parameters": [{"name": "token", "in": "header", "description": "Authentication token. Requires scope: `users:write`", "required": true, "schema": {"type": "string"}}], "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"required": ["presence"], "properties": {"presence": {"type": "string", "description": "Either `auto` or `away`"}}}}, "application/json": {"schema": {"required": ["presence"], "properties": {"presence": {"type": "string", "description": "Either `auto` or `away`"}}}}}, "required": true}, "responses": {"200": {"description": "Typical success response", "content": {"application/json": {"schema": {"title": "users.setPresence schema", "required": ["ok"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}}, "description": "Schema for successful response from users.setPresence method"}, "example": {"ok": true}}}}, "default": {"description": "Typical error response", "content": {"application/json": {"schema": {"title": "users.setPresence error schema", "required": ["error", "ok"], "type": "object", "properties": {"callstack": {"type": "string", "description": "Note: PHP callstack is only visible in dev/qa"}, "error": {"type": "string", "enum": ["invalid_presence", "not_authed", "invalid_auth", "account_inactive", "token_revoked", "no_permission", "org_login_required", "invalid_arg_name", "invalid_array_arg", "invalid_charset", "invalid_form_data", "invalid_post_type", "missing_post_type", "team_added_to_org", "invalid_json", "json_not_object", "request_timeout", "upgrade_required", "fatal_error"]}, "ok": {"$ref": "#/components/schemas/defs_ok_false"}}, "description": "Schema for error response from users.setPresence method"}, "example": {"error": "invalid_auth", "ok": false}}}}}, "security": [{"slackAuth": ["users:write"]}]}}}, "components": {"schemas": {"blocks": {"title": "Block Kit blocks", "type": "array", "description": "This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.", "items": {"required": ["type"], "type": "object", "properties": {"type": {"type": "string"}}}}, "defs_app_id": {"title": "App ID", "pattern": "^A[A-Z0-9]{1,}$", "type": "string"}, "defs_bot_id": {"title": "Bot User ID", "pattern": "^B[A-Z0-9]{8,}$", "type": "string"}, "defs_channel": {"title": "Channel-like conversation ID", "pattern": "^[CGD][A-Z0-9]{8,}$", "type": "string"}, "defs_channel_id": {"title": "Channel ID", "pattern": "^[C][A-Z0-9]{2,}$", "type": "string"}, "defs_channel_name": {"title": "Name of a channel", "type": "string"}, "defs_comment_id": {"title": "File Comment ID", "pattern": "^Fc[A-Z0-9]{8,}$", "type": "string"}, "defs_dm_id": {"title": "Direct Message Channel ID", "pattern": "^[D][A-Z0-9]{8,}$", "type": "string"}, "defs_enterprise_id": {"title": "Enterprise ID", "pattern": "^[E][A-Z0-9]{8,}$", "type": "string"}, "defs_enterprise_name": {"title": "Name of the enterprise org", "type": "string"}, "defs_enterprise_user_id": {"title": "Enterprise User ID", "pattern": "^[WU][A-Z0-9]{8,}$", "type": "string"}, "defs_file_id": {"title": "File ID", "pattern": "^[F][A-Z0-9]{8,}$", "type": "string"}, "defs_group_id": {"title": "Private Channel ID", "pattern": "^[G][A-Z0-9]{8,}$", "type": "string"}, "defs_ok_false": {"title": "default failure response", "type": "boolean", "enum": [false]}, "defs_ok_true": {"title": "default success response", "type": "boolean", "enum": [true]}, "defs_optional_app_id": {"title": "App ID or empty string", "pattern": "^(A[A-Z0-9]{1,})?$", "type": "string"}, "defs_pinned_info": {"title": "Info for a pinned item", "type": "object"}, "defs_reminder_id": {"title": "Reminder ID", "pattern": "^Rm[A-Z0-9]{8,}$", "type": "string"}, "defs_subteam_id": {"title": "Subteam ID", "pattern": "^S[A-Z0-9]{2,}$", "type": "string"}, "defs_team": {"title": "Team ID", "pattern": "^[T][A-Z0-9]{2,}$", "type": "string"}, "defs_topic_purpose_creator": {"title": "User ID or empty string, used for topic and purpose creation", "pattern": "^[UW][A-Z0-9]{8,}$|^$", "type": "string"}, "defs_ts": {"title": "Timestamp in format 0123456789.012345", "pattern": "^\\d{10}\\.\\d{6}$", "type": "string"}, "defs_user_id": {"title": "User ID", "pattern": "^[UW][A-Z0-9]{2,}$", "type": "string"}, "defs_workspace_id": {"title": "Team or Enterprise ID", "pattern": "^[TE][A-Z0-9]{8,}$", "type": "string"}, "objs_bot_profile": {"title": "Bot Profile Object", "required": ["app_id", "deleted", "icons", "id", "name", "team_id", "updated"], "type": "object", "properties": {"app_id": {"$ref": "#/components/schemas/defs_app_id"}, "deleted": {"type": "boolean"}, "icons": {"required": ["image_36", "image_48", "image_72"], "type": "object", "properties": {"image_36": {"type": "string"}, "image_48": {"type": "string"}, "image_72": {"type": "string"}}}, "id": {"$ref": "#/components/schemas/defs_bot_id"}, "name": {"type": "string"}, "team_id": {"$ref": "#/components/schemas/defs_team"}, "updated": {"type": "integer"}}}, "objs_channel": {"title": "Channel Object", "required": ["created", "creator", "id", "is_channel", "is_mpim", "is_org_shared", "is_private", "is_shared", "members", "name", "name_normalized", "purpose", "topic"], "type": "object", "properties": {"accepted_user": {"$ref": "#/components/schemas/defs_user_id"}, "created": {"type": "integer"}, "creator": {"$ref": "#/components/schemas/defs_user_id"}, "id": {"$ref": "#/components/schemas/defs_channel_id"}, "is_archived": {"type": "boolean"}, "is_channel": {"type": "boolean"}, "is_frozen": {"type": "boolean"}, "is_general": {"type": "boolean"}, "is_member": {"type": "boolean"}, "is_moved": {"type": "integer"}, "is_mpim": {"type": "boolean"}, "is_non_threadable": {"type": "boolean"}, "is_org_shared": {"type": "boolean"}, "is_pending_ext_shared": {"type": "boolean"}, "is_private": {"type": "boolean"}, "is_read_only": {"type": "boolean"}, "is_shared": {"type": "boolean"}, "is_thread_only": {"type": "boolean"}, "last_read": {"$ref": "#/components/schemas/defs_ts"}, "latest": {"$ref": "#/components/schemas/objs_message"}, "members": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_user_id"}}, "name": {"type": "string"}, "name_normalized": {"type": "string"}, "num_members": {"type": "integer"}, "pending_shared": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}, "previous_names": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_channel_name"}}, "priority": {"type": "number"}, "purpose": {"required": ["creator", "last_set", "value"], "type": "object", "properties": {"creator": {"$ref": "#/components/schemas/defs_topic_purpose_creator"}, "last_set": {"type": "integer"}, "value": {"type": "string"}}}, "topic": {"required": ["creator", "last_set", "value"], "type": "object", "properties": {"creator": {"$ref": "#/components/schemas/defs_topic_purpose_creator"}, "last_set": {"type": "integer"}, "value": {"type": "string"}}}, "unlinked": {"title": "Field to determine whether a channel has ever been shared/disconnected in the past", "type": "integer"}, "unread_count": {"type": "integer"}, "unread_count_display": {"type": "integer"}}}, "objs_comment": {"title": "File Comment Object", "required": ["comment", "created", "id", "is_intro", "timestamp", "user"], "type": "object", "properties": {"comment": {"type": "string"}, "created": {"type": "integer"}, "id": {"$ref": "#/components/schemas/defs_comment_id"}, "is_intro": {"type": "boolean"}, "is_starred": {"type": "boolean"}, "num_stars": {"type": "integer"}, "pinned_info": {"$ref": "#/components/schemas/defs_pinned_info"}, "pinned_to": {"type": "array", "items": {"$ref": "#/components/schemas/defs_channel"}}, "reactions": {"type": "array", "items": {"$ref": "#/components/schemas/objs_reaction"}}, "timestamp": {"type": "integer"}, "user": {"$ref": "#/components/schemas/defs_user_id"}}}, "objs_comments": {"title": "file comments object", "type": "array", "items": {"type": "object"}}, "objs_conversation": {"oneOf": [{"$ref": "#/components/schemas/obj_ref_0"}, {"$ref": "#/components/schemas/obj_ref_1"}, {"$ref": "#/components/schemas/obj_ref_2"}]}, "objs_enterprise_user": {"required": ["enterprise_id", "enterprise_name", "id", "is_admin", "is_owner", "teams"], "type": "object", "properties": {"enterprise_id": {"$ref": "#/components/schemas/defs_enterprise_id"}, "enterprise_name": {"$ref": "#/components/schemas/defs_enterprise_name"}, "id": {"$ref": "#/components/schemas/defs_enterprise_user_id"}, "is_admin": {"type": "boolean"}, "is_owner": {"type": "boolean"}, "teams": {"uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}}}, "objs_external_org_migrations": {"title": "External Org Migrations", "required": ["current", "date_updated"], "type": "object", "properties": {"current": {"type": "array", "items": {"required": ["date_started", "team_id"], "type": "object", "properties": {"date_started": {"type": "integer"}, "team_id": {"type": "string"}}}}, "date_updated": {"type": "integer"}}}, "objs_file": {"title": "file object", "type": "object", "properties": {"channels": {"uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_channel_id"}}, "comments_count": {"type": "integer"}, "created": {"type": "integer"}, "date_delete": {"type": "integer"}, "display_as_bot": {"type": "boolean"}, "editable": {"type": "boolean"}, "editor": {"$ref": "#/components/schemas/defs_user_id"}, "external_id": {"type": "string"}, "external_type": {"type": "string"}, "external_url": {"type": "string"}, "filetype": {"type": "string"}, "groups": {"uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_group_id"}}, "has_rich_preview": {"type": "boolean"}, "id": {"$ref": "#/components/schemas/defs_file_id"}, "image_exif_rotation": {"type": "integer"}, "ims": {"uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_dm_id"}}, "is_external": {"type": "boolean"}, "is_public": {"type": "boolean"}, "is_starred": {"type": "boolean"}, "is_tombstoned": {"type": "boolean"}, "last_editor": {"$ref": "#/components/schemas/defs_user_id"}, "mimetype": {"type": "string"}, "mode": {"type": "string"}, "name": {"type": "string"}, "non_owner_editable": {"type": "boolean"}, "num_stars": {"type": "integer"}, "original_h": {"type": "integer"}, "original_w": {"type": "integer"}, "permalink": {"type": "string"}, "permalink_public": {"type": "string"}, "pinned_info": {"$ref": "#/components/schemas/defs_pinned_info"}, "pinned_to": {"type": "array", "items": {"$ref": "#/components/schemas/defs_channel"}}, "pretty_type": {"type": "string"}, "preview": {"type": "string"}, "public_url_shared": {"type": "boolean"}, "reactions": {"type": "array", "items": {"$ref": "#/components/schemas/objs_reaction"}}, "shares": {"type": "object", "properties": {"private": {"type": "object"}, "public": {"type": "object"}}}, "size": {"type": "integer"}, "source_team": {"$ref": "#/components/schemas/defs_team"}, "state": {"type": "string"}, "thumb_1024": {"type": "string"}, "thumb_1024_h": {"type": "integer"}, "thumb_1024_w": {"type": "integer"}, "thumb_160": {"type": "string"}, "thumb_360": {"type": "string"}, "thumb_360_h": {"type": "integer"}, "thumb_360_w": {"type": "integer"}, "thumb_480": {"type": "string"}, "thumb_480_h": {"type": "integer"}, "thumb_480_w": {"type": "integer"}, "thumb_64": {"type": "string"}, "thumb_720": {"type": "string"}, "thumb_720_h": {"type": "integer"}, "thumb_720_w": {"type": "integer"}, "thumb_80": {"type": "string"}, "thumb_800": {"type": "string"}, "thumb_800_h": {"type": "integer"}, "thumb_800_w": {"type": "integer"}, "thumb_960": {"type": "string"}, "thumb_960_h": {"type": "integer"}, "thumb_960_w": {"type": "integer"}, "thumb_tiny": {"type": "string"}, "timestamp": {"type": "integer"}, "title": {"type": "string"}, "updated": {"type": "integer"}, "url_private": {"type": "string"}, "url_private_download": {"type": "string"}, "user": {"type": "string"}, "user_team": {"$ref": "#/components/schemas/defs_team"}, "username": {"type": "string"}}}, "objs_icon": {"type": "object", "properties": {"image_102": {"type": "string"}, "image_132": {"type": "string"}, "image_230": {"type": "string"}, "image_34": {"type": "string"}, "image_44": {"type": "string"}, "image_68": {"type": "string"}, "image_88": {"type": "string"}, "image_default": {"type": "boolean"}}}, "objs_message": {"title": "Message object", "required": ["text", "ts", "type"], "type": "object", "properties": {"attachments": {"minItems": 1, "uniqueItems": true, "type": "array", "items": {"required": ["id"], "type": "object", "properties": {"fallback": {"type": "string"}, "id": {"type": "integer"}, "image_bytes": {"type": "integer"}, "image_height": {"type": "integer"}, "image_url": {"type": "string"}, "image_width": {"type": "integer"}}}}, "blocks": {"$ref": "#/components/schemas/blocks"}, "bot_id": {"$ref": "#/components/schemas/defs_bot_id"}, "bot_profile": {"$ref": "#/components/schemas/objs_bot_profile"}, "client_msg_id": {"type": "string"}, "comment": {"$ref": "#/components/schemas/objs_comment"}, "display_as_bot": {"type": "boolean"}, "file": {"$ref": "#/components/schemas/objs_file"}, "files": {"minItems": 1, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/objs_file"}}, "icons": {"type": "object", "properties": {"emoji": {"type": "string"}, "image_64": {"type": "string"}}}, "inviter": {"$ref": "#/components/schemas/defs_user_id"}, "is_delayed_message": {"type": "boolean"}, "is_intro": {"type": "boolean"}, "is_starred": {"type": "boolean"}, "last_read": {"$ref": "#/components/schemas/defs_ts"}, "latest_reply": {"$ref": "#/components/schemas/defs_ts"}, "name": {"type": "string"}, "old_name": {"type": "string"}, "parent_user_id": {"$ref": "#/components/schemas/defs_user_id"}, "permalink": {"type": "string"}, "pinned_to": {"type": "array", "items": {"$ref": "#/components/schemas/defs_channel"}}, "purpose": {"type": "string"}, "reactions": {"type": "array", "items": {"$ref": "#/components/schemas/objs_reaction"}}, "reply_count": {"type": "integer"}, "reply_users": {"minItems": 1, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_user_id"}}, "reply_users_count": {"type": "integer"}, "source_team": {"$ref": "#/components/schemas/defs_workspace_id"}, "subscribed": {"type": "boolean"}, "subtype": {"type": "string"}, "team": {"$ref": "#/components/schemas/defs_workspace_id"}, "text": {"type": "string"}, "thread_ts": {"$ref": "#/components/schemas/defs_ts"}, "topic": {"type": "string"}, "ts": {"$ref": "#/components/schemas/defs_ts"}, "type": {"type": "string"}, "unread_count": {"type": "integer"}, "upload": {"type": "boolean"}, "user": {"$ref": "#/components/schemas/defs_user_id"}, "user_profile": {"$ref": "#/components/schemas/objs_user_profile_short"}, "user_team": {"$ref": "#/components/schemas/defs_workspace_id"}, "username": {"type": "string"}}}, "objs_paging": {"title": "paging object", "required": ["page", "total"], "type": "object", "properties": {"count": {"type": "integer"}, "page": {"type": "integer"}, "pages": {"type": "integer"}, "per_page": {"type": "integer"}, "spill": {"type": "integer"}, "total": {"type": "integer"}}}, "objs_primary_owner": {"required": ["email", "id"], "type": "object", "properties": {"email": {"type": "string"}, "id": {"type": "string"}}}, "objs_reaction": {"title": "Reaction object", "required": ["count", "name", "users"], "type": "object", "properties": {"count": {"type": "integer"}, "name": {"type": "string"}, "users": {"type": "array", "items": {"$ref": "#/components/schemas/defs_user_id"}}}}, "objs_reminder": {"required": ["creator", "id", "recurring", "text", "user"], "type": "object", "properties": {"complete_ts": {"type": "integer"}, "creator": {"$ref": "#/components/schemas/defs_user_id"}, "id": {"$ref": "#/components/schemas/defs_reminder_id"}, "recurring": {"type": "boolean"}, "text": {"type": "string"}, "time": {"type": "integer"}, "user": {"$ref": "#/components/schemas/defs_user_id"}}}, "objs_resources": {"title": "resources in info from apps.permissions.info", "required": ["ids"], "type": "object", "properties": {"excluded_ids": {"type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/defs_channel"}, {"$ref": "#/components/schemas/defs_team"}]}}, "ids": {"type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/defs_channel"}, {"$ref": "#/components/schemas/defs_team"}]}}, "wildcard": {"type": "boolean"}}}, "objs_response_metadata": {"oneOf": [{"$ref": "#/components/schemas/obj_ref_3"}, {"$ref": "#/components/schemas/obj_ref_4"}, {"$ref": "#/components/schemas/obj_ref_5"}]}, "objs_scopes": {"type": "array", "items": {"title": "Named OAuth scopes", "type": "string"}}, "objs_subteam": {"title": "Subteam/Usergroup Object", "required": ["auto_provision", "auto_type", "created_by", "date_create", "date_delete", "date_update", "deleted_by", "description", "enterprise_subteam_id", "handle", "id", "is_external", "is_subteam", "is_usergroup", "name", "prefs", "team_id", "updated_by"], "type": "object", "properties": {"auto_provision": {"type": "boolean"}, "auto_type": {"$ref": "#/components/schemas/obj_ref_6"}, "channel_count": {"type": "integer"}, "created_by": {"$ref": "#/components/schemas/defs_user_id"}, "date_create": {"type": "integer"}, "date_delete": {"type": "integer"}, "date_update": {"type": "integer"}, "deleted_by": {"$ref": "#/components/schemas/defs_user_id"}, "description": {"type": "string"}, "enterprise_subteam_id": {"type": "string"}, "handle": {"type": "string"}, "id": {"$ref": "#/components/schemas/defs_subteam_id"}, "is_external": {"type": "boolean"}, "is_subteam": {"type": "boolean"}, "is_usergroup": {"type": "boolean"}, "name": {"type": "string"}, "prefs": {"required": ["channels", "groups"], "type": "object", "properties": {"channels": {"type": "array", "items": {"$ref": "#/components/schemas/defs_channel_id"}}, "groups": {"type": "array", "items": {"$ref": "#/components/schemas/defs_group_id"}}}}, "team_id": {"$ref": "#/components/schemas/defs_team"}, "updated_by": {"$ref": "#/components/schemas/defs_user_id"}, "user_count": {"type": "integer"}, "users": {"type": "array", "items": {"$ref": "#/components/schemas/defs_user_id"}}}}, "objs_team": {"title": "Team Object", "required": ["domain", "email_domain", "icon", "id", "name"], "type": "object", "properties": {"archived": {"type": "boolean"}, "avatar_base_url": {"type": "string"}, "created": {"type": "integer"}, "date_create": {"type": "integer"}, "deleted": {"type": "boolean"}, "description": {"type": "string"}, "discoverable": {"$ref": "#/components/schemas/obj_ref_7"}, "domain": {"type": "string"}, "email_domain": {"type": "string"}, "enterprise_id": {"$ref": "#/components/schemas/defs_enterprise_id"}, "enterprise_name": {"$ref": "#/components/schemas/defs_enterprise_name"}, "external_org_migrations": {"$ref": "#/components/schemas/objs_external_org_migrations"}, "has_compliance_export": {"type": "boolean"}, "icon": {"$ref": "#/components/schemas/objs_icon"}, "id": {"$ref": "#/components/schemas/defs_workspace_id"}, "is_assigned": {"type": "boolean"}, "is_enterprise": {"type": "integer"}, "is_over_storage_limit": {"type": "boolean"}, "limit_ts": {"type": "integer"}, "locale": {"type": "string"}, "messages_count": {"type": "integer"}, "msg_edit_window_mins": {"type": "integer"}, "name": {"type": "string"}, "over_integrations_limit": {"type": "boolean"}, "over_storage_limit": {"type": "boolean"}, "pay_prod_cur": {"type": "string"}, "plan": {"type": "string", "enum": ["", "std", "plus", "compliance", "enterprise"]}, "primary_owner": {"$ref": "#/components/schemas/objs_primary_owner"}, "sso_provider": {"type": "object", "properties": {"label": {"type": "string"}, "name": {"type": "string"}, "type": {"type": "string"}}}}}, "objs_team_profile_field": {"required": ["hint", "id", "label", "ordering", "type"], "type": "object", "properties": {"field_name": {"type": "string"}, "hint": {"type": "string"}, "id": {"pattern": "^X[a-zA-Z0-9]{9,}$", "type": "string"}, "is_hidden": {"type": "boolean"}, "label": {"type": "string"}, "options": {"$ref": "#/components/schemas/objs_team_profile_field_option"}, "ordering": {"type": "number"}, "possible_values": {"type": "array", "items": {"type": "string"}}, "type": {"type": "string", "enum": ["text", "date", "link", "mailto", "options_list", "user"]}}}, "objs_team_profile_field_option": {"type": "object", "properties": {"is_custom": {"type": "boolean"}, "is_multiple_entry": {"type": "boolean"}, "is_protected": {"type": "boolean"}, "is_scim": {"type": "boolean"}}}, "objs_user": {"oneOf": [{"$ref": "#/components/schemas/obj_ref_8"}, {"$ref": "#/components/schemas/obj_ref_10"}]}, "objs_user_profile": {"title": "User profile object", "required": ["avatar_hash", "display_name", "display_name_normalized", "fields", "phone", "real_name", "real_name_normalized", "skype", "status_emoji", "status_text", "title"], "type": "object", "properties": {"always_active": {"type": "boolean"}, "api_app_id": {"$ref": "#/components/schemas/defs_optional_app_id"}, "avatar_hash": {"type": "string"}, "bot_id": {"$ref": "#/components/schemas/defs_bot_id"}, "display_name": {"type": "string"}, "display_name_normalized": {"type": "string"}, "email": {"type": "string"}, "fields": {"type": "array", "items": {"type": "object", "properties": {}}}, "first_name": {"type": "string"}, "guest_expiration_ts": {"type": "integer"}, "guest_invited_by": {"type": "string"}, "image_1024": {"type": "string"}, "image_192": {"type": "string"}, "image_24": {"type": "string"}, "image_32": {"type": "string"}, "image_48": {"type": "string"}, "image_512": {"type": "string"}, "image_72": {"type": "string"}, "image_original": {"type": "string"}, "is_app_user": {"type": "boolean"}, "is_custom_image": {"type": "boolean"}, "is_restricted": {"type": "boolean"}, "is_ultra_restricted": {"type": "boolean"}, "last_avatar_image_hash": {"type": "string"}, "last_name": {"type": "string"}, "memberships_count": {"type": "integer"}, "name": {"type": "string"}, "phone": {"type": "string"}, "pronouns": {"type": "string"}, "real_name": {"type": "string"}, "real_name_normalized": {"type": "string"}, "skype": {"type": "string"}, "status_default_emoji": {"type": "string"}, "status_default_text": {"type": "string"}, "status_default_text_canonical": {"type": "string"}, "status_emoji": {"type": "string"}, "status_expiration": {"type": "integer"}, "status_text": {"type": "string"}, "status_text_canonical": {"type": "string"}, "team": {"$ref": "#/components/schemas/defs_workspace_id"}, "title": {"type": "string"}, "updated": {"type": "integer"}, "user_id": {"type": "string"}, "username": {"type": "string"}}}, "objs_user_profile_short": {"required": ["avatar_hash", "display_name", "first_name", "image_72", "is_restricted", "is_ultra_restricted", "name", "real_name", "team"], "type": "object", "properties": {"avatar_hash": {"type": "string"}, "display_name": {"type": "string"}, "display_name_normalized": {"type": "string"}, "first_name": {"type": "string"}, "image_72": {"type": "string"}, "is_restricted": {"type": "boolean"}, "is_ultra_restricted": {"type": "boolean"}, "name": {"type": "string"}, "real_name": {"type": "string"}, "real_name_normalized": {"type": "string"}, "team": {"$ref": "#/components/schemas/defs_workspace_id"}}}, "obj_ref_0": {"title": "Conversation object", "required": ["created", "creator", "id", "is_archived", "is_channel", "is_general", "is_group", "is_im", "is_mpim", "is_org_shared", "is_private", "is_shared", "name", "name_normalized", "purpose", "topic"], "type": "object", "properties": {"accepted_user": {"$ref": "#/components/schemas/defs_user_id"}, "connected_team_ids": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_workspace_id"}}, "conversation_host_id": {"$ref": "#/components/schemas/defs_workspace_id"}, "created": {"type": "integer"}, "creator": {"$ref": "#/components/schemas/defs_user_id"}, "display_counts": {"required": ["display_counts", "guest_counts"], "type": "object", "properties": {"display_counts": {"type": "integer"}, "guest_counts": {"type": "integer"}}}, "enterprise_id": {"$ref": "#/components/schemas/defs_enterprise_id"}, "has_pins": {"type": "boolean"}, "id": {"$ref": "#/components/schemas/defs_channel"}, "internal_team_ids": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}, "is_archived": {"type": "boolean"}, "is_channel": {"type": "boolean"}, "is_ext_shared": {"type": "boolean"}, "is_frozen": {"type": "boolean"}, "is_general": {"type": "boolean"}, "is_global_shared": {"type": "boolean"}, "is_group": {"type": "boolean"}, "is_im": {"type": "boolean"}, "is_member": {"type": "boolean"}, "is_moved": {"type": "integer"}, "is_mpim": {"type": "boolean"}, "is_non_threadable": {"type": "boolean"}, "is_open": {"type": "boolean"}, "is_org_default": {"type": "boolean"}, "is_org_mandatory": {"type": "boolean"}, "is_org_shared": {"type": "boolean"}, "is_pending_ext_shared": {"type": "boolean"}, "is_private": {"type": "boolean"}, "is_read_only": {"type": "boolean"}, "is_shared": {"type": "boolean"}, "is_starred": {"type": "boolean"}, "is_thread_only": {"type": "boolean"}, "last_read": {"$ref": "#/components/schemas/defs_ts"}, "latest": {"$ref": "#/components/schemas/objs_message"}, "members": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_user_id"}}, "name": {"type": "string"}, "name_normalized": {"type": "string"}, "num_members": {"type": "integer"}, "parent_conversation": {"$ref": "#/components/schemas/defs_channel"}, "pending_connected_team_ids": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}, "pending_shared": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}, "pin_count": {"type": "integer"}, "previous_names": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_channel_name"}}, "priority": {"type": "number"}, "purpose": {"required": ["creator", "last_set", "value"], "type": "object", "properties": {"creator": {"$ref": "#/components/schemas/defs_topic_purpose_creator"}, "last_set": {"type": "integer"}, "value": {"type": "string"}}}, "shared_team_ids": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}, "shares": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"required": ["is_active", "team", "user"], "type": "object", "properties": {"accepted_user": {"$ref": "#/components/schemas/defs_user_id"}, "is_active": {"type": "boolean"}, "team": {"$ref": "#/components/schemas/objs_team"}, "user": {"$ref": "#/components/schemas/defs_user_id"}}}}, "timezone_count": {"type": "integer"}, "topic": {"required": ["creator", "last_set", "value"], "type": "object", "properties": {"creator": {"$ref": "#/components/schemas/defs_topic_purpose_creator"}, "last_set": {"type": "integer"}, "value": {"type": "string"}}}, "unlinked": {"title": "Field to determine whether a channel has ever been shared/disconnected in the past", "type": "integer"}, "unread_count": {"type": "integer"}, "unread_count_display": {"type": "integer"}, "use_case": {"type": "string"}, "user": {"$ref": "#/components/schemas/defs_user_id"}, "version": {"type": "integer"}}}, "obj_ref_1": {"title": "Conversation MPIM Object", "required": ["created", "creator", "id", "is_archived", "is_channel", "is_general", "is_group", "is_im", "is_mpim", "is_org_shared", "is_private", "is_shared", "name", "name_normalized", "purpose", "topic"], "type": "object", "properties": {"accepted_user": {"$ref": "#/components/schemas/defs_user_id"}, "connected_team_ids": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}, "conversation_host_id": {"$ref": "#/components/schemas/defs_workspace_id"}, "created": {"type": "integer"}, "creator": {"$ref": "#/components/schemas/defs_user_id"}, "display_counts": {"required": ["display_counts", "guest_counts"], "type": "object", "properties": {"display_counts": {"type": "integer"}, "guest_counts": {"type": "integer"}}}, "id": {"$ref": "#/components/schemas/defs_channel"}, "internal_team_ids": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}, "is_archived": {"type": "boolean"}, "is_channel": {"type": "boolean"}, "is_ext_shared": {"type": "boolean"}, "is_frozen": {"type": "boolean"}, "is_general": {"type": "boolean"}, "is_group": {"type": "boolean"}, "is_im": {"type": "boolean"}, "is_member": {"type": "boolean"}, "is_moved": {"type": "integer"}, "is_mpim": {"type": "boolean"}, "is_non_threadable": {"type": "boolean"}, "is_open": {"type": "boolean"}, "is_org_shared": {"type": "boolean"}, "is_pending_ext_shared": {"type": "boolean"}, "is_private": {"type": "boolean"}, "is_read_only": {"type": "boolean"}, "is_shared": {"type": "boolean"}, "is_starred": {"type": "boolean"}, "is_thread_only": {"type": "boolean"}, "last_read": {"$ref": "#/components/schemas/defs_ts"}, "latest": {"$ref": "#/components/schemas/objs_message"}, "members": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_user_id"}}, "name": {"type": "string"}, "name_normalized": {"type": "string"}, "num_members": {"type": "integer"}, "parent_conversation": {"$ref": "#/components/schemas/defs_channel"}, "pending_connected_team_ids": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}, "pending_shared": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}, "pin_count": {"type": "integer"}, "previous_names": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_channel_name"}}, "priority": {"type": "number"}, "purpose": {"required": ["creator", "last_set", "value"], "type": "object", "properties": {"creator": {"$ref": "#/components/schemas/defs_topic_purpose_creator"}, "last_set": {"type": "integer"}, "value": {"type": "string"}}}, "shared_team_ids": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_team"}}, "shares": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"required": ["is_active", "team", "user"], "type": "object", "properties": {"accepted_user": {"$ref": "#/components/schemas/defs_user_id"}, "is_active": {"type": "boolean"}, "team": {"$ref": "#/components/schemas/objs_team"}, "user": {"$ref": "#/components/schemas/defs_user_id"}}}}, "timezone_count": {"type": "integer"}, "topic": {"required": ["creator", "last_set", "value"], "type": "object", "properties": {"creator": {"$ref": "#/components/schemas/defs_topic_purpose_creator"}, "last_set": {"type": "integer"}, "value": {"type": "string"}}}, "unlinked": {"title": "Field to determine whether a channel has ever been shared/disconnected in the past", "type": "integer"}, "unread_count": {"type": "integer"}, "unread_count_display": {"type": "integer"}, "user": {"$ref": "#/components/schemas/defs_user_id"}, "version": {"type": "integer"}}}, "obj_ref_2": {"title": "Conversation IM Channel Object from conversations.* methods", "required": ["created", "id", "is_im", "is_org_shared", "priority", "user"], "type": "object", "properties": {"created": {"type": "integer"}, "has_pins": {"type": "boolean"}, "id": {"$ref": "#/components/schemas/defs_dm_id"}, "is_archived": {"type": "boolean"}, "is_ext_shared": {"type": "boolean"}, "is_frozen": {"type": "boolean"}, "is_im": {"type": "boolean"}, "is_open": {"type": "boolean"}, "is_org_shared": {"type": "boolean"}, "is_shared": {"type": "boolean"}, "is_starred": {"type": "boolean"}, "is_user_deleted": {"type": "boolean"}, "last_read": {"$ref": "#/components/schemas/defs_ts"}, "latest": {"$ref": "#/components/schemas/objs_message"}, "parent_conversation": {"$ref": "#/components/schemas/defs_channel"}, "pin_count": {"type": "integer"}, "priority": {"type": "number"}, "shares": {"minItems": 0, "uniqueItems": true, "type": "array", "items": {"required": ["date_create", "id", "is_active", "name", "team"], "type": "object", "properties": {"date_create": {"type": "integer"}, "id": {"$ref": "#/components/schemas/defs_team"}, "is_active": {"type": "boolean"}, "name": {"type": "string"}, "team": {"$ref": "#/components/schemas/objs_team"}}}}, "unread_count": {"type": "integer"}, "unread_count_display": {"type": "integer"}, "user": {"$ref": "#/components/schemas/defs_user_id"}, "version": {"type": "integer"}}}, "obj_ref_3": {"title": "new paging style", "required": ["next_cursor"], "type": "object", "properties": {"next_cursor": {"type": "string"}}}, "obj_ref_4": {"title": "deprecation_warning", "required": ["messages", "warnings"], "type": "object", "properties": {"messages": {"type": "array", "items": {"type": "string"}}, "warnings": {"type": "array", "items": {"type": "string", "enum": ["method_deprecated"]}}}}, "obj_ref_5": {"title": "deprecation_warning and paging style together", "required": ["messages", "next_cursor", "warnings"], "type": "object", "properties": {"messages": {"type": "array", "items": {"type": "string"}}, "next_cursor": {"type": "string"}, "warnings": {"type": "array", "items": {"type": "string", "enum": ["method_deprecated"]}}}}, "obj_ref_6": {"type": "string", "enum": ["owner", "admin"]}, "obj_ref_7": {"type": "string"}, "obj_ref_9": {"type": "string"}, "obj_ref_8": {"required": ["id", "is_app_user", "is_bot", "name", "profile", "updated"], "type": "object", "properties": {"color": {"pattern": "^[a-fA-F0-9]{6}$", "type": "string"}, "deleted": {"type": "boolean"}, "enterprise_user": {"$ref": "#/components/schemas/objs_enterprise_user"}, "has_2fa": {"type": "boolean"}, "id": {"$ref": "#/components/schemas/defs_user_id"}, "is_admin": {"type": "boolean"}, "is_app_user": {"type": "boolean"}, "is_bot": {"type": "boolean"}, "is_external": {"type": "boolean"}, "is_forgotten": {"type": "boolean"}, "is_invited_user": {"type": "boolean"}, "is_owner": {"type": "boolean"}, "is_primary_owner": {"type": "boolean"}, "is_restricted": {"type": "boolean"}, "is_stranger": {"type": "boolean"}, "is_ultra_restricted": {"type": "boolean"}, "locale": {"type": "string"}, "name": {"type": "string"}, "presence": {"type": "string"}, "profile": {"$ref": "#/components/schemas/objs_user_profile"}, "real_name": {"type": "string"}, "team": {"$ref": "#/components/schemas/defs_workspace_id"}, "team_id": {"$ref": "#/components/schemas/defs_workspace_id"}, "team_profile": {"required": ["fields"], "type": "object", "properties": {"fields": {"minItems": 1, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/objs_team_profile_field"}}}}, "two_factor_type": {"type": "string"}, "tz": {"$ref": "#/components/schemas/obj_ref_9"}, "tz_label": {"type": "string"}, "tz_offset": {"type": "number"}, "updated": {"type": "number"}}, "description": "user object for non enterprise type"}, "obj_ref_11": {"type": "string"}, "obj_ref_10": {"required": ["id", "is_app_user", "is_bot", "name", "profile", "updated"], "type": "object", "properties": {"color": {"pattern": "^([a-fA-F0-9]{6})?$", "type": "string", "description": "refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559"}, "deleted": {"type": "boolean"}, "enterprise_user": {"$ref": "#/components/schemas/objs_enterprise_user"}, "has_2fa": {"type": "boolean"}, "id": {"$ref": "#/components/schemas/defs_user_id"}, "is_admin": {"type": "boolean"}, "is_app_user": {"type": "boolean"}, "is_bot": {"type": "boolean"}, "is_external": {"type": "boolean"}, "is_forgotten": {"type": "boolean"}, "is_owner": {"type": "boolean"}, "is_primary_owner": {"type": "boolean"}, "is_restricted": {"type": "boolean"}, "is_stranger": {"type": "boolean"}, "is_ultra_restricted": {"type": "boolean"}, "locale": {"type": "string"}, "name": {"type": "string"}, "presence": {"type": "string"}, "profile": {"$ref": "#/components/schemas/objs_user_profile"}, "real_name": {"type": "string"}, "team_id": {"$ref": "#/components/schemas/defs_workspace_id"}, "team_profile": {"required": ["fields"], "type": "object", "properties": {"fields": {"minItems": 1, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/objs_team_profile_field"}}}}, "teams": {"minItems": 1, "uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_workspace_id"}}, "two_factor_type": {"type": "string"}, "tz": {"$ref": "#/components/schemas/obj_ref_11"}, "tz_label": {"type": "string"}, "tz_offset": {"type": "number"}, "updated": {"type": "number"}}, "description": "enterprise user"}, "obj_ref_12": {"type": "integer"}, "obj_ref_13": {"required": ["id"], "type": "object", "properties": {"created": {"type": "string"}, "id": {"$ref": "#/components/schemas/defs_dm_id"}, "is_im": {"type": "boolean"}, "is_open": {"type": "boolean"}, "last_read": {"$ref": "#/components/schemas/defs_ts"}, "latest": {"$ref": "#/components/schemas/objs_message"}, "unread_count": {"type": "number"}, "unread_count_display": {"type": "number"}, "user": {"$ref": "#/components/schemas/defs_user_id"}}}, "obj_ref_14": {"required": ["reply_count", "subscribed", "text", "thread_ts", "ts", "type", "user"], "type": "object", "properties": {"last_read": {"$ref": "#/components/schemas/defs_ts"}, "latest_reply": {"$ref": "#/components/schemas/defs_ts"}, "reply_count": {"type": "integer"}, "reply_users": {"uniqueItems": true, "type": "array", "items": {"$ref": "#/components/schemas/defs_user_id"}}, "reply_users_count": {"type": "integer"}, "source_team": {"$ref": "#/components/schemas/defs_team"}, "subscribed": {"type": "boolean"}, "team": {"$ref": "#/components/schemas/defs_team"}, "text": {"type": "string"}, "thread_ts": {"$ref": "#/components/schemas/defs_ts"}, "ts": {"$ref": "#/components/schemas/defs_ts"}, "type": {"type": "string"}, "unread_count": {"type": "integer"}, "user": {"$ref": "#/components/schemas/defs_user_id"}, "user_profile": {"$ref": "#/components/schemas/objs_user_profile_short"}, "user_team": {"$ref": "#/components/schemas/defs_team"}}}, "obj_ref_15": {"required": ["parent_user_id", "text", "thread_ts", "ts", "type", "user"], "type": "object", "properties": {"is_starred": {"type": "boolean"}, "parent_user_id": {"$ref": "#/components/schemas/defs_user_id"}, "source_team": {"$ref": "#/components/schemas/defs_team"}, "team": {"$ref": "#/components/schemas/defs_team"}, "text": {"type": "string"}, "thread_ts": {"$ref": "#/components/schemas/defs_ts"}, "ts": {"$ref": "#/components/schemas/defs_ts"}, "type": {"type": "string"}, "user": {"$ref": "#/components/schemas/defs_user_id"}, "user_profile": {"$ref": "#/components/schemas/objs_user_profile_short"}, "user_team": {"$ref": "#/components/schemas/defs_team"}}}, "obj_ref_17": {"title": "File Pin", "type": "object", "properties": {"created": {"type": "integer"}, "created_by": {"$ref": "#/components/schemas/defs_user_id"}, "file": {"$ref": "#/components/schemas/objs_file"}, "type": {"type": "string", "enum": ["file"]}}}, "obj_ref_18": {"title": "Message Pin", "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_channel"}, "created": {"type": "integer"}, "created_by": {"$ref": "#/components/schemas/defs_user_id"}, "message": {"$ref": "#/components/schemas/objs_message"}, "type": {"type": "string", "enum": ["message"]}}}, "obj_ref_16": {"required": ["items", "ok"], "type": "object", "properties": {"items": {"uniqueItems": true, "type": "array", "items": {"oneOf": [{"$ref": "#/components/schemas/obj_ref_17"}, {"$ref": "#/components/schemas/obj_ref_18"}]}}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}}, "obj_ref_19": {"required": ["count", "ok"], "type": "object", "properties": {"count": {"type": "integer"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}}}, "obj_ref_20": {"required": ["channel", "message", "ok", "type"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_channel"}, "message": {"$ref": "#/components/schemas/objs_message"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "type": {"type": "string", "enum": ["message"]}}}, "obj_ref_21": {"required": ["file", "ok", "type"], "type": "object", "properties": {"file": {"$ref": "#/components/schemas/objs_file"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "type": {"type": "string", "enum": ["file"]}}}, "obj_ref_22": {"required": ["comment", "file", "ok", "type"], "type": "object", "properties": {"comment": {"$ref": "#/components/schemas/objs_comment"}, "file": {"$ref": "#/components/schemas/objs_file"}, "ok": {"$ref": "#/components/schemas/defs_ok_true"}, "type": {"type": "string", "enum": ["file_comment"]}}}, "obj_ref_23": {"required": ["channel", "message", "type"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_channel"}, "message": {"$ref": "#/components/schemas/objs_message"}, "type": {"type": "string", "enum": ["message"]}}}, "obj_ref_24": {"required": ["file", "type"], "type": "object", "properties": {"file": {"$ref": "#/components/schemas/objs_file"}, "type": {"type": "string", "enum": ["file"]}}}, "obj_ref_25": {"required": ["comment", "file", "type"], "type": "object", "properties": {"comment": {"$ref": "#/components/schemas/objs_comment"}, "file": {"$ref": "#/components/schemas/objs_file"}, "type": {"type": "string", "enum": ["file_comment"]}}}, "obj_ref_26": {"required": ["channel", "date_create", "message", "type"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_channel"}, "date_create": {"type": "integer"}, "message": {"$ref": "#/components/schemas/objs_message"}, "type": {"type": "string", "enum": ["message"]}}}, "obj_ref_27": {"required": ["date_create", "file", "type"], "type": "object", "properties": {"date_create": {"type": "integer"}, "file": {"$ref": "#/components/schemas/objs_file"}, "type": {"type": "string", "enum": ["file"]}}}, "obj_ref_28": {"required": ["comment", "date_create", "file", "type"], "type": "object", "properties": {"comment": {"$ref": "#/components/schemas/objs_comment"}, "date_create": {"type": "integer"}, "file": {"$ref": "#/components/schemas/objs_file"}, "type": {"type": "string", "enum": ["file_comment"]}}}, "obj_ref_29": {"required": ["channel", "date_create", "type"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_channel"}, "date_create": {"type": "integer"}, "type": {"type": "string", "enum": ["channel"]}}}, "obj_ref_30": {"required": ["channel", "date_create", "type"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_dm_id"}, "date_create": {"type": "integer"}, "type": {"type": "string", "enum": ["im"]}}}, "obj_ref_31": {"required": ["channel", "date_create", "type"], "type": "object", "properties": {"channel": {"$ref": "#/components/schemas/defs_group_id"}, "date_create": {"type": "integer"}, "type": {"type": "string", "enum": ["group"]}}}, "obj_ref_32": {"required": ["ok", "team", "user"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "team": {"required": ["id"], "type": "object", "properties": {"id": {"$ref": "#/components/schemas/defs_team"}}}, "user": {"required": ["id", "name"], "type": "object", "properties": {"id": {"$ref": "#/components/schemas/defs_user_id"}, "name": {"type": "string"}}}}, "description": "Schema for 'identity.basic' scope"}, "obj_ref_33": {"required": ["ok", "team", "user"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "team": {"required": ["id"], "type": "object", "properties": {"id": {"$ref": "#/components/schemas/defs_team"}}}, "user": {"required": ["email", "id", "name"], "type": "object", "properties": {"email": {"type": "string"}, "id": {"$ref": "#/components/schemas/defs_user_id"}, "name": {"type": "string"}}}}, "description": "Schema for 'identity.basic,identity.email' scopes"}, "obj_ref_34": {"required": ["ok", "team", "user"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "team": {"required": ["id"], "type": "object", "properties": {"id": {"$ref": "#/components/schemas/defs_team"}}}, "user": {"required": ["id", "image_192", "image_24", "image_32", "image_48", "image_512", "image_72", "name"], "type": "object", "properties": {"id": {"$ref": "#/components/schemas/defs_user_id"}, "image_192": {"type": "string", "format": "url"}, "image_24": {"type": "string", "format": "url"}, "image_32": {"type": "string", "format": "url"}, "image_48": {"type": "string", "format": "url"}, "image_512": {"type": "string", "format": "url"}, "image_72": {"type": "string", "format": "url"}, "name": {"type": "string"}}}}, "description": "Schema for 'identity.basic,identity.avatar' scopes"}, "obj_ref_35": {"required": ["ok", "team", "user"], "type": "object", "properties": {"ok": {"$ref": "#/components/schemas/defs_ok_true"}, "team": {"required": ["domain", "id", "image_102", "image_132", "image_230", "image_34", "image_44", "image_68", "image_88", "image_default", "name"], "type": "object", "properties": {"domain": {"type": "string"}, "id": {"$ref": "#/components/schemas/defs_team"}, "image_102": {"type": "string", "format": "url"}, "image_132": {"type": "string", "format": "url"}, "image_230": {"type": "string", "format": "url"}, "image_34": {"type": "string", "format": "url"}, "image_44": {"type": "string", "format": "url"}, "image_68": {"type": "string", "format": "url"}, "image_88": {"type": "string", "format": "url"}, "image_default": {"type": "boolean"}, "name": {"type": "string"}}}, "user": {"required": ["id", "name"], "type": "object", "properties": {"id": {"$ref": "#/components/schemas/defs_user_id"}, "name": {"type": "string"}}}}, "description": "Schema for 'identity.basic,identity.team' scopes"}}, "securitySchemes": {"slackAuth": {"type": "oauth2", "flows": {"authorizationCode": {"authorizationUrl": "https://slack.com/oauth/authorize", "tokenUrl": "https://slack.com/api/oauth.access", "scopes": {"admin": "admin", "admin.apps:read": "admin.apps:read", "admin.apps:write": "admin.apps:write", "admin.conversations:read": "admin.conversations:read", "admin.conversations:write": "admin.conversations:write", "admin.invites:read": "admin.invites:read", "admin.invites:write": "admin.invites:write", "admin.teams:read": "admin.teams:read", "admin.teams:write": "admin.teams:write", "admin.usergroups:read": "admin.usergroups:read", "admin.usergroups:write": "admin.usergroups:write", "admin.users:read": "admin.users:read", "admin.users:write": "admin.users:write", "authorizations:read": "authorizations:read", "bot": "Bot user scope", "calls:read": "calls:read", "calls:write": "calls:write", "channels:history": "channels:history", "channels:manage": "channels:manage", "channels:read": "channels:read", "channels:write": "channels:write", "chat:write": "chat:write", "chat:write:bot": "Author messages as a bot", "chat:write:user": "Author messages as a user", "conversations:history": "conversations:history", "conversations:read": "conversations:read", "conversations:write": "conversations:write", "dnd:read": "dnd:read", "dnd:write": "dnd:write", "emoji:read": "emoji:read", "files:read": "files:read", "files:write:user": "files:write:user", "groups:history": "groups:history", "groups:read": "groups:read", "groups:write": "groups:write", "identity.basic": "identity.basic", "im:history": "im:history", "im:read": "im:read", "im:write": "im:write", "links:write": "links:write", "mpim:history": "mpim:history", "mpim:read": "mpim:read", "mpim:write": "mpim:write", "none": "No scope required", "pins:read": "pins:read", "pins:write": "pins:write", "reactions:read": "reactions:read", "reactions:write": "reactions:write", "reminders:read": "reminders:read", "reminders:write": "reminders:write", "remote_files:read": "remote_files:read", "remote_files:share": "remote_files:share", "remote_files:write": "remote_files:write", "rtm:stream": "rtm:stream", "search:read": "search:read", "stars:read": "stars:read", "stars:write": "stars:write", "team:read": "team:read", "tokens.basic": "tokens.basic", "usergroups:read": "usergroups:read", "usergroups:write": "usergroups:write", "users.profile:read": "users.profile:read", "users.profile:write": "users.profile:write", "users:read": "users:read", "users:read.email": "users:read.email", "users:write": "users:write", "workflow.steps:execute": "workflow.steps:execute"}}}}}}}