{
    "config": "configs/square_config.json",
    "benchmarks": [
        {
            "name": "3.1",
            "desc": "List invoices that match location id",
            "landmarks": [],
            "input_args": {
                "location_id": "Location.id"
            },
            "output": "[Invoice]",
            "solutions": [[
                "\\location_id -> {",
                    "let x0 = /v2/invoices_GET(location_id=location_id)",
                    "x1 <- x0.invoices",
                    "if x1.location_id = location_id",
                    "return x1",
                    "}"
            ]],
            "max_length": 8
        },
        {
            "name": "3.2",
            "desc": "Find subscription from location, customer, and plan id",
            "landmarks": [],
            "input_args": {
                "customer_id": "Customer.id",
                "location_id": "Location.id",
                "subscription_plan_id": "CatalogObject.id"
            },
            "output": "[Subscription]",
            "solutions": [[
                "\\customer_id location_id subscription_plan_id -> {",
                    "let x0 = /v2/subscriptions/search_POST()",
                    "x1 <- x0.subscriptions",
                    "if x1.customer_id = customer_id",
                    "if x1.customer_id = customer_id",
                    "if x1.plan_id = subscription_plan_id",
                    "if x1.location_id = location_id",
                    "return x1",
                "}"
            ]],
            "max_length": 12
        },
        {
            "name": "3.3",
            "desc": "Get all items tax applies to",
            "note": "Can't do because catalogobject is an overloaded type in the square api",
            "landmarks": [],
            "input_args": {
                "tax_id": "CatalogObject.id"
            },
            "output": "[CatalogObject]",
            "solutions": [[
                "\\tax_id -> {",
                    "let x0 = /v2/catalog/batch-retrieve_POST()",
                    "x1 <- x0",
                    "if x1.tax_id = tax_id",
                    "}"
            ]],
            "max_length": 8
        },
        {
            "name": "3.4",
            "desc": "List discounts in catalog",
            "landmarks": [],
            "input_args": {
            },
            "output": "[CatalogDiscount.name]",
            "solutions": [[
                "\\ => {",
                    "let x0 = /v2/catalog/batch-retrieve_POST()",
                    "x1 <- x0",
                    "return x1.discount_type",
                    "}"
            ]],
            "max_length": 8
        },
        {
            "name": "3.5",
            "desc": "Delete catalog items with [names]",
            "landmarks": [],
            "input_args": {
                "item_type": "CatalogObject.type",
                "names": "CatalogDiscount.name"
            },
            "output": "unknown_obj.deleted_object_ids",
            "solutions": [[
                "\\item_type, names => {",
                    "let x0 = names.map(name => {",
                        "let x1 = /v2/catalog/search-catalog-items_POST({",
                            "object_types: [item_type],",
                            "query: {",
                                "exact_query: {",
                                    "attribute_name: \"name\",",
                                    "attribute_value: name",
                                    "}",
                                    "}",
                                    "})",
                                    "x2 <- x1",
                                    "./v2/catalog/batch-delete({",
                                        "object_ids: x2.id",
                                        "})",
                                        "return x1",
                                        "})",
                                        "return x0",
                                        "}"
            ]],
            "max_length": 10
        },
        {
            "name": "3.6",
            "desc": "Delete all catalog items",
            "landmarks": [],
            "input_args": {
            },
            "output": "unknown_obj.deleted_object_ids",
            "solutions": [[
                "\\ -> {",
                    "let x0 = /v2/catalog/batch-retrieve_POST()",
                    "x1 <- x0",
                    "/v2/catalog/batch-delete_POST(object_ids = x1)",
                    "}"
            ]],
            "max_length": 6
        },
        {
            "name": "3.7",
            "desc": "Add order details to order",
            "landmarks": [],
            "input_args": {
                "location_id": "Location.id",
                "order_ids": "OrderLineItem.uid",
                "updates": "OrderLineItem"
            },
            "output": "[OrderLineItem]",
            "solutions": [[
                "\\location_id, order_id, updates => {",
                    "let x0 = /v2/orders/batch-retrieve_POST(location_id = location_id, order_ids: order_id)",
                    "x1 <- x0",
                        "let x2 = /v2/orders_POST(order_id = x1, order = update)",
                    "return x2",
                "}"
            ]],
            "max_length": 8
        },
        {
            "name": "3.8",
            "desc": "Get payment notes",
            "landmarks": [],
            "input_args": {
            },
            "output": "[Tender.note]",
            "solutions": [[
                "\\ -> {",
                    "let x0 = /v2/payments_GET()",
                    "x1 <- x0.payments",
                    "return x1.note",
                    "}"
            ]],
            "max_length": 8
        },
        {
            "name": "3.9",
            "desc": "Get payment notes",
            "landmarks": [],
            "input_args": {
                "location_id": "Location.id"
            },
            "output": "[Transaction.order_id]",
            "solutions": [[
                "\\location_id -> {",
                    "let x0 = /v2/locations/{location_id}/transactions_GET(location_id=location_id)",
                    "x1 <- x0.transactions",
                    "return x1.order_id",
                    "}"
            ]],
            "max_length": 8
        },
        {
            "name": "3.10",
            "desc": "Get product details (names of orders) from transaction id",
            "landmarks": [],
            "input_args": {
                "location_id": "Location.id",
                "transaction_id": "Transaction.id"
            },
            "output": "[DeviceCode.name]",
            "solutions": [[
                "\\location_id, transaction_id => {",
                    "let x0 = /v2/orders/batch-retrieve_POST(locationId = location_id, orderIds = [transaction_id])",
                    "x1 <- x0",
                    "x2 <- x1.line_items",
                    "return item.name",
                    "}"
            ]],
            "max_length": 10
        },
        {
            "name": "3.11",
            "desc": "Search customers by name",
            "landmarks": [],
            "input_args": {
                "name": "Customer.given_name"
            },
            "output": "Customer",
            "solutions": [[
                "\\name -> {",
                    "let x0 = /v2/customers_GET()",
                    "x1 <- x0.customers",
                    "if x1.given_name = name",
                    "return x1",
                    "}"
            ]],
            "max_length": 10
        }

    ]
}
