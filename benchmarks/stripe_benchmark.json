{
  "config": "configs/stripe_config.json",
  "benchmarks": [
    {
      "name": "2.1",
      "desc": "Make a subscription to a product for a customer",
      "landmarks": [],
      "input_args": {
        "customer_id": "customer.id",
        "product_id": "product.id"
      },
      "output": "subscription",
      "solutions": [[
        "\\customer_id product_id => {",
          "let x1 = /v1/prices_GET(product=product_id);",
          "x2 <- x1.data",
          "let x3 = /v1/subscriptions_POST(customer=customer_id, items[0].price=x2.id)",
          "return x3",
          "}"
      ]]
    },
    {
      "name": "2.2",
      "desc": "Charge a saved card given customer id",
      "landmarks": [],
      "input_args": {
        "customer_id": "customer.id",
        "cut": "fee.currency",
        "amt": "price.unit_amount"
      },
      "output": "payment_intent",
      "solutions": [[
        "\\customer_id cur amt => {",
          "let x1 = /v1/payment_methods_GET(customer=customer_id, type=card)",
          "let x2 = /v1/payment_intents_POST(customer=customer_id, payment_method=x1.id, currency=cur, amount=amt)",
          "let x3 = /v1/payment_intents/{pi}/confirm_POST(pi=x2.id, setup_future_usage=off_session)",
          "return x3",
          "}"
      ]]
    },
    {
      "name": "2.3",
      "desc": "Subscribe to multiple items",
      "landmarks": [],
      "input_args": {
        "customer_id": "customer.id",
        "product_id": "product.id"
      },
      "output": "[subscription]",
      "solutions": [[
        "\\customer_id product_ids => {",
          "x0 <- product_ids",
          "let x1 = /v1/prices_GET(product=x0)",
            "let x2 = x1.data.map((x3) => {",
              "let x4 = /v1/subscriptions_POST(customer=customer_id, items[0].price=x3.id)",
              "return x4",
              "})",
              "return x2",
              "}",
              "return x0",
              "}"
      ]]
    },
    {
      "name": "2.4",
      "desc": "Create a product and invoice a customer",
      "landmarks": [],
      "input_args": {
        "product_name": "product.name",
        "customer_id": "customer.id",
        "currency": "fee.currency",
        "unit_amount": "/v1/prices:unit_amount:POST"
      },
      "output": "invoiceitem",
      "solutions": [[
        "\\product_name customer_id currency unit_amount -> {",
          "let x0 = /v1/products_POST(name=product_name)",
          "let x1 = /v1/prices_POST(currency=currency, product=x0.id, unit_amount=unit_amount)",
          "let x2 = /v1/invoiceitems_POST(customer=customer_id, price=x1.id)",
          "return x2",
          "}"
      ]]
    },
    {
      "name": "2.5",
      "desc": "sending invoice",
      "landmarks": [],
      "input_args": {
        "customer_id": "customer.id",
        "price_id": "plan.id"
      },
      "output": "invoice",
      "solutions": [[
        "\\customer_id price_id => {",
          "let x1 = /v1/invoiceitems_POST(customer=customer_id, price=price_id);",
          "let x2 = /v1/invoices_POST(customer=x1.customer);",
          "let x3 = /v1/invoices/{invoice}/send_POST(invoice=x2.id);",
          "return x3;",
          "}"
      ]]
    },
    {
      "name": "2.6",
      "desc": "Retrieve customer by email",
      "landmarks": [],
      "input_args": {
        "customer_email": "customer.email"
      },
      "output": "customer",
      "solutions": [[
        "\\customer_email -> {",
          "let x0 = /v1/customers_GET()",
          "x1 <- x0.data",
          "if x1.email = customer_email",
          "return x1",
        "}"
      ]]
    },
    {
      "name": "2.7",
      "desc": "Get a list of receipts for a customer",
      "landmarks": [],
      "input_args": {
        "customer_id": "customer.id"
      },
      "output": "[charge]",
      "solutions": [[
        "\\customer_id -> {",
          "let x1 = /v1/invoices_GET(customer=customer_id)",
          "x2 <- x1.data",
          "let x3 = /v1/charges/{charge}_GET(charge=x2.charge)",
          "return x3",
        "}"
      ]]
    },
    {
      "name": "2.8",
      "desc": "Get refund for given subscription",
      "landmarks": [],
      "input_args": {
        "subscription_id": "subscription.id"
      },
      "output": "refund",
      "solutions": [[
        "\\subscription_id -> {",
          "let x0 = /v1/subscriptions/{subscription_exposed_id}_POST(subscription_exposed_id=subscription_id)",
          "let x1 = /v1/invoices_GET(customer=x0.customer)",
          "x2 <- x1.data",
          "let x3 = /v1/refunds/{refund}_GET(refund=x2.charge)",
          "return x3",
          "}"
      ]]
    },
    {
      "name": "2.9",
      "desc": "Get email of all customers",
      "landmarks": [],
      "input_args": {
      },
      "output": "[customer.email]",
      "solutions": [[
        "\\ -> {",
          "let x0 = /v1/customers_GET()",
          "x1 <- x0.data",
          "return x1.email",
          "}"
      ]]
    },
    {
      "name": "2.10",
      "desc": "Get email of subscribers to some product",
      "landmarks": [],
      "input_args": {
        "product_id": "product.id"
      },
      "output": "[customer.email]",
      "solutions": [[
        "\\product_id => {",
          "let x1 = /v1/subscriptions_GET()",
          "x2 <- x1",
          "if x2.items.product = product_id",
          "let x3 = /v1/customers/{customer}_GET(customer=x2.customer_id)",
          "return x3",
          "}"
      ]]
    },
    {
      "name": "2.11",
      "desc": "Get last 4 digit of card for a customer",
      "landmarks": [],
      "input_args": {
        "customer_id": "customer.id"
      },
      "output": "payment_source.last4",
      "solutions": [[
        "\\customer_id -> {",
          "let x0 = /v1/customers/{customer}/sources_GET(customer=customer_id)",
          "x1 <- x0.data",
          "return x1.last4",
          "}"
      ]]
    },
    {
      "name": "2.12",
      "desc": "Delete a card for a customer",
      "landmarks": [],
      "input_args": {
        "payment_method": "payment_method"
      },
      "output": "payment_source",
      "solutions": [[
        "\\customer_id => {",
          "let x1 = /v1/customers/{customer}_GET(customer=customer_id)",
          "let x2 = customer.default_source",
          "let x3 = /v1/customers/{customer}/sources/{source}_DELETE(customer=customer_id, source=x2)",
          "return x3",
          "}"
      ]]
    },
    {
      "name": "2.13",
      "desc": "Update payment methods of a customer for all subscriptions",
      "landmarks": [],
      "input_args": {
        "payment_method": "payment_method",
        "customer_id": "customer.id"
      },
      "output": "[subscription]",
      "solutions": [[
        "(payment, customer_id) => {",
          "let x1 = /v1/subscriptions_GET(customer=customer_id)",
          "x2 <- x1.map(",
            "let x3 = /v1/subscriptions/{subscription}_POST(subscription=x2.id, default_payment_method=payment);",
            "return x3",
            "}"
      ]]
    }
  ]
}
