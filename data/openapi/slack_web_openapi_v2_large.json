{
    "basePath": "/api",
    "definitions": {
        "blocks": {
            "description": "This is a very loose definition, in the future, we'll populate this with deeper schema in this definition namespace.",
            "items": {
                "additionalProperties": true,
                "properties": {
                    "type": {
                        "type": "string"
                    }
                },
                "required": [
                    "type"
                ],
                "type": "object"
            },
            "title": "Block Kit blocks",
            "type": "array"
        },
        "defs_app_id": {
            "pattern": "^A[A-Z0-9]{1,}$",
            "title": "App ID",
            "type": "string"
        },
        "defs_bot_id": {
            "pattern": "^B[A-Z0-9]{8,}$",
            "title": "Bot User ID",
            "type": "string"
        },
        "defs_channel": {
            "pattern": "^[CGD][A-Z0-9]{8,}$",
            "title": "Channel-like conversation ID",
            "type": "string"
        },
        "defs_channel_id": {
            "pattern": "^[C][A-Z0-9]{2,}$",
            "title": "Channel ID",
            "type": "string"
        },
        "defs_channel_name": {
            "title": "Name of a channel",
            "type": "string"
        },
        "defs_comment_id": {
            "pattern": "^Fc[A-Z0-9]{8,}$",
            "title": "File Comment ID",
            "type": "string"
        },
        "defs_dm_id": {
            "pattern": "^[D][A-Z0-9]{8,}$",
            "title": "Direct Message Channel ID",
            "type": "string"
        },
        "defs_enterprise_id": {
            "pattern": "^[E][A-Z0-9]{8,}$",
            "title": "Enterprise ID",
            "type": "string"
        },
        "defs_enterprise_name": {
            "title": "Name of the enterprise org",
            "type": "string"
        },
        "defs_enterprise_user_id": {
            "pattern": "^[WU][A-Z0-9]{8,}$",
            "title": "Enterprise User ID",
            "type": "string"
        },
        "defs_file_id": {
            "pattern": "^[F][A-Z0-9]{8,}$",
            "title": "File ID",
            "type": "string"
        },
        "defs_group_id": {
            "pattern": "^[G][A-Z0-9]{8,}$",
            "title": "Private Channel ID",
            "type": "string"
        },
        "defs_ok_false": {
            "enum": [
                false
            ],
            "title": "default failure response",
            "type": "boolean"
        },
        "defs_ok_true": {
            "enum": [
                true
            ],
            "title": "default success response",
            "type": "boolean"
        },
        "defs_optional_app_id": {
            "pattern": "^(A[A-Z0-9]{1,})?$",
            "title": "App ID or empty string",
            "type": "string"
        },
        "defs_pinned_info": {
            "additionalProperties": false,
            "title": "Info for a pinned item",
            "type": "object"
        },
        "defs_reminder_id": {
            "pattern": "^Rm[A-Z0-9]{8,}$",
            "title": "Reminder ID",
            "type": "string"
        },
        "defs_subteam_id": {
            "pattern": "^S[A-Z0-9]{2,}$",
            "title": "Subteam ID",
            "type": "string"
        },
        "defs_team": {
            "pattern": "^[T][A-Z0-9]{2,}$",
            "title": "Team ID",
            "type": "string"
        },
        "defs_topic_purpose_creator": {
            "pattern": "^[UW][A-Z0-9]{8,}$|^$",
            "title": "User ID or empty string, used for topic and purpose creation",
            "type": "string"
        },
        "defs_ts": {
            "pattern": "^\\d{10}\\.\\d{6}$",
            "title": "Timestamp in format 0123456789.012345",
            "type": "string"
        },
        "defs_user_id": {
            "pattern": "^[UW][A-Z0-9]{2,}$",
            "title": "User ID",
            "type": "string"
        },
        "defs_workspace_id": {
            "pattern": "^[TE][A-Z0-9]{8,}$",
            "title": "Team or Enterprise ID",
            "type": "string"
        },
        "objs_bot_profile": {
            "additionalProperties": false,
            "properties": {
                "app_id": {
                    "$ref": "#/definitions/defs_app_id"
                },
                "deleted": {
                    "type": "boolean"
                },
                "icons": {
                    "additionalProperties": false,
                    "properties": {
                        "image_36": {
                            "type": "string"
                        },
                        "image_48": {
                            "type": "string"
                        },
                        "image_72": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "image_36",
                        "image_48",
                        "image_72"
                    ],
                    "type": "object"
                },
                "id": {
                    "$ref": "#/definitions/defs_bot_id"
                },
                "name": {
                    "type": "string"
                },
                "team_id": {
                    "$ref": "#/definitions/defs_team"
                },
                "updated": {
                    "type": "integer"
                }
            },
            "required": [
                "id",
                "deleted",
                "name",
                "updated",
                "app_id",
                "icons",
                "team_id"
            ],
            "title": "Bot Profile Object",
            "type": "object"
        },
        "objs_channel": {
            "additionalProperties": false,
            "properties": {
                "accepted_user": {
                    "$ref": "#/definitions/defs_user_id"
                },
                "created": {
                    "type": "integer"
                },
                "creator": {
                    "$ref": "#/definitions/defs_user_id"
                },
                "id": {
                    "$ref": "#/definitions/defs_channel_id"
                },
                "is_archived": {
                    "type": "boolean"
                },
                "is_channel": {
                    "type": "boolean"
                },
                "is_frozen": {
                    "type": "boolean"
                },
                "is_general": {
                    "type": "boolean"
                },
                "is_member": {
                    "type": "boolean"
                },
                "is_moved": {
                    "type": "integer"
                },
                "is_mpim": {
                    "type": "boolean"
                },
                "is_non_threadable": {
                    "type": "boolean"
                },
                "is_org_shared": {
                    "type": "boolean"
                },
                "is_pending_ext_shared": {
                    "type": "boolean"
                },
                "is_private": {
                    "type": "boolean"
                },
                "is_read_only": {
                    "type": "boolean"
                },
                "is_shared": {
                    "type": "boolean"
                },
                "is_thread_only": {
                    "type": "boolean"
                },
                "last_read": {
                    "$ref": "#/definitions/defs_ts"
                },
                "latest": {
                    "items": [
                        {
                            "$ref": "#/definitions/objs_message"
                        },
                        {
                            "type": "none"
                        }
                    ]
                },
                "members": {
                    "items": {
                        "$ref": "#/definitions/defs_user_id"
                    },
                    "minItems": 0,
                    "type": "array",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string"
                },
                "name_normalized": {
                    "type": "string"
                },
                "num_members": {
                    "type": "integer"
                },
                "pending_shared": {
                    "items": {
                        "$ref": "#/definitions/defs_team"
                    },
                    "minItems": 0,
                    "type": "array",
                    "uniqueItems": true
                },
                "previous_names": {
                    "items": {
                        "$ref": "#/definitions/defs_channel_name"
                    },
                    "minItems": 0,
                    "type": "array",
                    "uniqueItems": true
                },
                "priority": {
                    "type": "number"
                },
                "purpose": {
                    "additionalProperties": false,
                    "properties": {
                        "creator": {
                            "$ref": "#/definitions/defs_topic_purpose_creator"
                        },
                        "last_set": {
                            "type": "integer"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "value",
                        "creator",
                        "last_set"
                    ],
                    "type": "object"
                },
                "topic": {
                    "additionalProperties": false,
                    "properties": {
                        "creator": {
                            "$ref": "#/definitions/defs_topic_purpose_creator"
                        },
                        "last_set": {
                            "type": "integer"
                        },
                        "value": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "value",
                        "creator",
                        "last_set"
                    ],
                    "type": "object"
                },
                "unlinked": {
                    "title": "Field to determine whether a channel has ever been shared/disconnected in the past",
                    "type": "integer"
                },
                "unread_count": {
                    "type": "integer"
                },
                "unread_count_display": {
                    "type": "integer"
                }
            },
            "required": [
                "id",
                "name",
                "created",
                "creator",
                "is_channel",
                "is_org_shared",
                "is_private",
                "is_mpim",
                "is_shared",
                "name_normalized",
                "members",
                "topic",
                "purpose"
            ],
            "title": "Channel Object",
            "type": "object"
        },
        "objs_comment": {
            "additionalProperties": false,
            "properties": {
                "comment": {
                    "type": "string"
                },
                "created": {
                    "type": "integer"
                },
                "id": {
                    "$ref": "#/definitions/defs_comment_id"
                },
                "is_intro": {
                    "type": "boolean"
                },
                "is_starred": {
                    "type": "boolean"
                },
                "num_stars": {
                    "type": "integer"
                },
                "pinned_info": {
                    "$ref": "#/definitions/defs_pinned_info"
                },
                "pinned_to": {
                    "items": {
                        "$ref": "#/definitions/defs_channel"
                    },
                    "type": "array"
                },
                "reactions": {
                    "items": {
                        "$ref": "#/definitions/objs_reaction"
                    },
                    "type": "array"
                },
                "timestamp": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/defs_user_id"
                }
            },
            "required": [
                "id",
                "created",
                "timestamp",
                "user",
                "is_intro",
                "comment"
            ],
            "title": "File Comment Object",
            "type": "object"
        },
        "objs_comments": {
            "items": {},
            "title": "file comments object",
            "type": "array"
        },
        "objs_conversation": {
            "items": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "accepted_user": {
                            "$ref": "#/definitions/defs_user_id"
                        },
                        "connected_team_ids": {
                            "items": {
                                "$ref": "#/definitions/defs_workspace_id"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "conversation_host_id": {
                            "$ref": "#/definitions/defs_workspace_id"
                        },
                        "created": {
                            "type": "integer"
                        },
                        "creator": {
                            "$ref": "#/definitions/defs_user_id"
                        },
                        "display_counts": {
                            "additionalProperties": false,
                            "properties": {
                                "display_counts": {
                                    "type": "integer"
                                },
                                "guest_counts": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "display_counts",
                                "guest_counts"
                            ],
                            "type": "object"
                        },
                        "enterprise_id": {
                            "$ref": "#/definitions/defs_enterprise_id"
                        },
                        "has_pins": {
                            "type": "boolean"
                        },
                        "id": {
                            "$ref": "#/definitions/defs_channel"
                        },
                        "internal_team_ids": {
                            "items": {
                                "$ref": "#/definitions/defs_team"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "is_archived": {
                            "type": "boolean"
                        },
                        "is_channel": {
                            "type": "boolean"
                        },
                        "is_ext_shared": {
                            "type": "boolean"
                        },
                        "is_frozen": {
                            "type": "boolean"
                        },
                        "is_general": {
                            "type": "boolean"
                        },
                        "is_global_shared": {
                            "type": "boolean"
                        },
                        "is_group": {
                            "type": "boolean"
                        },
                        "is_im": {
                            "type": "boolean"
                        },
                        "is_member": {
                            "type": "boolean"
                        },
                        "is_moved": {
                            "type": "integer"
                        },
                        "is_mpim": {
                            "enum": [
                                false
                            ],
                            "type": "boolean"
                        },
                        "is_non_threadable": {
                            "type": "boolean"
                        },
                        "is_open": {
                            "type": "boolean"
                        },
                        "is_org_default": {
                            "type": "boolean"
                        },
                        "is_org_mandatory": {
                            "type": "boolean"
                        },
                        "is_org_shared": {
                            "type": "boolean"
                        },
                        "is_pending_ext_shared": {
                            "type": "boolean"
                        },
                        "is_private": {
                            "type": "boolean"
                        },
                        "is_read_only": {
                            "type": "boolean"
                        },
                        "is_shared": {
                            "type": "boolean"
                        },
                        "is_starred": {
                            "type": "boolean"
                        },
                        "is_thread_only": {
                            "type": "boolean"
                        },
                        "last_read": {
                            "$ref": "#/definitions/defs_ts"
                        },
                        "latest": {
                            "items": [
                                {
                                    "$ref": "#/definitions/objs_message"
                                },
                                {
                                    "type": "none"
                                }
                            ]
                        },
                        "members": {
                            "items": {
                                "$ref": "#/definitions/defs_user_id"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "name": {
                            "type": "string"
                        },
                        "name_normalized": {
                            "type": "string"
                        },
                        "num_members": {
                            "type": "integer"
                        },
                        "parent_conversation": {
                            "items": [
                                {
                                    "$ref": "#/definitions/defs_channel"
                                },
                                {
                                    "type": "none"
                                }
                            ]
                        },
                        "pending_connected_team_ids": {
                            "items": {
                                "$ref": "#/definitions/defs_team"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "pending_shared": {
                            "items": {
                                "$ref": "#/definitions/defs_team"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "pin_count": {
                            "type": "integer"
                        },
                        "previous_names": {
                            "items": {
                                "$ref": "#/definitions/defs_channel_name"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "priority": {
                            "type": "number"
                        },
                        "purpose": {
                            "additionalProperties": false,
                            "properties": {
                                "creator": {
                                    "$ref": "#/definitions/defs_topic_purpose_creator"
                                },
                                "last_set": {
                                    "type": "integer"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "value",
                                "creator",
                                "last_set"
                            ],
                            "type": "object"
                        },
                        "shared_team_ids": {
                            "items": {
                                "$ref": "#/definitions/defs_team"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "shares": {
                            "items": {
                                "additionalProperties": false,
                                "properties": {
                                    "accepted_user": {
                                        "$ref": "#/definitions/defs_user_id"
                                    },
                                    "is_active": {
                                        "type": "boolean"
                                    },
                                    "team": {
                                        "$ref": "#/definitions/objs_team"
                                    },
                                    "user": {
                                        "$ref": "#/definitions/defs_user_id"
                                    }
                                },
                                "required": [
                                    "team",
                                    "user",
                                    "is_active"
                                ],
                                "type": "object"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "timezone_count": {
                            "type": "integer"
                        },
                        "topic": {
                            "additionalProperties": false,
                            "properties": {
                                "creator": {
                                    "$ref": "#/definitions/defs_topic_purpose_creator"
                                },
                                "last_set": {
                                    "type": "integer"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "value",
                                "creator",
                                "last_set"
                            ],
                            "type": "object"
                        },
                        "unlinked": {
                            "title": "Field to determine whether a channel has ever been shared/disconnected in the past",
                            "type": "integer"
                        },
                        "unread_count": {
                            "type": "integer"
                        },
                        "unread_count_display": {
                            "type": "integer"
                        },
                        "use_case": {
                            "type": "string"
                        },
                        "user": {
                            "$ref": "#/definitions/defs_user_id"
                        },
                        "version": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "id",
                        "name",
                        "created",
                        "creator",
                        "is_archived",
                        "is_channel",
                        "is_general",
                        "is_mpim",
                        "is_group",
                        "is_org_shared",
                        "is_im",
                        "is_shared",
                        "is_private",
                        "name_normalized",
                        "topic",
                        "purpose"
                    ],
                    "title": "Conversation object",
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "accepted_user": {
                            "$ref": "#/definitions/defs_user_id"
                        },
                        "connected_team_ids": {
                            "items": {
                                "$ref": "#/definitions/defs_team"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "conversation_host_id": {
                            "$ref": "#/definitions/defs_workspace_id"
                        },
                        "created": {
                            "type": "integer"
                        },
                        "creator": {
                            "$ref": "#/definitions/defs_user_id"
                        },
                        "display_counts": {
                            "additionalProperties": false,
                            "properties": {
                                "display_counts": {
                                    "type": "integer"
                                },
                                "guest_counts": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "display_counts",
                                "guest_counts"
                            ],
                            "type": "object"
                        },
                        "id": {
                            "$ref": "#/definitions/defs_channel"
                        },
                        "internal_team_ids": {
                            "items": {
                                "$ref": "#/definitions/defs_team"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "is_archived": {
                            "type": "boolean"
                        },
                        "is_channel": {
                            "type": "boolean"
                        },
                        "is_ext_shared": {
                            "type": "boolean"
                        },
                        "is_frozen": {
                            "type": "boolean"
                        },
                        "is_general": {
                            "type": "boolean"
                        },
                        "is_group": {
                            "type": "boolean"
                        },
                        "is_im": {
                            "type": "boolean"
                        },
                        "is_member": {
                            "type": "boolean"
                        },
                        "is_moved": {
                            "type": "integer"
                        },
                        "is_mpim": {
                            "enum": [
                                true
                            ],
                            "type": "boolean"
                        },
                        "is_non_threadable": {
                            "type": "boolean"
                        },
                        "is_open": {
                            "type": "boolean"
                        },
                        "is_org_shared": {
                            "type": "boolean"
                        },
                        "is_pending_ext_shared": {
                            "type": "boolean"
                        },
                        "is_private": {
                            "type": "boolean"
                        },
                        "is_read_only": {
                            "type": "boolean"
                        },
                        "is_shared": {
                            "type": "boolean"
                        },
                        "is_starred": {
                            "type": "boolean"
                        },
                        "is_thread_only": {
                            "type": "boolean"
                        },
                        "last_read": {
                            "$ref": "#/definitions/defs_ts"
                        },
                        "latest": {
                            "items": [
                                {
                                    "$ref": "#/definitions/objs_message"
                                },
                                {
                                    "type": "none"
                                }
                            ]
                        },
                        "members": {
                            "items": {
                                "$ref": "#/definitions/defs_user_id"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "name": {
                            "type": "string"
                        },
                        "name_normalized": {
                            "type": "string"
                        },
                        "num_members": {
                            "type": "integer"
                        },
                        "parent_conversation": {
                            "items": [
                                {
                                    "$ref": "#/definitions/defs_channel"
                                },
                                {
                                    "type": "none"
                                }
                            ]
                        },
                        "pending_connected_team_ids": {
                            "items": {
                                "$ref": "#/definitions/defs_team"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "pending_shared": {
                            "items": {
                                "$ref": "#/definitions/defs_team"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "pin_count": {
                            "type": "integer"
                        },
                        "previous_names": {
                            "items": {
                                "$ref": "#/definitions/defs_channel_name"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "priority": {
                            "type": "number"
                        },
                        "purpose": {
                            "additionalProperties": false,
                            "properties": {
                                "creator": {
                                    "$ref": "#/definitions/defs_topic_purpose_creator"
                                },
                                "last_set": {
                                    "type": "integer"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "value",
                                "creator",
                                "last_set"
                            ],
                            "type": "object"
                        },
                        "shared_team_ids": {
                            "items": {
                                "$ref": "#/definitions/defs_team"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "shares": {
                            "items": {
                                "additionalProperties": false,
                                "properties": {
                                    "accepted_user": {
                                        "$ref": "#/definitions/defs_user_id"
                                    },
                                    "is_active": {
                                        "type": "boolean"
                                    },
                                    "team": {
                                        "$ref": "#/definitions/objs_team"
                                    },
                                    "user": {
                                        "$ref": "#/definitions/defs_user_id"
                                    }
                                },
                                "required": [
                                    "team",
                                    "user",
                                    "is_active"
                                ],
                                "type": "object"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "timezone_count": {
                            "type": "integer"
                        },
                        "topic": {
                            "additionalProperties": false,
                            "properties": {
                                "creator": {
                                    "$ref": "#/definitions/defs_topic_purpose_creator"
                                },
                                "last_set": {
                                    "type": "integer"
                                },
                                "value": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "value",
                                "creator",
                                "last_set"
                            ],
                            "type": "object"
                        },
                        "unlinked": {
                            "title": "Field to determine whether a channel has ever been shared/disconnected in the past",
                            "type": "integer"
                        },
                        "unread_count": {
                            "type": "integer"
                        },
                        "unread_count_display": {
                            "type": "integer"
                        },
                        "user": {
                            "$ref": "#/definitions/defs_user_id"
                        },
                        "version": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "id",
                        "name",
                        "created",
                        "creator",
                        "is_archived",
                        "is_channel",
                        "is_general",
                        "is_mpim",
                        "is_group",
                        "is_org_shared",
                        "is_im",
                        "is_shared",
                        "is_private",
                        "name_normalized",
                        "topic",
                        "purpose"
                    ],
                    "title": "Conversation MPIM Object",
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "created": {
                            "type": "integer"
                        },
                        "has_pins": {
                            "type": "boolean"
                        },
                        "id": {
                            "$ref": "#/definitions/defs_dm_id"
                        },
                        "is_archived": {
                            "type": "boolean"
                        },
                        "is_ext_shared": {
                            "type": "boolean"
                        },
                        "is_frozen": {
                            "type": "boolean"
                        },
                        "is_im": {
                            "type": "boolean"
                        },
                        "is_open": {
                            "type": "boolean"
                        },
                        "is_org_shared": {
                            "type": "boolean"
                        },
                        "is_shared": {
                            "type": "boolean"
                        },
                        "is_starred": {
                            "type": "boolean"
                        },
                        "is_user_deleted": {
                            "type": "boolean"
                        },
                        "last_read": {
                            "$ref": "#/definitions/defs_ts"
                        },
                        "latest": {
                            "items": [
                                {
                                    "$ref": "#/definitions/objs_message"
                                },
                                {
                                    "type": "none"
                                }
                            ]
                        },
                        "parent_conversation": {
                            "items": [
                                {
                                    "$ref": "#/definitions/defs_channel"
                                },
                                {
                                    "type": "none"
                                }
                            ]
                        },
                        "pin_count": {
                            "type": "integer"
                        },
                        "priority": {
                            "type": "number"
                        },
                        "shares": {
                            "items": {
                                "additionalProperties": false,
                                "properties": {
                                    "date_create": {
                                        "type": "integer"
                                    },
                                    "id": {
                                        "$ref": "#/definitions/defs_team"
                                    },
                                    "is_active": {
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "type": "string"
                                    },
                                    "team": {
                                        "$ref": "#/definitions/objs_team"
                                    }
                                },
                                "required": [
                                    "id",
                                    "name",
                                    "team",
                                    "date_create",
                                    "is_active"
                                ],
                                "type": "object"
                            },
                            "minItems": 0,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "unread_count": {
                            "type": "integer"
                        },
                        "unread_count_display": {
                            "type": "integer"
                        },
                        "user": {
                            "$ref": "#/definitions/defs_user_id"
                        },
                        "version": {
                            "type": "integer"
                        }
                    },
                    "required": [
                        "id",
                        "created",
                        "is_im",
                        "is_org_shared",
                        "user",
                        "priority"
                    ],
                    "title": "Conversation IM Channel Object from conversations.* methods",
                    "type": "object"
                }
            ]
        },
        "objs_enterprise_user": {
            "additionalProperties": false,
            "properties": {
                "enterprise_id": {
                    "$ref": "#/definitions/defs_enterprise_id"
                },
                "enterprise_name": {
                    "$ref": "#/definitions/defs_enterprise_name"
                },
                "id": {
                    "$ref": "#/definitions/defs_enterprise_user_id"
                },
                "is_admin": {
                    "type": "boolean"
                },
                "is_owner": {
                    "type": "boolean"
                },
                "teams": {
                    "items": {
                        "$ref": "#/definitions/defs_team"
                    },
                    "type": "array",
                    "uniqueItems": true
                }
            },
            "required": [
                "id",
                "enterprise_id",
                "enterprise_name",
                "is_admin",
                "is_owner",
                "teams"
            ],
            "type": "object"
        },
        "objs_external_org_migrations": {
            "properties": {
                "current": {
                    "items": {
                        "properties": {
                            "date_started": {
                                "type": "integer"
                            },
                            "team_id": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "team_id",
                            "date_started"
                        ],
                        "type": "object"
                    },
                    "type": "array"
                },
                "date_updated": {
                    "type": "integer"
                }
            },
            "required": [
                "date_updated",
                "current"
            ],
            "title": "External Org Migrations",
            "type": "object"
        },
        "objs_file": {
            "additionalProperties": false,
            "properties": {
                "channels": {
                    "items": {
                        "$ref": "#/definitions/defs_channel_id"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "comments_count": {
                    "type": "integer"
                },
                "created": {
                    "type": "integer"
                },
                "date_delete": {
                    "type": "integer"
                },
                "display_as_bot": {
                    "type": "boolean"
                },
                "editable": {
                    "type": "boolean"
                },
                "editor": {
                    "$ref": "#/definitions/defs_user_id"
                },
                "external_id": {
                    "type": "string"
                },
                "external_type": {
                    "type": "string"
                },
                "external_url": {
                    "type": "string"
                },
                "filetype": {
                    "type": "string"
                },
                "groups": {
                    "items": {
                        "$ref": "#/definitions/defs_group_id"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "has_rich_preview": {
                    "type": "boolean"
                },
                "id": {
                    "$ref": "#/definitions/defs_file_id"
                },
                "image_exif_rotation": {
                    "type": "integer"
                },
                "ims": {
                    "items": {
                        "$ref": "#/definitions/defs_dm_id"
                    },
                    "type": "array",
                    "uniqueItems": true
                },
                "is_external": {
                    "type": "boolean"
                },
                "is_public": {
                    "type": "boolean"
                },
                "is_starred": {
                    "type": "boolean"
                },
                "is_tombstoned": {
                    "type": "boolean"
                },
                "last_editor": {
                    "$ref": "#/definitions/defs_user_id"
                },
                "mimetype": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "non_owner_editable": {
                    "type": "boolean"
                },
                "num_stars": {
                    "type": "integer"
                },
                "original_h": {
                    "type": "integer"
                },
                "original_w": {
                    "type": "integer"
                },
                "permalink": {
                    "type": "string"
                },
                "permalink_public": {
                    "type": "string"
                },
                "pinned_info": {
                    "$ref": "#/definitions/defs_pinned_info"
                },
                "pinned_to": {
                    "items": {
                        "$ref": "#/definitions/defs_channel"
                    },
                    "type": "array"
                },
                "pretty_type": {
                    "type": "string"
                },
                "preview": {
                    "type": "string"
                },
                "public_url_shared": {
                    "type": "boolean"
                },
                "reactions": {
                    "items": {
                        "$ref": "#/definitions/objs_reaction"
                    },
                    "type": "array"
                },
                "shares": {
                    "additionalProperties": false,
                    "properties": {
                        "private": {
                            "additionalProperties": false
                        },
                        "public": {
                            "additionalProperties": false
                        }
                    },
                    "type": "object"
                },
                "size": {
                    "type": "integer"
                },
                "source_team": {
                    "$ref": "#/definitions/defs_team"
                },
                "state": {
                    "type": "string"
                },
                "thumb_1024": {
                    "type": "string"
                },
                "thumb_1024_h": {
                    "type": "integer"
                },
                "thumb_1024_w": {
                    "type": "integer"
                },
                "thumb_160": {
                    "type": "string"
                },
                "thumb_360": {
                    "type": "string"
                },
                "thumb_360_h": {
                    "type": "integer"
                },
                "thumb_360_w": {
                    "type": "integer"
                },
                "thumb_480": {
                    "type": "string"
                },
                "thumb_480_h": {
                    "type": "integer"
                },
                "thumb_480_w": {
                    "type": "integer"
                },
                "thumb_64": {
                    "type": "string"
                },
                "thumb_720": {
                    "type": "string"
                },
                "thumb_720_h": {
                    "type": "integer"
                },
                "thumb_720_w": {
                    "type": "integer"
                },
                "thumb_80": {
                    "type": "string"
                },
                "thumb_800": {
                    "type": "string"
                },
                "thumb_800_h": {
                    "type": "integer"
                },
                "thumb_800_w": {
                    "type": "integer"
                },
                "thumb_960": {
                    "type": "string"
                },
                "thumb_960_h": {
                    "type": "integer"
                },
                "thumb_960_w": {
                    "type": "integer"
                },
                "thumb_tiny": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updated": {
                    "type": "integer"
                },
                "url_private": {
                    "type": "string"
                },
                "url_private_download": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                },
                "user_team": {
                    "$ref": "#/definitions/defs_team"
                },
                "username": {
                    "type": "string"
                }
            },
            "title": "file object",
            "type": "object"
        },
        "objs_icon": {
            "properties": {
                "image_102": {
                    "type": "string"
                },
                "image_132": {
                    "type": "string"
                },
                "image_230": {
                    "type": "string"
                },
                "image_34": {
                    "type": "string"
                },
                "image_44": {
                    "type": "string"
                },
                "image_68": {
                    "type": "string"
                },
                "image_88": {
                    "type": "string"
                },
                "image_default": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "objs_message": {
            "additionalProperties": false,
            "properties": {
                "attachments": {
                    "items": {
                        "additionalProperties": false,
                        "properties": {
                            "fallback": {
                                "type": "string"
                            },
                            "id": {
                                "type": "integer"
                            },
                            "image_bytes": {
                                "type": "integer"
                            },
                            "image_height": {
                                "type": "integer"
                            },
                            "image_url": {
                                "type": "string"
                            },
                            "image_width": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "id"
                        ],
                        "type": "object"
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true
                },
                "blocks": {
                    "$ref": "#/definitions/blocks"
                },
                "bot_id": {
                    "items": [
                        {
                            "$ref": "#/definitions/defs_bot_id"
                        },
                        {
                            "title": "Nil bot_id set when display_as_bot is false",
                            "type": "none"
                        }
                    ]
                },
                "bot_profile": {
                    "$ref": "#/definitions/objs_bot_profile"
                },
                "client_msg_id": {
                    "type": "string"
                },
                "comment": {
                    "$ref": "#/definitions/objs_comment"
                },
                "display_as_bot": {
                    "type": "boolean"
                },
                "file": {
                    "$ref": "#/definitions/objs_file"
                },
                "files": {
                    "items": {
                        "$ref": "#/definitions/objs_file"
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true
                },
                "icons": {
                    "additionalProperties": false,
                    "properties": {
                        "emoji": {
                            "type": "string"
                        },
                        "image_64": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                },
                "inviter": {
                    "$ref": "#/definitions/defs_user_id"
                },
                "is_delayed_message": {
                    "type": "boolean"
                },
                "is_intro": {
                    "type": "boolean"
                },
                "is_starred": {
                    "type": "boolean"
                },
                "last_read": {
                    "$ref": "#/definitions/defs_ts"
                },
                "latest_reply": {
                    "$ref": "#/definitions/defs_ts"
                },
                "name": {
                    "type": "string"
                },
                "old_name": {
                    "type": "string"
                },
                "parent_user_id": {
                    "$ref": "#/definitions/defs_user_id"
                },
                "permalink": {
                    "type": "string"
                },
                "pinned_to": {
                    "items": {
                        "$ref": "#/definitions/defs_channel"
                    },
                    "type": "array"
                },
                "purpose": {
                    "type": "string"
                },
                "reactions": {
                    "items": {
                        "$ref": "#/definitions/objs_reaction"
                    },
                    "type": "array"
                },
                "reply_count": {
                    "type": "integer"
                },
                "reply_users": {
                    "items": {
                        "$ref": "#/definitions/defs_user_id"
                    },
                    "minItems": 1,
                    "type": "array",
                    "uniqueItems": true
                },
                "reply_users_count": {
                    "type": "integer"
                },
                "source_team": {
                    "$ref": "#/definitions/defs_workspace_id"
                },
                "subscribed": {
                    "type": "boolean"
                },
                "subtype": {
                    "type": "string"
                },
                "team": {
                    "$ref": "#/definitions/defs_workspace_id"
                },
                "text": {
                    "type": "string"
                },
                "thread_ts": {
                    "$ref": "#/definitions/defs_ts"
                },
                "topic": {
                    "type": "string"
                },
                "ts": {
                    "$ref": "#/definitions/defs_ts"
                },
                "type": {
                    "type": "string"
                },
                "unread_count": {
                    "type": "integer"
                },
                "upload": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/defs_user_id"
                },
                "user_profile": {
                    "$ref": "#/definitions/objs_user_profile_short"
                },
                "user_team": {
                    "$ref": "#/definitions/defs_workspace_id"
                },
                "username": {
                    "type": "string"
                }
            },
            "required": [
                "text",
                "type",
                "ts"
            ],
            "title": "Message object",
            "type": "object"
        },
        "objs_paging": {
            "additionalProperties": false,
            "properties": {
                "count": {
                    "type": "integer"
                },
                "page": {
                    "type": "integer"
                },
                "pages": {
                    "type": "integer"
                },
                "per_page": {
                    "type": "integer"
                },
                "spill": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            },
            "required": [
                "page",
                "total"
            ],
            "title": "paging object",
            "type": "object"
        },
        "objs_primary_owner": {
            "properties": {
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            },
            "required": [
                "id",
                "email"
            ],
            "type": "object"
        },
        "objs_reaction": {
            "additionalProperties": true,
            "properties": {
                "count": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "users": {
                    "items": {
                        "$ref": "#/definitions/defs_user_id"
                    },
                    "type": "array"
                }
            },
            "required": [
                "name",
                "users",
                "count"
            ],
            "title": "Reaction object",
            "type": "object"
        },
        "objs_reminder": {
            "additionalProperties": false,
            "properties": {
                "complete_ts": {
                    "type": "integer"
                },
                "creator": {
                    "$ref": "#/definitions/defs_user_id"
                },
                "id": {
                    "$ref": "#/definitions/defs_reminder_id"
                },
                "recurring": {
                    "type": "boolean"
                },
                "text": {
                    "type": "string"
                },
                "time": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/defs_user_id"
                }
            },
            "required": [
                "id",
                "creator",
                "user",
                "text",
                "recurring"
            ],
            "type": "object"
        },
        "objs_resources": {
            "additionalProperties": false,
            "properties": {
                "excluded_ids": {
                    "items": {
                        "items": [
                            {
                                "$ref": "#/definitions/defs_channel"
                            },
                            {
                                "$ref": "#/definitions/defs_team"
                            }
                        ]
                    },
                    "type": "array"
                },
                "ids": {
                    "items": {
                        "items": [
                            {
                                "$ref": "#/definitions/defs_channel"
                            },
                            {
                                "$ref": "#/definitions/defs_team"
                            }
                        ]
                    },
                    "type": "array"
                },
                "wildcard": {
                    "type": "boolean"
                }
            },
            "required": [
                "ids"
            ],
            "title": "resources in info from apps.permissions.info",
            "type": "object"
        },
        "objs_response_metadata": {
            "items": [
                {
                    "additionalProperties": false,
                    "properties": {
                        "next_cursor": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "next_cursor"
                    ],
                    "title": "new paging style",
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "messages": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "warnings": {
                            "items": {
                                "enum": [
                                    "method_deprecated"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "messages",
                        "warnings"
                    ],
                    "title": "deprecation_warning",
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "properties": {
                        "messages": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "next_cursor": {
                            "type": "string"
                        },
                        "warnings": {
                            "items": {
                                "enum": [
                                    "method_deprecated"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "messages",
                        "warnings",
                        "next_cursor"
                    ],
                    "title": "deprecation_warning and paging style together",
                    "type": "object"
                }
            ]
        },
        "objs_scopes": {
            "items": {
                "title": "Named OAuth scopes",
                "type": "string",
                "x-examples": [
                    "chat:write",
                    "im:history",
                    "im:read"
                ]
            },
            "type": "array"
        },
        "objs_subteam": {
            "additionalProperties": false,
            "properties": {
                "auto_provision": {
                    "type": "boolean"
                },
                "auto_type": {
                    "items": [
                        {
                            "type": "none"
                        },
                        {
                            "enum": [
                                "owner",
                                "admin"
                            ],
                            "type": "string"
                        }
                    ]
                },
                "channel_count": {
                    "type": "integer"
                },
                "created_by": {
                    "$ref": "#/definitions/defs_user_id"
                },
                "date_create": {
                    "type": "integer"
                },
                "date_delete": {
                    "type": "integer"
                },
                "date_update": {
                    "type": "integer"
                },
                "deleted_by": {
                    "items": [
                        {
                            "type": "none"
                        },
                        {
                            "$ref": "#/definitions/defs_user_id"
                        }
                    ]
                },
                "description": {
                    "type": "string"
                },
                "enterprise_subteam_id": {
                    "type": "string"
                },
                "handle": {
                    "type": "string"
                },
                "id": {
                    "$ref": "#/definitions/defs_subteam_id"
                },
                "is_external": {
                    "type": "boolean"
                },
                "is_subteam": {
                    "type": "boolean"
                },
                "is_usergroup": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "prefs": {
                    "additionalProperties": false,
                    "properties": {
                        "channels": {
                            "items": {
                                "$ref": "#/definitions/defs_channel_id"
                            },
                            "type": "array"
                        },
                        "groups": {
                            "items": {
                                "$ref": "#/definitions/defs_group_id"
                            },
                            "type": "array"
                        }
                    },
                    "required": [
                        "channels",
                        "groups"
                    ],
                    "type": "object"
                },
                "team_id": {
                    "$ref": "#/definitions/defs_team"
                },
                "updated_by": {
                    "$ref": "#/definitions/defs_user_id"
                },
                "user_count": {
                    "type": "integer"
                },
                "users": {
                    "items": {
                        "$ref": "#/definitions/defs_user_id"
                    },
                    "type": "array"
                }
            },
            "required": [
                "id",
                "team_id",
                "is_usergroup",
                "is_subteam",
                "name",
                "description",
                "handle",
                "is_external",
                "date_create",
                "date_update",
                "date_delete",
                "auto_type",
                "auto_provision",
                "enterprise_subteam_id",
                "created_by",
                "updated_by",
                "deleted_by",
                "prefs"
            ],
            "title": "Subteam/Usergroup Object",
            "type": "object"
        },
        "objs_team": {
            "additionalProperties": false,
            "properties": {
                "archived": {
                    "type": "boolean"
                },
                "avatar_base_url": {
                    "type": "string"
                },
                "created": {
                    "type": "integer"
                },
                "date_create": {
                    "type": "integer"
                },
                "deleted": {
                    "type": "boolean"
                },
                "description": {
                    "type": [
                        "string"
                    ]
                },
                "discoverable": {
                    "items": [
                        {
                            "type": "none"
                        },
                        {
                            "type": "string"
                        }
                    ]
                },
                "domain": {
                    "type": "string"
                },
                "email_domain": {
                    "type": "string"
                },
                "enterprise_id": {
                    "$ref": "#/definitions/defs_enterprise_id"
                },
                "enterprise_name": {
                    "$ref": "#/definitions/defs_enterprise_name"
                },
                "external_org_migrations": {
                    "$ref": "#/definitions/objs_external_org_migrations"
                },
                "has_compliance_export": {
                    "type": "boolean"
                },
                "icon": {
                    "$ref": "#/definitions/objs_icon"
                },
                "id": {
                    "$ref": "#/definitions/defs_workspace_id"
                },
                "is_assigned": {
                    "type": "boolean"
                },
                "is_enterprise": {
                    "type": "integer"
                },
                "is_over_storage_limit": {
                    "type": "boolean"
                },
                "limit_ts": {
                    "type": "integer"
                },
                "locale": {
                    "type": "string"
                },
                "messages_count": {
                    "type": "integer"
                },
                "msg_edit_window_mins": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "over_integrations_limit": {
                    "type": "boolean"
                },
                "over_storage_limit": {
                    "type": "boolean"
                },
                "pay_prod_cur": {
                    "type": "string"
                },
                "plan": {
                    "enum": [
                        "",
                        "std",
                        "plus",
                        "compliance",
                        "enterprise"
                    ],
                    "type": "string"
                },
                "primary_owner": {
                    "$ref": "#/definitions/objs_primary_owner"
                },
                "sso_provider": {
                    "properties": {
                        "label": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "type": {
                            "type": "string"
                        }
                    },
                    "type": "object"
                }
            },
            "required": [
                "id",
                "name",
                "domain",
                "email_domain",
                "icon"
            ],
            "title": "Team Object",
            "type": "object"
        },
        "objs_team_profile_field": {
            "additionalProperties": false,
            "properties": {
                "field_name": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "hint": {
                    "type": "string"
                },
                "id": {
                    "pattern": "^X[a-zA-Z0-9]{9,}$",
                    "type": "string"
                },
                "is_hidden": {
                    "type": "boolean"
                },
                "label": {
                    "type": "string"
                },
                "options": {
                    "items": [
                        {
                            "type": "none"
                        },
                        {
                            "$ref": "#/definitions/objs_team_profile_field_option"
                        }
                    ]
                },
                "ordering": {
                    "type": "number"
                },
                "possible_values": {
                    "items": {
                        "type": "string"
                    },
                    "type": [
                        "none",
                        "array"
                    ]
                },
                "type": {
                    "enum": [
                        "text",
                        "date",
                        "link",
                        "mailto",
                        "options_list",
                        "user"
                    ],
                    "type": "string"
                }
            },
            "required": [
                "id",
                "ordering",
                "label",
                "hint",
                "type"
            ],
            "type": "object"
        },
        "objs_team_profile_field_option": {
            "additionalProperties": false,
            "properties": {
                "is_custom": {
                    "type": [
                        "none",
                        "boolean"
                    ]
                },
                "is_multiple_entry": {
                    "type": [
                        "none",
                        "boolean"
                    ]
                },
                "is_protected": {
                    "type": [
                        "none",
                        "boolean"
                    ]
                },
                "is_scim": {
                    "type": [
                        "none",
                        "boolean"
                    ]
                }
            },
            "type": "object"
        },
        "objs_user": {
            "items": [
                {
                    "additionalProperties": false,
                    "description": "user object for non enterprise type",
                    "properties": {
                        "color": {
                            "pattern": "^[a-fA-F0-9]{6}$",
                            "type": "string"
                        },
                        "deleted": {
                            "type": "boolean"
                        },
                        "enterprise_user": {
                            "$ref": "#/definitions/objs_enterprise_user"
                        },
                        "has_2fa": {
                            "type": "boolean"
                        },
                        "id": {
                            "$ref": "#/definitions/defs_user_id"
                        },
                        "is_admin": {
                            "type": "boolean"
                        },
                        "is_app_user": {
                            "type": "boolean"
                        },
                        "is_bot": {
                            "type": "boolean"
                        },
                        "is_external": {
                            "type": "boolean"
                        },
                        "is_forgotten": {
                            "type": "boolean"
                        },
                        "is_invited_user": {
                            "type": "boolean"
                        },
                        "is_owner": {
                            "type": "boolean"
                        },
                        "is_primary_owner": {
                            "type": "boolean"
                        },
                        "is_restricted": {
                            "type": "boolean"
                        },
                        "is_stranger": {
                            "type": "boolean"
                        },
                        "is_ultra_restricted": {
                            "type": "boolean"
                        },
                        "locale": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "presence": {
                            "type": "string"
                        },
                        "profile": {
                            "$ref": "#/definitions/objs_user_profile"
                        },
                        "real_name": {
                            "type": "string"
                        },
                        "team": {
                            "$ref": "#/definitions/defs_workspace_id"
                        },
                        "team_id": {
                            "$ref": "#/definitions/defs_workspace_id"
                        },
                        "team_profile": {
                            "additionalProperties": false,
                            "properties": {
                                "fields": {
                                    "items": {
                                        "$ref": "#/definitions/objs_team_profile_field"
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            },
                            "required": [
                                "fields"
                            ],
                            "type": "object"
                        },
                        "two_factor_type": {
                            "type": "string"
                        },
                        "tz": {
                            "items": [
                                {
                                    "type": "none"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "tz_label": {
                            "type": "string"
                        },
                        "tz_offset": {
                            "type": "number"
                        },
                        "updated": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "id",
                        "name",
                        "profile",
                        "is_bot",
                        "updated",
                        "is_app_user"
                    ],
                    "type": "object"
                },
                {
                    "additionalProperties": false,
                    "description": "enterprise user",
                    "properties": {
                        "color": {
                            "description": "refercing to bug: https://jira.tinyspeck.com/browse/EVALUE-1559",
                            "pattern": "^([a-fA-F0-9]{6})?$",
                            "type": "string"
                        },
                        "deleted": {
                            "type": "boolean"
                        },
                        "enterprise_user": {
                            "$ref": "#/definitions/objs_enterprise_user"
                        },
                        "has_2fa": {
                            "type": "boolean"
                        },
                        "id": {
                            "$ref": "#/definitions/defs_user_id"
                        },
                        "is_admin": {
                            "type": "boolean"
                        },
                        "is_app_user": {
                            "type": "boolean"
                        },
                        "is_bot": {
                            "type": "boolean"
                        },
                        "is_external": {
                            "type": "boolean"
                        },
                        "is_forgotten": {
                            "type": "boolean"
                        },
                        "is_owner": {
                            "type": "boolean"
                        },
                        "is_primary_owner": {
                            "type": "boolean"
                        },
                        "is_restricted": {
                            "type": "boolean"
                        },
                        "is_stranger": {
                            "type": "boolean"
                        },
                        "is_ultra_restricted": {
                            "type": "boolean"
                        },
                        "locale": {
                            "type": "string"
                        },
                        "name": {
                            "type": "string"
                        },
                        "presence": {
                            "type": "string"
                        },
                        "profile": {
                            "$ref": "#/definitions/objs_user_profile"
                        },
                        "real_name": {
                            "type": "string"
                        },
                        "team_id": {
                            "$ref": "#/definitions/defs_workspace_id"
                        },
                        "team_profile": {
                            "additionalProperties": false,
                            "properties": {
                                "fields": {
                                    "items": {
                                        "$ref": "#/definitions/objs_team_profile_field"
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true
                                }
                            },
                            "required": [
                                "fields"
                            ],
                            "type": "object"
                        },
                        "teams": {
                            "items": {
                                "$ref": "#/definitions/defs_workspace_id"
                            },
                            "minItems": 1,
                            "type": "array",
                            "uniqueItems": true
                        },
                        "two_factor_type": {
                            "type": "string"
                        },
                        "tz": {
                            "items": [
                                {
                                    "type": "none"
                                },
                                {
                                    "type": "string"
                                }
                            ]
                        },
                        "tz_label": {
                            "type": "string"
                        },
                        "tz_offset": {
                            "type": "number"
                        },
                        "updated": {
                            "type": "number"
                        }
                    },
                    "required": [
                        "id",
                        "name",
                        "profile",
                        "is_bot",
                        "updated",
                        "is_app_user"
                    ],
                    "type": "object"
                }
            ]
        },
        "objs_user_profile": {
            "additionalProperties": false,
            "properties": {
                "always_active": {
                    "type": "boolean"
                },
                "api_app_id": {
                    "$ref": "#/definitions/defs_optional_app_id"
                },
                "avatar_hash": {
                    "type": "string"
                },
                "bot_id": {
                    "$ref": "#/definitions/defs_bot_id"
                },
                "display_name": {
                    "type": "string"
                },
                "display_name_normalized": {
                    "type": "string"
                },
                "email": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "fields": {
                    "items": {
                        "type": "object"
                    },
                    "type": [
                        "array"
                    ]
                },
                "first_name": {
                    "type": [
                        "string"
                    ]
                },
                "guest_expiration_ts": {
                    "type": [
                        "none",
                        "integer"
                    ]
                },
                "guest_invited_by": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "image_1024": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "image_192": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "image_24": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "image_32": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "image_48": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "image_512": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "image_72": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "image_original": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "is_app_user": {
                    "type": "boolean"
                },
                "is_custom_image": {
                    "type": "boolean"
                },
                "is_restricted": {
                    "type": [
                        "none",
                        "boolean"
                    ]
                },
                "is_ultra_restricted": {
                    "type": [
                        "none",
                        "boolean"
                    ]
                },
                "last_avatar_image_hash": {
                    "type": "string"
                },
                "last_name": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "memberships_count": {
                    "type": "integer"
                },
                "name": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "phone": {
                    "type": "string"
                },
                "pronouns": {
                    "type": "string"
                },
                "real_name": {
                    "type": "string"
                },
                "real_name_normalized": {
                    "type": "string"
                },
                "skype": {
                    "type": "string"
                },
                "status_default_emoji": {
                    "type": "string"
                },
                "status_default_text": {
                    "type": "string"
                },
                "status_default_text_canonical": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "status_emoji": {
                    "type": "string"
                },
                "status_expiration": {
                    "type": "integer"
                },
                "status_text": {
                    "type": "string"
                },
                "status_text_canonical": {
                    "type": [
                        "none",
                        "string"
                    ]
                },
                "team": {
                    "$ref": "#/definitions/defs_workspace_id"
                },
                "title": {
                    "type": "string"
                },
                "updated": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                },
                "username": {
                    "type": [
                        "none",
                        "string"
                    ]
                }
            },
            "required": [
                "real_name",
                "display_name",
                "avatar_hash",
                "real_name_normalized",
                "display_name_normalized",
                "title",
                "phone",
                "skype",
                "status_text",
                "status_emoji",
                "fields"
            ],
            "title": "User profile object",
            "type": "object"
        },
        "objs_user_profile_short": {
            "additionalProperties": false,
            "properties": {
                "avatar_hash": {
                    "type": "string"
                },
                "display_name": {
                    "type": "string"
                },
                "display_name_normalized": {
                    "type": "string"
                },
                "first_name": {
                    "type": [
                        "string"
                    ]
                },
                "image_72": {
                    "type": "string"
                },
                "is_restricted": {
                    "type": "boolean"
                },
                "is_ultra_restricted": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "real_name": {
                    "type": "string"
                },
                "real_name_normalized": {
                    "type": "string"
                },
                "team": {
                    "$ref": "#/definitions/defs_workspace_id"
                }
            },
            "required": [
                "avatar_hash",
                "image_72",
                "first_name",
                "real_name",
                "display_name",
                "team",
                "name",
                "is_restricted",
                "is_ultra_restricted"
            ],
            "type": "object"
        }
    },
    "externalDocs": {
        "description": "Learn more about the Slack Web API",
        "url": "https://api.slack.com/web"
    },
    "host": "slack.com",
    "info": {
        "contact": {
            "name": "Slack developer relations",
            "url": "https://api.slack.com/support"
        },
        "description": "One way to interact with the Slack platform is its HTTP RPC-based Web API, a collection of methods requiring OAuth 2.0-based user, bot, or workspace tokens blessed with related OAuth scopes.",
        "title": "Slack Web API",
        "version": "1.7.0"
    },
    "paths": {
        "/chat.delete": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Deletes a message.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/chat.delete"
                },
                "operationId": "chat_delete",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `chat:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Timestamp of the message to be deleted.",
                        "in": "formData",
                        "name": "ts",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "description": "Channel containing the message to be deleted.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.",
                        "in": "formData",
                        "name": "as_user",
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "channel": "C024BE91L",
                                "ok": true,
                                "ts": "1401383885.000061"
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response of chat.delete method",
                            "properties": {
                                "channel": {
                                    "$ref": "#/definitions/defs_channel"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "ts": {
                                    "$ref": "#/definitions/defs_ts"
                                }
                            },
                            "required": [
                                "ok",
                                "channel",
                                "ts"
                            ],
                            "title": "chat.delete success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "message_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from chat.delete method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "message_not_found",
                                        "channel_not_found",
                                        "cant_delete_message",
                                        "compliance_exports_prevent_deletion",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "chat.delete error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "chat:write:user",
                            "chat:write:bot"
                        ]
                    }
                ],
                "tags": [
                    "chat"
                ]
            }
        },
        "/chat.deleteScheduledMessage": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Deletes a pending scheduled message from the queue.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/chat.deleteScheduledMessage"
                },
                "operationId": "chat_deleteScheduledMessage",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `chat:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Pass true to delete the message as the authed user with `chat:write:user` scope. [Bot users](/bot-users) in this context are considered authed users. If unused or false, the message will be deleted with `chat:write:bot` scope.",
                        "in": "formData",
                        "name": "as_user",
                        "type": "boolean"
                    },
                    {
                        "description": "The channel the scheduled_message is posting to",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "`scheduled_message_id` returned from call to chat.scheduleMessage",
                        "in": "formData",
                        "name": "scheduled_message_id",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from chat.deleteScheduledMessage method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "chat.deleteScheduledMessage schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response if no message is found",
                        "examples": {
                            "application/json": {
                                "error": "invalid_scheduled_message_id",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from chat.deleteScheduledMessage method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "invalid_scheduled_message_id",
                                        "channel_not_found",
                                        "bad_token",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "org_login_required",
                                        "ekm_access_denied",
                                        "missing_scope",
                                        "invalid_arguments",
                                        "invalid_arg_name",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "chat.deleteScheduledMessage error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "chat:write:user",
                            "chat:write:bot"
                        ]
                    }
                ],
                "tags": [
                    "chat"
                ]
            }
        },
        "/chat.meMessage": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Share a me message into a channel.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/chat.meMessage"
                },
                "operationId": "chat_meMessage",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `chat:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Channel to send message to. Can be a public channel, private group or IM channel. Can be an encoded ID, or a name.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Text of the message to send.",
                        "in": "formData",
                        "name": "text",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "channel": "C024BE7LR",
                                "ok": true,
                                "ts": "1417671948.000006"
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from chat.meMessage method",
                            "properties": {
                                "channel": {
                                    "$ref": "#/definitions/defs_channel"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "ts": {
                                    "$ref": "#/definitions/defs_ts"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "chat.meMessage schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from chat.meMessage method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "channel_not_found",
                                        "not_in_channel",
                                        "is_archived",
                                        "msg_too_long",
                                        "no_text",
                                        "rate_limited",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "org_login_required",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "chat.meMessage error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "chat:write:user",
                            "chat:write:bot"
                        ]
                    }
                ],
                "tags": [
                    "chat"
                ]
            }
        },
        "/chat.postEphemeral": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Sends an ephemeral message to a user in a channel.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/chat.postEphemeral"
                },
                "operationId": "chat_postEphemeral",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `chat:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Pass true to post the message as the authed user. Defaults to true if the chat:write:bot scope is not included. Otherwise, defaults to false.",
                        "in": "formData",
                        "name": "as_user",
                        "type": "boolean"
                    },
                    {
                        "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
                        "in": "formData",
                        "name": "attachments",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
                        "in": "formData",
                        "name": "blocks",
                        "type": "string"
                    },
                    {
                        "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.",
                        "in": "formData",
                        "name": "icon_emoji",
                        "type": "string"
                    },
                    {
                        "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
                        "in": "formData",
                        "name": "icon_url",
                        "type": "string"
                    },
                    {
                        "description": "Find and link channel names and usernames.",
                        "in": "formData",
                        "name": "link_names",
                        "type": "boolean"
                    },
                    {
                        "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting).",
                        "in": "formData",
                        "name": "parse",
                        "type": "string"
                    },
                    {
                        "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.",
                        "in": "formData",
                        "name": "text",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Provide another message's `ts` value to post this message in a thread. Avoid using a reply's `ts` value; use its parent's value instead. Ephemeral messages in threads are only shown if there is already an active thread.",
                        "in": "formData",
                        "name": "thread_ts",
                        "type": "string"
                    },
                    {
                        "description": "`id` of the user who will receive the ephemeral message. The user should be in the channel specified by the `channel` argument.",
                        "in": "formData",
                        "name": "user",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
                        "in": "formData",
                        "name": "username",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "message_ts": "1502210682.580145",
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from chat.postEphemeral method",
                            "properties": {
                                "message_ts": {
                                    "$ref": "#/definitions/defs_ts"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok",
                                "message_ts"
                            ],
                            "title": "chat.postEphemeral success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "user_not_in_channel",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from chat.postEphemeral method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "channel_not_found",
                                        "is_archived",
                                        "msg_too_long",
                                        "no_text",
                                        "restricted_action",
                                        "too_many_attachments",
                                        "user_not_in_channel",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "org_login_required",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "chat.postEphemeral error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "chat:write:user",
                            "chat:write:bot"
                        ]
                    }
                ],
                "tags": [
                    "chat"
                ]
            }
        },
        "/chat.postMessage": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Sends a message to a channel.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/chat.postMessage"
                },
                "operationId": "chat_postMessage",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `chat:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.",
                        "in": "formData",
                        "name": "as_user",
                        "type": "string"
                    },
                    {
                        "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
                        "in": "formData",
                        "name": "attachments",
                        "type": "string"
                    },
                    {
                        "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
                        "in": "formData",
                        "name": "blocks",
                        "type": "string"
                    },
                    {
                        "description": "Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.",
                        "in": "formData",
                        "name": "icon_emoji",
                        "type": "string"
                    },
                    {
                        "description": "URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
                        "in": "formData",
                        "name": "icon_url",
                        "type": "string"
                    },
                    {
                        "description": "Find and link channel names and usernames.",
                        "in": "formData",
                        "name": "link_names",
                        "type": "boolean"
                    },
                    {
                        "description": "Disable Slack markup parsing by setting to `false`. Enabled by default.",
                        "in": "formData",
                        "name": "mrkdwn",
                        "type": "boolean"
                    },
                    {
                        "description": "Change how messages are treated. Defaults to `none`. See [below](#formatting).",
                        "in": "formData",
                        "name": "parse",
                        "type": "string"
                    },
                    {
                        "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.",
                        "in": "formData",
                        "name": "reply_broadcast",
                        "type": "boolean"
                    },
                    {
                        "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.",
                        "in": "formData",
                        "name": "text",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.",
                        "in": "formData",
                        "name": "thread_ts",
                        "type": "string"
                    },
                    {
                        "description": "Pass true to enable unfurling of primarily text-based content.",
                        "in": "formData",
                        "name": "unfurl_links",
                        "type": "boolean"
                    },
                    {
                        "description": "Pass false to disable unfurling of media content.",
                        "in": "formData",
                        "name": "unfurl_media",
                        "type": "boolean"
                    },
                    {
                        "description": "Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.",
                        "in": "formData",
                        "name": "username",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "channel": "C1H9RESGL",
                                "message": {
                                    "attachments": [
                                        {
                                            "fallback": "This is an attachment's fallback",
                                            "id": 1,
                                            "text": "This is an attachment"
                                        }
                                    ],
                                    "bot_id": "B19LU7CSY",
                                    "subtype": "bot_message",
                                    "text": "Here's a message for you",
                                    "ts": "1503435956.000247",
                                    "type": "message",
                                    "username": "ecto1"
                                },
                                "ok": true,
                                "ts": "1503435956.000247"
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response of chat.postMessage method",
                            "properties": {
                                "channel": {
                                    "$ref": "#/definitions/defs_channel"
                                },
                                "message": {
                                    "$ref": "#/definitions/objs_message"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "ts": {
                                    "$ref": "#/definitions/defs_ts"
                                }
                            },
                            "required": [
                                "ok",
                                "channel",
                                "ts",
                                "message"
                            ],
                            "title": "chat.postMessage success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response if too many attachments are included",
                        "examples": {
                            "application/json": {
                                "error": "too_many_attachments",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response chat.postMessage method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "channel_not_found",
                                        "not_in_channel",
                                        "is_archived",
                                        "msg_too_long",
                                        "no_text",
                                        "too_many_attachments",
                                        "rate_limited",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "chat.postMessage error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "chat:write:user",
                            "chat:write:bot"
                        ]
                    }
                ],
                "tags": [
                    "chat"
                ]
            }
        },
        "/chat.scheduleMessage": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Schedules a message to be sent to a channel.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/chat.scheduleMessage"
                },
                "operationId": "chat_scheduleMessage",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `chat:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.",
                        "in": "formData",
                        "name": "text",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Unix EPOCH timestamp of time in future to send the message.",
                        "in": "formData",
                        "name": "post_at",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting).",
                        "in": "formData",
                        "name": "parse",
                        "type": "string"
                    },
                    {
                        "description": "Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).",
                        "in": "formData",
                        "name": "as_user",
                        "type": "boolean"
                    },
                    {
                        "description": "Find and link channel names and usernames.",
                        "in": "formData",
                        "name": "link_names",
                        "type": "boolean"
                    },
                    {
                        "description": "A JSON-based array of structured attachments, presented as a URL-encoded string.",
                        "in": "formData",
                        "name": "attachments",
                        "type": "string"
                    },
                    {
                        "description": "A JSON-based array of structured blocks, presented as a URL-encoded string.",
                        "in": "formData",
                        "name": "blocks",
                        "type": "string"
                    },
                    {
                        "description": "Pass true to enable unfurling of primarily text-based content.",
                        "in": "formData",
                        "name": "unfurl_links",
                        "type": "boolean"
                    },
                    {
                        "description": "Pass false to disable unfurling of media content.",
                        "in": "formData",
                        "name": "unfurl_media",
                        "type": "boolean"
                    },
                    {
                        "description": "Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.",
                        "in": "formData",
                        "name": "thread_ts",
                        "type": "number"
                    },
                    {
                        "description": "Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.",
                        "in": "formData",
                        "name": "reply_broadcast",
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "channel": "C1H9RESGL",
                                "message": {
                                    "attachments": [
                                        {
                                            "fallback": "This is an attachment's fallback",
                                            "id": 1,
                                            "text": "This is an attachment"
                                        }
                                    ],
                                    "bot_id": "B19LU7CSY",
                                    "subtype": "bot_message",
                                    "text": "Here's a message for you in the future",
                                    "type": "delayed_message",
                                    "username": "ecto1"
                                },
                                "ok": true,
                                "post_at": "1562180400",
                                "scheduled_message_id": "Q1298393284"
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response of chat.scheduleMessage method",
                            "properties": {
                                "channel": {
                                    "$ref": "#/definitions/defs_channel"
                                },
                                "message": {
                                    "additionalProperties": false,
                                    "properties": {
                                        "bot_id": {
                                            "$ref": "#/definitions/defs_bot_id"
                                        },
                                        "bot_profile": {
                                            "$ref": "#/definitions/objs_bot_profile"
                                        },
                                        "team": {
                                            "$ref": "#/definitions/defs_team"
                                        },
                                        "text": {
                                            "type": "string"
                                        },
                                        "type": {
                                            "type": "string"
                                        },
                                        "user": {
                                            "$ref": "#/definitions/defs_user_id"
                                        },
                                        "username": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "type",
                                        "text",
                                        "bot_id",
                                        "user",
                                        "team"
                                    ],
                                    "type": "object"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "post_at": {
                                    "pattern": "^\\d{10}$",
                                    "type": "integer"
                                },
                                "scheduled_message_id": {
                                    "pattern": "^[Q][A-Z0-9]{8,}$",
                                    "title": "Scheduled Message ID",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "channel",
                                "post_at",
                                "scheduled_message_id",
                                "message"
                            ],
                            "title": "chat.scheduleMessage success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response if the `post_at` is invalid (ex. in the past or too far into the future)",
                        "examples": {
                            "application/json": {
                                "error": "time_in_past",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response chat.scheduleMessage method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "invalid_time",
                                        "time_in_past",
                                        "time_too_far",
                                        "channel_not_found",
                                        "not_in_channel",
                                        "is_archived",
                                        "msg_too_long",
                                        "no_text",
                                        "restricted_action",
                                        "restricted_action_read_only_channel",
                                        "restricted_action_thread_only_channel",
                                        "restricted_action_non_threadable_channel",
                                        "too_many_attachments",
                                        "rate_limited",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "org_login_required",
                                        "ekm_access_denied",
                                        "missing_scope",
                                        "invalid_arguments",
                                        "invalid_arg_name",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "chat.scheduleMessage error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "chat:write:user",
                            "chat:write:bot"
                        ]
                    }
                ],
                "tags": [
                    "chat"
                ]
            }
        },
        "/chat.scheduledMessages.list": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Returns a list of scheduled messages.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/chat.scheduledMessages.list"
                },
                "operationId": "chat_scheduledMessages_list",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `none`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The channel of the scheduled messages",
                        "in": "query",
                        "name": "channel",
                        "type": "string"
                    },
                    {
                        "description": "A UNIX timestamp of the latest value in the time range",
                        "in": "query",
                        "name": "latest",
                        "type": "number"
                    },
                    {
                        "description": "A UNIX timestamp of the oldest value in the time range",
                        "in": "query",
                        "name": "oldest",
                        "type": "number"
                    },
                    {
                        "description": "Maximum number of original entries to return.",
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    },
                    {
                        "description": "For pagination purposes, this is the `cursor` value returned from a previous call to `chat.scheduledmessages.list` indicating where you want to start this call from.",
                        "in": "query",
                        "name": "cursor",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true,
                                "response_metadata": {
                                    "next_cursor": ""
                                },
                                "scheduled_messages": [
                                    {
                                        "channel_id": "C1H9RESGL",
                                        "date_created": 1551891734,
                                        "id": 1298393284,
                                        "post_at": 1551991428,
                                        "text": "Here's a message for you in the future"
                                    }
                                ]
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from chat.scheduledMessages.list method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "response_metadata": {
                                    "additionalProperties": false,
                                    "properties": {
                                        "next_cursor": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "next_cursor"
                                    ],
                                    "type": "object"
                                },
                                "scheduled_messages": {
                                    "items": {
                                        "additionalProperties": false,
                                        "properties": {
                                            "channel_id": {
                                                "$ref": "#/definitions/defs_channel_id"
                                            },
                                            "date_created": {
                                                "pattern": "^\\d{10}$",
                                                "type": "integer"
                                            },
                                            "id": {
                                                "pattern": "^[Q][A-Z0-9]{8,}$",
                                                "type": "string"
                                            },
                                            "post_at": {
                                                "pattern": "^\\d{10}$",
                                                "type": "integer"
                                            },
                                            "text": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "channel_id",
                                            "post_at",
                                            "date_created"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            },
                            "required": [
                                "ok",
                                "scheduled_messages",
                                "response_metadata"
                            ],
                            "title": "chat.scheduledMessages.list schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response if the channel passed is invalid",
                        "examples": {
                            "application/json": {
                                "error": "invalid_channel",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from chat.scheduledMessages.list method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "invalid_channel",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "org_login_required",
                                        "ekm_access_denied",
                                        "missing_scope",
                                        "invalid_arguments",
                                        "invalid_arg_name",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "chat.scheduledMessages.list error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "none"
                        ]
                    }
                ],
                "tags": [
                    "chat.scheduledMessages",
                    "chat"
                ]
            }
        },
        "/chat.update": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Updates a message.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/chat.update"
                },
                "operationId": "chat_update",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `chat:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.",
                        "in": "formData",
                        "name": "as_user",
                        "type": "string"
                    },
                    {
                        "description": "A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field.",
                        "in": "formData",
                        "name": "attachments",
                        "type": "string"
                    },
                    {
                        "description": "A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field.",
                        "in": "formData",
                        "name": "blocks",
                        "type": "string"
                    },
                    {
                        "description": "Channel containing the message to be updated.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`.",
                        "in": "formData",
                        "name": "link_names",
                        "type": "string"
                    },
                    {
                        "description": "Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`.",
                        "in": "formData",
                        "name": "parse",
                        "type": "string"
                    },
                    {
                        "description": "New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`.",
                        "in": "formData",
                        "name": "text",
                        "type": "string"
                    },
                    {
                        "description": "Timestamp of the message to be updated.",
                        "in": "formData",
                        "name": "ts",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "channel": "C024BE91L",
                                "message": {
                                    "text": "Updated text you carefully authored",
                                    "user": "U34567890"
                                },
                                "ok": true,
                                "text": "Updated text you carefully authored",
                                "ts": "1401383885.000061"
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response of chat.update method",
                            "properties": {
                                "channel": {
                                    "type": "string"
                                },
                                "message": {
                                    "properties": {
                                        "attachments": {
                                            "items": {
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "blocks": {
                                            "type": "object"
                                        },
                                        "text": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "text"
                                    ],
                                    "title": "Message object",
                                    "type": "object"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "text": {
                                    "type": "string"
                                },
                                "ts": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "channel",
                                "ts",
                                "text",
                                "message"
                            ],
                            "title": "chat.update success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "cant_update_message",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response chat.update method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "message_not_found",
                                        "cant_update_message",
                                        "channel_not_found",
                                        "edit_window_closed",
                                        "msg_too_long",
                                        "too_many_attachments",
                                        "rate_limited",
                                        "no_text",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "request_timeout",
                                        "invalid_json",
                                        "json_not_object",
                                        "upgrade_required",
                                        "fatal_error",
                                        "is_inactive"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "chat.update error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "chat:write:user",
                            "chat:write:bot"
                        ]
                    }
                ],
                "tags": [
                    "chat"
                ]
            }
        },
        "/conversations.archive": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Archives a conversation.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.archive"
                },
                "operationId": "conversations_archive",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of conversation to archive",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response conversations.archive method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "conversations.archive success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "channel_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.archive method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "missing_scope",
                                        "not_supported",
                                        "channel_not_found",
                                        "already_archived",
                                        "cant_archive_general",
                                        "restricted_action",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "user_is_bot",
                                        "user_is_restricted",
                                        "user_is_ultra_restricted",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "team_added_to_org",
                                        "missing_charset",
                                        "superfluous_charset"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.archive error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write",
                            "groups:write",
                            "im:write",
                            "mpim:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.close": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Closes a direct message or multi-person direct message.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.close"
                },
                "operationId": "conversations_close",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Conversation to close.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response conversations.close method",
                            "properties": {
                                "already_closed": {
                                    "type": "boolean"
                                },
                                "no_op": {
                                    "type": "boolean"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "conversations.close success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "channel_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.close method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "channel_not_found",
                                        "user_does_not_own_channel",
                                        "missing_scope",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.close error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write",
                            "groups:write",
                            "im:write",
                            "mpim:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.create": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Initiates a public or private channel-based conversation",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.create"
                },
                "operationId": "conversations_create",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Name of the public or private channel to create",
                        "in": "formData",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Create a private channel instead of a public one",
                        "in": "formData",
                        "name": "is_private",
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "If successful, the command returns a rather stark [conversation object](/types/conversation)",
                        "examples": {
                            "application/json": {
                                "channel": {
                                    "created": 1504554479,
                                    "creator": "U0123456",
                                    "id": "C0EAQDV4Z",
                                    "is_archived": false,
                                    "is_channel": true,
                                    "is_ext_shared": false,
                                    "is_general": false,
                                    "is_group": false,
                                    "is_im": false,
                                    "is_member": true,
                                    "is_mpim": false,
                                    "is_org_shared": false,
                                    "is_pending_ext_shared": false,
                                    "is_private": false,
                                    "is_shared": false,
                                    "last_read": "0000000000.000000",
                                    "latest": null,
                                    "name": "endeavor",
                                    "name_normalized": "endeavor",
                                    "pending_shared": [],
                                    "previous_names": [],
                                    "priority": 0,
                                    "purpose": {
                                        "creator": "",
                                        "last_set": 0,
                                        "value": ""
                                    },
                                    "topic": {
                                        "creator": "",
                                        "last_set": 0,
                                        "value": ""
                                    },
                                    "unlinked": 0,
                                    "unread_count": 0,
                                    "unread_count_display": 0
                                },
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response conversations.create method",
                            "properties": {
                                "channel": {
                                    "$ref": "#/definitions/objs_conversation"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok",
                                "channel"
                            ],
                            "title": "conversations.create success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response when name already in use",
                        "examples": {
                            "application/json": {
                                "error": "name_taken",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.create method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "detail": {
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "missing_scope",
                                        "name_taken",
                                        "restricted_action",
                                        "no_channel",
                                        "invalid_name_required",
                                        "invalid_name_punctuation",
                                        "invalid_name_maxlength",
                                        "invalid_name_specials",
                                        "invalid_name",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "user_is_bot",
                                        "user_is_restricted",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.create error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write",
                            "groups:write",
                            "im:write",
                            "mpim:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.history": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Fetches a conversation's history of messages and events.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.history"
                },
                "operationId": "conversations_history",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:history`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Conversation ID to fetch history for.",
                        "in": "query",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "End of time range of messages to include in results.",
                        "in": "query",
                        "name": "latest",
                        "type": "number"
                    },
                    {
                        "description": "Start of time range of messages to include in results.",
                        "in": "query",
                        "name": "oldest",
                        "type": "number"
                    },
                    {
                        "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified.",
                        "in": "query",
                        "name": "inclusive",
                        "type": "boolean"
                    },
                    {
                        "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    },
                    {
                        "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
                        "in": "query",
                        "name": "cursor",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response containing a channel's messages",
                        "examples": {
                            "application/json": {
                                "has_more": true,
                                "messages": [
                                    {
                                        "text": "I find you punny and would like to smell your nose letter",
                                        "ts": "1512085950.000216",
                                        "type": "message",
                                        "user": "U012AB3CDE"
                                    },
                                    {
                                        "text": "What, you want to smell my shoes better?",
                                        "ts": "1512104434.000490",
                                        "type": "message",
                                        "user": "U061F7AUR"
                                    }
                                ],
                                "ok": true,
                                "pin_count": 0,
                                "response_metadata": {
                                    "next_cursor": "bmV4dF90czoxNTEyMDg1ODYxMDAwNTQz"
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from conversations.history method",
                            "properties": {
                                "channel_actions_count": {
                                    "type": "integer"
                                },
                                "channel_actions_ts": {
                                    "items": [
                                        {
                                            "type": "integer"
                                        },
                                        {
                                            "type": "none"
                                        }
                                    ]
                                },
                                "has_more": {
                                    "type": "boolean"
                                },
                                "messages": {
                                    "items": {
                                        "$ref": "#/definitions/objs_message"
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "pin_count": {
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "ok",
                                "messages",
                                "has_more",
                                "pin_count",
                                "channel_actions_ts",
                                "channel_actions_count"
                            ],
                            "title": "conversations.history success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "channel_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.history method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "missing_scope",
                                        "channel_not_found",
                                        "invalid_ts_latest",
                                        "invalid_ts_oldest",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.history error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:history",
                            "groups:history",
                            "im:history",
                            "mpim:history"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.info": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Retrieve information about a conversation.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.info"
                },
                "operationId": "conversations_info",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Conversation ID to learn more about",
                        "in": "query",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Set this to `true` to receive the locale for this conversation. Defaults to `false`",
                        "in": "query",
                        "name": "include_locale",
                        "type": "boolean"
                    },
                    {
                        "description": "Set to `true` to include the member count for the specified conversation. Defaults to `false`",
                        "in": "query",
                        "name": "include_num_members",
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response for a public channel. (Also, a response from a private channel and a multi-party IM is very similar to this example.)",
                        "examples": {
                            "application/json": {
                                "channel": {
                                    "created": 1449252889,
                                    "creator": "W012A3BCD",
                                    "id": "C012AB3CD",
                                    "is_archived": false,
                                    "is_channel": true,
                                    "is_ext_shared": false,
                                    "is_general": true,
                                    "is_group": false,
                                    "is_im": false,
                                    "is_member": true,
                                    "is_mpim": false,
                                    "is_org_shared": false,
                                    "is_pending_ext_shared": false,
                                    "is_private": false,
                                    "is_read_only": false,
                                    "is_shared": false,
                                    "last_read": "1502126650.228446",
                                    "locale": "en-US",
                                    "name": "general",
                                    "name_normalized": "general",
                                    "parent_conversation": null,
                                    "pending_shared": [],
                                    "previous_names": [
                                        "specifics",
                                        "abstractions",
                                        "etc"
                                    ],
                                    "purpose": {
                                        "creator": "W012A3BCD",
                                        "last_set": 1449709364,
                                        "value": "This part of the workspace is for fun. Make fun here."
                                    },
                                    "topic": {
                                        "creator": "W012A3BCD",
                                        "last_set": 1449709364,
                                        "value": "For public discussion of generalities"
                                    },
                                    "unlinked": 0
                                },
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response conversations.info",
                            "properties": {
                                "channel": {
                                    "$ref": "#/definitions/objs_conversation"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok",
                                "channel"
                            ],
                            "title": "conversations.info success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response when a channel cannot be found",
                        "examples": {
                            "application/json": {
                                "error": "channel_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.info method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "missing_scope",
                                        "channel_not_found",
                                        "team_added_to_org",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.info error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:read",
                            "groups:read",
                            "im:read",
                            "mpim:read"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.invite": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Invites users to a channel.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.invite"
                },
                "operationId": "conversations_invite",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The ID of the public or private channel to invite user(s) to.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "A comma separated list of user IDs. Up to 1000 users may be listed.",
                        "in": "formData",
                        "name": "users",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response when an invitation is extended",
                        "examples": {
                            "application/json": {
                                "channel": {
                                    "created": 1449252889,
                                    "creator": "W012A3BCD",
                                    "id": "C012AB3CD",
                                    "is_archived": false,
                                    "is_channel": true,
                                    "is_ext_shared": false,
                                    "is_general": true,
                                    "is_group": false,
                                    "is_im": false,
                                    "is_member": true,
                                    "is_mpim": false,
                                    "is_org_shared": false,
                                    "is_pending_ext_shared": false,
                                    "is_private": false,
                                    "is_read_only": false,
                                    "is_shared": false,
                                    "last_read": "1502126650.228446",
                                    "locale": "en-US",
                                    "name": "general",
                                    "name_normalized": "general",
                                    "num_members": 23,
                                    "pending_shared": [],
                                    "previous_names": [
                                        "specifics",
                                        "abstractions",
                                        "etc"
                                    ],
                                    "purpose": {
                                        "creator": "W012A3BCD",
                                        "last_set": 1449709364,
                                        "value": "This part of the workspace is for fun. Make fun here."
                                    },
                                    "topic": {
                                        "creator": "W012A3BCD",
                                        "last_set": 1449709364,
                                        "value": "For public discussion of generalities"
                                    },
                                    "unlinked": 0
                                },
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from conversations.invite method",
                            "properties": {
                                "channel": {
                                    "$ref": "#/definitions/objs_conversation"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok",
                                "channel"
                            ],
                            "title": "conversations.invite error schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response when an invite is attempted on a conversation type that does not support it",
                        "examples": {
                            "application/json": {
                                "error": "method_not_supported_for_channel_type",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.invite method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "missing_scope",
                                        "channel_not_found",
                                        "user_not_found",
                                        "no_user",
                                        "cant_invite_self",
                                        "not_in_channel",
                                        "already_in_channel",
                                        "is_archived",
                                        "cant_invite",
                                        "too_many_users",
                                        "ura_max_channels",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "user_is_bot",
                                        "user_is_restricted",
                                        "user_is_ultra_restricted",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "team_added_to_org",
                                        "missing_charset",
                                        "superfluous_charset"
                                    ],
                                    "type": "string"
                                },
                                "errors": {
                                    "items": {
                                        "additionalProperties": false,
                                        "properties": {
                                            "error": {
                                                "enum": [
                                                    "method_not_supported_for_channel_type",
                                                    "missing_scope",
                                                    "channel_not_found",
                                                    "user_not_found",
                                                    "no_user",
                                                    "cant_invite_self",
                                                    "not_in_channel",
                                                    "already_in_channel",
                                                    "is_archived",
                                                    "cant_invite",
                                                    "too_many_users",
                                                    "ura_max_channels",
                                                    "not_authed",
                                                    "invalid_auth",
                                                    "account_inactive",
                                                    "user_is_bot",
                                                    "user_is_restricted",
                                                    "user_is_ultra_restricted",
                                                    "invalid_arg_name",
                                                    "invalid_array_arg",
                                                    "invalid_charset",
                                                    "invalid_form_data",
                                                    "invalid_post_type",
                                                    "missing_post_type",
                                                    "invalid_json",
                                                    "json_not_object",
                                                    "request_timeout",
                                                    "upgrade_required",
                                                    "team_added_to_org",
                                                    "missing_charset",
                                                    "superfluous_charset"
                                                ],
                                                "type": "string"
                                            },
                                            "ok": {
                                                "$ref": "#/definitions/defs_ok_false"
                                            },
                                            "user": {
                                                "$ref": "#/definitions/defs_user_id"
                                            }
                                        },
                                        "required": [
                                            "ok",
                                            "error"
                                        ],
                                        "type": "object"
                                    },
                                    "minItems": 1,
                                    "title": "errors is returned when an error associates an user",
                                    "type": "array",
                                    "uniqueItems": true
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "conversations.invite error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write",
                            "groups:write",
                            "im:write",
                            "mpim:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.join": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Joins an existing conversation.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.join"
                },
                "operationId": "conversations_join",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `channels:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of conversation to join",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "channel": {
                                    "created": 1449252889,
                                    "creator": "U061F7AUR",
                                    "id": "C061EG9SL",
                                    "is_archived": false,
                                    "is_channel": true,
                                    "is_ext_shared": false,
                                    "is_general": true,
                                    "is_group": false,
                                    "is_im": false,
                                    "is_member": true,
                                    "is_mpim": false,
                                    "is_org_shared": false,
                                    "is_pending_ext_shared": false,
                                    "is_private": false,
                                    "is_shared": false,
                                    "name": "general",
                                    "name_normalized": "general",
                                    "pending_shared": [],
                                    "previous_names": [],
                                    "purpose": {
                                        "creator": "",
                                        "last_set": 0,
                                        "value": "For widget discussion"
                                    },
                                    "topic": {
                                        "creator": "",
                                        "last_set": 0,
                                        "value": "Which widget do you worry about?"
                                    },
                                    "unlinked": 0
                                },
                                "ok": true,
                                "response_metadata": {
                                    "warnings": [
                                        "already_in_channel"
                                    ]
                                },
                                "warning": "already_in_channel"
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from conversations.join method",
                            "properties": {
                                "channel": {
                                    "$ref": "#/definitions/objs_conversation"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "response_metadata": {
                                    "properties": {
                                        "warnings": {
                                            "items": {
                                                "type": "string"
                                            },
                                            "minItems": 1,
                                            "type": "array",
                                            "uniqueItems": true
                                        }
                                    },
                                    "title": "Response metadata",
                                    "type": "object"
                                },
                                "warning": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "channel"
                            ],
                            "title": "conversations.join success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response if the conversation is archived and cannot be joined",
                        "examples": {
                            "application/json": {
                                "error": "is_archived",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.join method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "missing_scope",
                                        "channel_not_found",
                                        "is_archived",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "user_is_bot",
                                        "user_is_restricted",
                                        "user_is_ultra_restricted",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "team_added_to_org",
                                        "missing_charset",
                                        "superfluous_charset"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.join error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.kick": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Removes a user from a conversation.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.kick"
                },
                "operationId": "conversations_kick",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of conversation to remove user from.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "User ID to be removed.",
                        "in": "formData",
                        "name": "user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response conversations.kick method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "conversations.kick success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response when you attempt to kick yourself from a channel",
                        "examples": {
                            "application/json": {
                                "error": "cant_kick_self",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response conversations.kick method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "missing_scope",
                                        "channel_not_found",
                                        "user_not_found",
                                        "cant_kick_self",
                                        "not_in_channel",
                                        "cant_kick_from_general",
                                        "restricted_action",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "user_is_bot",
                                        "user_is_restricted",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.kick error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write",
                            "groups:write",
                            "im:write",
                            "mpim:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.leave": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Leaves a conversation.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.leave"
                },
                "operationId": "conversations_leave",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Conversation to leave",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from conversations.leave method",
                            "properties": {
                                "not_in_channel": {
                                    "enum": [
                                        true
                                    ],
                                    "type": "boolean"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "conversations.leave success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response when attempting to leave a workspace's \"general\" channel",
                        "examples": {
                            "application/json": {
                                "error": "cant_leave_general",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.leave method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "last_member",
                                        "missing_scope",
                                        "channel_not_found",
                                        "is_archived",
                                        "cant_leave_general",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "user_is_bot",
                                        "user_is_restricted",
                                        "user_is_ultra_restricted",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "team_added_to_org",
                                        "missing_charset",
                                        "superfluous_charset"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.leave error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write",
                            "groups:write",
                            "im:write",
                            "mpim:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.list": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Lists all channels in a Slack team.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.list"
                },
                "operationId": "conversations_list",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:read`",
                        "in": "query",
                        "name": "token",
                        "type": "string",
                        "required": true
                    },
                    {
                        "description": "Set to `true` to exclude archived channels from the list",
                        "in": "query",
                        "name": "exclude_archived",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`",
                        "in": "query",
                        "name": "types",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.",
                        "in": "query",
                        "name": "limit",
                        "required": false,
                        "type": "integer"
                    },
                    {
                        "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
                        "in": "query",
                        "name": "cursor",
                        "required": false,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response with only public channels",
                        "examples": {
                            "application/json": {
                                "channels": [
                                    {
                                        "created": 1449252889,
                                        "creator": "U012A3CDE",
                                        "id": "C012AB3CD",
                                        "is_archived": false,
                                        "is_channel": true,
                                        "is_ext_shared": false,
                                        "is_general": true,
                                        "is_group": false,
                                        "is_im": false,
                                        "is_member": true,
                                        "is_mpim": false,
                                        "is_org_shared": false,
                                        "is_pending_ext_shared": false,
                                        "is_private": false,
                                        "is_shared": false,
                                        "name": "general",
                                        "name_normalized": "general",
                                        "num_members": 4,
                                        "pending_shared": [],
                                        "previous_names": [],
                                        "purpose": {
                                            "creator": "",
                                            "last_set": 0,
                                            "value": "This channel is for team-wide communication and announcements. All team members are in this channel."
                                        },
                                        "topic": {
                                            "creator": "",
                                            "last_set": 0,
                                            "value": "Company-wide announcements and work-based matters"
                                        },
                                        "unlinked": 0
                                    },
                                    {
                                        "created": 1449252889,
                                        "creator": "U061F7AUR",
                                        "id": "C061EG9T2",
                                        "is_archived": false,
                                        "is_channel": true,
                                        "is_ext_shared": false,
                                        "is_general": false,
                                        "is_group": false,
                                        "is_im": false,
                                        "is_member": true,
                                        "is_mpim": false,
                                        "is_org_shared": false,
                                        "is_pending_ext_shared": false,
                                        "is_private": false,
                                        "is_shared": false,
                                        "name": "random",
                                        "name_normalized": "random",
                                        "num_members": 4,
                                        "pending_shared": [],
                                        "previous_names": [],
                                        "purpose": {
                                            "creator": "",
                                            "last_set": 0,
                                            "value": "A place for non-work-related flimflam, faffing, hodge-podge or jibber-jabber you'd prefer to keep out of more focused work-related channels."
                                        },
                                        "topic": {
                                            "creator": "",
                                            "last_set": 0,
                                            "value": "Non-work banter and water cooler conversation"
                                        },
                                        "unlinked": 0
                                    }
                                ],
                                "ok": true,
                                "response_metadata": {
                                    "next_cursor": "dGVhbTpDMDYxRkE1UEI="
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from conversations.list method",
                            "properties": {
                                "channels": {
                                    "items": {
                                        "$ref": "#/definitions/objs_conversation"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "response_metadata": {
                                    "additionalProperties": false,
                                    "properties": {
                                        "next_cursor": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "next_cursor"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "ok",
                                "channels"
                            ],
                            "title": "conversations.list success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.list method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "missing_scope",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.list error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:read",
                            "groups:read",
                            "im:read",
                            "mpim:read"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.mark": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Sets the read cursor in a channel.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.mark"
                },
                "operationId": "conversations_mark",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Channel or conversation to set the read cursor for.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Unique identifier of message you want marked as most recently seen in this conversation.",
                        "in": "formData",
                        "name": "ts",
                        "required": true,
                        "type": "number"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response conversations.mark method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "conversations.mark success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.mark method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "missing_scope",
                                        "channel_not_found",
                                        "invalid_timestamp",
                                        "not_in_channel",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "not_allowed_token_type"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.mark error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write",
                            "groups:write",
                            "im:write",
                            "mpim:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.members": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Retrieve members of a conversation.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.members"
                },
                "operationId": "conversations_members",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of the conversation to retrieve members for",
                        "in": "query",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    },
                    {
                        "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
                        "in": "query",
                        "name": "cursor",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical paginated success response",
                        "examples": {
                            "application/json": {
                                "members": [
                                    "U023BECGF",
                                    "U061F7AUR",
                                    "W012A3CDE"
                                ],
                                "ok": true,
                                "response_metadata": {
                                    "next_cursor": "e3VzZXJfaWQ6IFcxMjM0NTY3fQ=="
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response conversations.members method",
                            "properties": {
                                "members": {
                                    "items": {
                                        "$ref": "#/definitions/defs_user_id"
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "response_metadata": {
                                    "additionalProperties": false,
                                    "properties": {
                                        "next_cursor": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "next_cursor"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "ok",
                                "members",
                                "response_metadata"
                            ],
                            "title": "conversations.members success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response when an invalid cursor is provided",
                        "examples": {
                            "application/json": {
                                "error": "invalid_cursor",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response conversations.members method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "channel_not_found",
                                        "invalid_limit",
                                        "invalid_cursor",
                                        "fetch_members_failed",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.members error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:read",
                            "groups:read",
                            "im:read",
                            "mpim:read"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.open": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Opens or resumes a direct message or multi-person direct message.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.open"
                },
                "operationId": "conversations_open",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Resume a conversation by supplying an `im` or `mpim`'s ID. Or provide the `users` field instead.",
                        "in": "formData",
                        "name": "channel",
                        "type": "string"
                    },
                    {
                        "description": "Comma separated lists of users. If only one user is included, this creates a 1:1 DM.  The ordering of the users is preserved whenever a multi-person direct message is returned. Supply a `channel` when not supplying `users`.",
                        "in": "formData",
                        "name": "users",
                        "type": "string"
                    },
                    {
                        "description": "Boolean, indicates you want the full IM channel definition in the response.",
                        "in": "formData",
                        "name": "return_im",
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "channel": {
                                    "id": "D069C7QFK"
                                },
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from conversations.open method when opening channels, ims, mpims",
                            "properties": {
                                "already_open": {
                                    "type": "boolean"
                                },
                                "channel": {
                                    "items": [
                                        {
                                            "$ref": "#/definitions/objs_conversation"
                                        },
                                        {
                                            "additionalProperties": false,
                                            "properties": {
                                                "created": {
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "$ref": "#/definitions/defs_dm_id"
                                                },
                                                "is_im": {
                                                    "type": "boolean"
                                                },
                                                "is_open": {
                                                    "type": "boolean"
                                                },
                                                "last_read": {
                                                    "$ref": "#/definitions/defs_ts"
                                                },
                                                "latest": {
                                                    "$ref": "#/definitions/objs_message"
                                                },
                                                "unread_count": {
                                                    "type": "number"
                                                },
                                                "unread_count_display": {
                                                    "type": "number"
                                                },
                                                "user": {
                                                    "$ref": "#/definitions/defs_user_id"
                                                }
                                            },
                                            "required": [
                                                "id"
                                            ],
                                            "type": "object"
                                        }
                                    ]
                                },
                                "no_op": {
                                    "type": "boolean"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok",
                                "channel"
                            ],
                            "title": "conversations.open success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "channel_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.open method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "user_not_found",
                                        "user_not_visible",
                                        "user_disabled",
                                        "users_list_not_supplied",
                                        "not_enough_users",
                                        "too_many_users",
                                        "invalid_user_combination",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "channel_not_found"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.open error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write",
                            "groups:write",
                            "im:write",
                            "mpim:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.rename": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Renames a conversation.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.rename"
                },
                "operationId": "conversations_rename",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of conversation to rename",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "New name for conversation.",
                        "in": "formData",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "channel": {
                                    "created": 1449252889,
                                    "creator": "W012A3BCD",
                                    "id": "C012AB3CD",
                                    "is_archived": false,
                                    "is_channel": true,
                                    "is_ext_shared": false,
                                    "is_general": true,
                                    "is_group": false,
                                    "is_im": false,
                                    "is_member": true,
                                    "is_mpim": false,
                                    "is_org_shared": false,
                                    "is_pending_ext_shared": false,
                                    "is_private": false,
                                    "is_read_only": false,
                                    "is_shared": false,
                                    "last_read": "1502126650.228446",
                                    "locale": "en-US",
                                    "name": "general",
                                    "name_normalized": "general",
                                    "num_members": 23,
                                    "pending_shared": [],
                                    "previous_names": [
                                        "specifics",
                                        "abstractions",
                                        "etc"
                                    ],
                                    "purpose": {
                                        "creator": "W012A3BCD",
                                        "last_set": 1449709364,
                                        "value": "This part of the workspace is for fun. Make fun here."
                                    },
                                    "topic": {
                                        "creator": "W012A3BCD",
                                        "last_set": 1449709364,
                                        "value": "For public discussion of generalities"
                                    },
                                    "unlinked": 0
                                },
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from conversations.rename method",
                            "properties": {
                                "channel": {
                                    "$ref": "#/definitions/objs_conversation"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok",
                                "channel"
                            ],
                            "title": "conversations.rename success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response when the calling user is not a member of the conversation",
                        "examples": {
                            "application/json": {
                                "error": "not_in_channel",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.rename method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "user_is_restricted",
                                        "method_not_supported_for_channel_type",
                                        "missing_scope",
                                        "channel_not_found",
                                        "not_in_channel",
                                        "not_authorized",
                                        "invalid_name",
                                        "name_taken",
                                        "invalid_name_required",
                                        "invalid_name_punctuation",
                                        "invalid_name_maxlength",
                                        "invalid_name_specials",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.rename error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write",
                            "groups:write",
                            "im:write",
                            "mpim:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.replies": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Retrieve a thread of messages posted to a conversation",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.replies"
                },
                "operationId": "conversations_replies",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:history`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Conversation ID to fetch thread from.",
                        "in": "query",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Unique identifier of a thread's parent message. `ts` must be the timestamp of an existing message with 0 or more replies. If there are no replies then just the single message referenced by `ts` will return - it is just an ordinary, unthreaded message.",
                        "in": "query",
                        "name": "ts",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "description": "End of time range of messages to include in results.",
                        "in": "query",
                        "name": "latest",
                        "type": "number"
                    },
                    {
                        "description": "Start of time range of messages to include in results.",
                        "in": "query",
                        "name": "oldest",
                        "type": "number"
                    },
                    {
                        "description": "Include messages with latest or oldest timestamp in results only when either timestamp is specified.",
                        "in": "query",
                        "name": "inclusive",
                        "type": "boolean"
                    },
                    {
                        "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.",
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    },
                    {
                        "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
                        "in": "query",
                        "name": "cursor",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "has_more": true,
                                "messages": [
                                    {
                                        "last_read": "1484678597.521003",
                                        "reply_count": 3,
                                        "subscribed": true,
                                        "text": "island",
                                        "thread_ts": "1482960137.003543",
                                        "ts": "1482960137.003543",
                                        "type": "message",
                                        "unread_count": 0,
                                        "user": "U061F7AUR"
                                    },
                                    {
                                        "parent_user_id": "U061F7AUR",
                                        "text": "one island",
                                        "thread_ts": "1482960137.003543",
                                        "ts": "1483037603.017503",
                                        "type": "message",
                                        "user": "U061F7AUR"
                                    },
                                    {
                                        "parent_user_id": "U061F7AUR",
                                        "text": "two island",
                                        "thread_ts": "1482960137.003543",
                                        "ts": "1483051909.018632",
                                        "type": "message",
                                        "user": "U061F7AUR"
                                    },
                                    {
                                        "parent_user_id": "U061F7AUR",
                                        "text": "three for the land",
                                        "thread_ts": "1482960137.003543",
                                        "ts": "1483125339.020269",
                                        "type": "message",
                                        "user": "U061F7AUR"
                                    }
                                ],
                                "ok": true,
                                "response_metadata": {
                                    "next_cursor": "bmV4dF90czoxNDg0Njc4MjkwNTE3MDkx"
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from conversations.replies method",
                            "properties": {
                                "has_more": {
                                    "type": "boolean"
                                },
                                "messages": {
                                    "items": {
                                        "items": [
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "last_read": {
                                                        "$ref": "#/definitions/defs_ts"
                                                    },
                                                    "latest_reply": {
                                                        "$ref": "#/definitions/defs_ts"
                                                    },
                                                    "reply_count": {
                                                        "type": "integer"
                                                    },
                                                    "reply_users": {
                                                        "items": {
                                                            "$ref": "#/definitions/defs_user_id"
                                                        },
                                                        "type": "array",
                                                        "uniqueItems": true
                                                    },
                                                    "reply_users_count": {
                                                        "type": "integer"
                                                    },
                                                    "source_team": {
                                                        "$ref": "#/definitions/defs_team"
                                                    },
                                                    "subscribed": {
                                                        "type": "boolean"
                                                    },
                                                    "team": {
                                                        "$ref": "#/definitions/defs_team"
                                                    },
                                                    "text": {
                                                        "type": "string"
                                                    },
                                                    "thread_ts": {
                                                        "$ref": "#/definitions/defs_ts"
                                                    },
                                                    "ts": {
                                                        "$ref": "#/definitions/defs_ts"
                                                    },
                                                    "type": {
                                                        "type": "string"
                                                    },
                                                    "unread_count": {
                                                        "type": "integer"
                                                    },
                                                    "user": {
                                                        "$ref": "#/definitions/defs_user_id"
                                                    },
                                                    "user_profile": {
                                                        "$ref": "#/definitions/objs_user_profile_short"
                                                    },
                                                    "user_team": {
                                                        "$ref": "#/definitions/defs_team"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "user",
                                                    "text",
                                                    "thread_ts",
                                                    "reply_count",
                                                    "subscribed",
                                                    "ts"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "is_starred": {
                                                        "type": "boolean"
                                                    },
                                                    "parent_user_id": {
                                                        "$ref": "#/definitions/defs_user_id"
                                                    },
                                                    "source_team": {
                                                        "$ref": "#/definitions/defs_team"
                                                    },
                                                    "team": {
                                                        "$ref": "#/definitions/defs_team"
                                                    },
                                                    "text": {
                                                        "type": "string"
                                                    },
                                                    "thread_ts": {
                                                        "$ref": "#/definitions/defs_ts"
                                                    },
                                                    "ts": {
                                                        "$ref": "#/definitions/defs_ts"
                                                    },
                                                    "type": {
                                                        "type": "string"
                                                    },
                                                    "user": {
                                                        "$ref": "#/definitions/defs_user_id"
                                                    },
                                                    "user_profile": {
                                                        "$ref": "#/definitions/objs_user_profile_short"
                                                    },
                                                    "user_team": {
                                                        "$ref": "#/definitions/defs_team"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "user",
                                                    "text",
                                                    "thread_ts",
                                                    "parent_user_id",
                                                    "ts"
                                                ],
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok",
                                "messages"
                            ],
                            "title": "conversations.replies success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "thread_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.replies method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "missing_scope",
                                        "channel_not_found",
                                        "thread_not_found",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.replies error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:history",
                            "groups:history",
                            "im:history",
                            "mpim:history"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/conversations.unarchive": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Reverses conversation archival.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/conversations.unarchive"
                },
                "operationId": "conversations_unarchive",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "ID of conversation to unarchive",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from conversations.unarchive method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "conversations.unarchive success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "channel_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from conversations.unarchive method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "missing_scope",
                                        "channel_not_found",
                                        "not_archived",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "user_is_bot",
                                        "user_is_restricted",
                                        "user_is_ultra_restricted",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "team_added_to_org",
                                        "missing_charset",
                                        "superfluous_charset"
                                    ],
                                    "type": "string"
                                },
                                "needed": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                },
                                "provided": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "conversations.unarchive error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:write",
                            "groups:write",
                            "im:write",
                            "mpim:write"
                        ]
                    }
                ],
                "tags": [
                    "conversations"
                ]
            }
        },
        "/emoji.list": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Lists custom emoji for a team.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/emoji.list"
                },
                "operationId": "emoji_list",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `emoji:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": true,
                            "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "Default success template",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": true,
                            "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "Default error template",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "emoji:read"
                        ]
                    }
                ],
                "tags": [
                    "emoji"
                ]
            }
        },
        "/pins.add": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Pins an item to a channel.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/pins.add"
                },
                "operationId": "pins_add",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `pins:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Channel to pin the item in.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Timestamp of the message to pin.",
                        "in": "formData",
                        "name": "timestamp",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from pins.add method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "pins.add schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "channel_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from pins.add method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "bad_timestamp",
                                        "message_not_found",
                                        "channel_not_found",
                                        "no_item_specified",
                                        "already_pinned",
                                        "permission_denied",
                                        "file_not_shared",
                                        "not_pinnable",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "pins.add error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "pins:write"
                        ]
                    }
                ],
                "tags": [
                    "pins"
                ]
            }
        },
        "/pins.list": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Lists items pinned to a channel.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/pins.list"
                },
                "operationId": "pins_list",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `pins:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Channel to get pinned items for.",
                        "in": "query",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "items": [
                                    {
                                        "channel": "C2U86NC6H",
                                        "created": 1508881078,
                                        "created_by": "U2U85N1RZ",
                                        "message": {
                                            "permalink": "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508197641000151",
                                            "pinned_to": [
                                                "C2U86NC6H"
                                            ],
                                            "text": "What is the meaning of life?",
                                            "ts": "1508197641.000151",
                                            "type": "message",
                                            "user": "U2U85N1RZ"
                                        },
                                        "type": "message"
                                    },
                                    {
                                        "channel": "C2U86NC6H",
                                        "created": 1508880991,
                                        "created_by": "U2U85N1RZ",
                                        "message": {
                                            "permalink": "https://hitchhikers.slack.com/archives/C2U86NC6H/p1508284197000015",
                                            "pinned_to": [
                                                "C2U86NC6H"
                                            ],
                                            "text": "The meaning of life, the universe, and everything is 42.",
                                            "ts": "1503289197.000015",
                                            "type": "message",
                                            "user": "U2U85N1RZ"
                                        },
                                        "type": "message"
                                    }
                                ],
                                "ok": true
                            }
                        },
                        "schema": {
                            "description": "Schema for successful response from pins.list method",
                            "items": [
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "items": {
                                            "items": [
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "created": {
                                                            "type": "integer"
                                                        },
                                                        "created_by": {
                                                            "$ref": "#/definitions/defs_user_id"
                                                        },
                                                        "file": {
                                                            "$ref": "#/definitions/objs_file"
                                                        },
                                                        "type": {
                                                            "enum": [
                                                                "file"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "title": "File Pin",
                                                    "type": "object"
                                                },
                                                {
                                                    "additionalProperties": false,
                                                    "properties": {
                                                        "channel": {
                                                            "$ref": "#/definitions/defs_channel"
                                                        },
                                                        "created": {
                                                            "type": "integer"
                                                        },
                                                        "created_by": {
                                                            "$ref": "#/definitions/defs_user_id"
                                                        },
                                                        "message": {
                                                            "$ref": "#/definitions/objs_message"
                                                        },
                                                        "type": {
                                                            "enum": [
                                                                "message"
                                                            ],
                                                            "type": "string"
                                                        }
                                                    },
                                                    "title": "Message Pin",
                                                    "type": "object"
                                                }
                                            ],
                                            "type": "array",
                                            "uniqueItems": true
                                        },
                                        "ok": {
                                            "$ref": "#/definitions/defs_ok_true"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "items"
                                    ],
                                    "type": "object"
                                },
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "count": {
                                            "type": "integer"
                                        },
                                        "ok": {
                                            "$ref": "#/definitions/defs_ok_true"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "count"
                                    ],
                                    "type": "object"
                                }
                            ],
                            "title": "pins.list success schema"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from pins.list method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "channel_not_found",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "pins.list error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "pins:read"
                        ]
                    }
                ],
                "tags": [
                    "pins"
                ]
            }
        },
        "/pins.remove": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Un-pins an item from a channel.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/pins.remove"
                },
                "operationId": "pins_remove",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `pins:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Channel where the item is pinned to.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Timestamp of the message to un-pin.",
                        "in": "formData",
                        "name": "timestamp",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from pins.remove method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "pins.remove schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "no_pin",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from pins.remove method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "bad_timestamp",
                                        "file_not_found",
                                        "file_comment_not_found",
                                        "message_not_found",
                                        "no_item_specified",
                                        "not_pinned",
                                        "permission_denied",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_typ",
                                        "missing_post_typ",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeou",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "pins.remove error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "pins:write"
                        ]
                    }
                ],
                "tags": [
                    "pins"
                ]
            }
        },
        "/reactions.add": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Adds a reaction to an item.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/reactions.add"
                },
                "operationId": "reactions_add",
                "parameters": [
                    {
                        "description": "Channel where the message to add reaction to was posted.",
                        "in": "formData",
                        "name": "channel",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Reaction (emoji) name.",
                        "in": "formData",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Timestamp of the message to add reaction to.",
                        "in": "formData",
                        "name": "timestamp",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Authentication token. Requires scope: `reactions:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from reactions.add method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "reactions.add schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "already_reacted",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from reactions.add method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "bad_timestamp",
                                        "message_not_found",
                                        "no_item_specified",
                                        "invalid_name",
                                        "already_reacted",
                                        "too_many_emoji",
                                        "too_many_reactions",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "reactions.add error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "reactions:write"
                        ]
                    }
                ],
                "tags": [
                    "reactions"
                ]
            }
        },
        "/reactions.get": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Gets reactions for an item.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/reactions.get"
                },
                "operationId": "reactions_get",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `reactions:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Channel where the message to get reactions for was posted.",
                        "in": "query",
                        "name": "channel",
                        "type": "string"
                    },
                    {
                        "description": "File to get reactions for.",
                        "in": "query",
                        "name": "file",
                        "type": "string"
                    },
                    {
                        "description": "File comment to get reactions for.",
                        "in": "query",
                        "name": "file_comment",
                        "type": "string"
                    },
                    {
                        "description": "If true always return the complete reaction list.",
                        "in": "query",
                        "name": "full",
                        "type": "boolean"
                    },
                    {
                        "description": "Timestamp of the message to get reactions for.",
                        "in": "query",
                        "name": "timestamp",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "file": {
                                    "channels": [
                                        "C2U7V2YA2"
                                    ],
                                    "comments_count": 1,
                                    "created": 1507850315,
                                    "groups": [],
                                    "id": "F7H0D7ZA4",
                                    "ims": [],
                                    "name": "computer.gif",
                                    "reactions": [
                                        {
                                            "count": 1,
                                            "name": "stuck_out_tongue_winking_eye",
                                            "users": [
                                                "U2U85N1RV"
                                            ]
                                        }
                                    ],
                                    "timestamp": 1507850315,
                                    "title": "computer.gif",
                                    "user": "U2U85N1RV"
                                },
                                "ok": true,
                                "type": "file"
                            }
                        },
                        "schema": {
                            "description": "Schema for successful response from reactions.get method",
                            "items": [
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "channel": {
                                            "$ref": "#/definitions/defs_channel"
                                        },
                                        "message": {
                                            "$ref": "#/definitions/objs_message"
                                        },
                                        "ok": {
                                            "$ref": "#/definitions/defs_ok_true"
                                        },
                                        "type": {
                                            "enum": [
                                                "message"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "type",
                                        "channel",
                                        "message"
                                    ]
                                },
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "file": {
                                            "$ref": "#/definitions/objs_file"
                                        },
                                        "ok": {
                                            "$ref": "#/definitions/defs_ok_true"
                                        },
                                        "type": {
                                            "enum": [
                                                "file"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "type",
                                        "file"
                                    ]
                                },
                                {
                                    "additionalProperties": false,
                                    "properties": {
                                        "comment": {
                                            "$ref": "#/definitions/objs_comment"
                                        },
                                        "file": {
                                            "$ref": "#/definitions/objs_file"
                                        },
                                        "ok": {
                                            "$ref": "#/definitions/defs_ok_true"
                                        },
                                        "type": {
                                            "enum": [
                                                "file_comment"
                                            ],
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "ok",
                                        "type",
                                        "file",
                                        "comment"
                                    ]
                                }
                            ],
                            "title": "reactions.get success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from reactions.get method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "bad_timestamp",
                                        "file_not_found",
                                        "file_comment_not_found",
                                        "message_not_found",
                                        "no_item_specified",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "no_permission",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "reactions.get error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "reactions:read"
                        ]
                    }
                ],
                "tags": [
                    "reactions"
                ]
            }
        },
        "/reactions.list": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Lists reactions made by a user.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/reactions.list"
                },
                "operationId": "reactions_list",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `reactions:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Show reactions made by this user. Defaults to the authed user.",
                        "in": "query",
                        "name": "user",
                        "type": "string"
                    },
                    {
                        "description": "If true always return the complete reaction list.",
                        "in": "query",
                        "name": "full",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "count",
                        "type": "integer"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.",
                        "in": "query",
                        "name": "cursor",
                        "type": "string"
                    },
                    {
                        "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "items": [
                                    {
                                        "channel": "C3UKJTQAC",
                                        "message": {
                                            "bot_id": "B4VLRLMKJ",
                                            "reactions": [
                                                {
                                                    "count": 1,
                                                    "name": "robot_face",
                                                    "users": [
                                                        "U2U85N1RV"
                                                    ]
                                                }
                                            ],
                                            "subtype": "bot_message",
                                            "text": "Hello from Python! :tada:",
                                            "ts": "1507849573.000090",
                                            "username": "Shipit Notifications"
                                        },
                                        "type": "message"
                                    },
                                    {
                                        "comment": {
                                            "comment": "This is a file comment",
                                            "created": 1508286096,
                                            "id": "Fc7LP08P1U",
                                            "reactions": [
                                                {
                                                    "count": 1,
                                                    "name": "white_check_mark",
                                                    "users": [
                                                        "U2U85N1RV"
                                                    ]
                                                }
                                            ],
                                            "timestamp": 1508286096,
                                            "type": "file_comment",
                                            "user": "U2U85N1RV"
                                        },
                                        "file": {
                                            "channels": [
                                                "C2U7V2YA2"
                                            ],
                                            "comments_count": 1,
                                            "created": 1507850315,
                                            "reactions": [
                                                {
                                                    "count": 1,
                                                    "name": "stuck_out_tongue_winking_eye",
                                                    "users": [
                                                        "U2U85N1RV"
                                                    ]
                                                }
                                            ],
                                            "title": "computer.gif",
                                            "user": "U2U85N1RV",
                                            "username": ""
                                        }
                                    },
                                    {
                                        "file": {
                                            "channels": [
                                                "C2U7V2YA2"
                                            ],
                                            "comments_count": 1,
                                            "created": 1507850315,
                                            "id": "F7H0D7ZA4",
                                            "name": "computer.gif",
                                            "reactions": [
                                                {
                                                    "count": 1,
                                                    "name": "stuck_out_tongue_winking_eye",
                                                    "users": [
                                                        "U2U85N1RV"
                                                    ]
                                                }
                                            ],
                                            "size": 1639034,
                                            "title": "computer.gif",
                                            "user": "U2U85N1RV",
                                            "username": ""
                                        },
                                        "type": "file"
                                    }
                                ],
                                "ok": true,
                                "response_metadata": {
                                    "next_cursor": "dGVhbTpDMUg5UkVTR0w="
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from reactions.list method",
                            "properties": {
                                "items": {
                                    "items": {
                                        "items": [
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "channel": {
                                                        "$ref": "#/definitions/defs_channel"
                                                    },
                                                    "message": {
                                                        "$ref": "#/definitions/objs_message"
                                                    },
                                                    "type": {
                                                        "enum": [
                                                            "message"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "channel",
                                                    "message"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "file": {
                                                        "$ref": "#/definitions/objs_file"
                                                    },
                                                    "type": {
                                                        "enum": [
                                                            "file"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "file"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "comment": {
                                                        "$ref": "#/definitions/objs_comment"
                                                    },
                                                    "file": {
                                                        "$ref": "#/definitions/objs_file"
                                                    },
                                                    "type": {
                                                        "enum": [
                                                            "file_comment"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "file",
                                                    "comment"
                                                ],
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "paging": {
                                    "$ref": "#/definitions/objs_paging"
                                },
                                "response_metadata": {
                                    "$ref": "#/definitions/objs_response_metadata"
                                }
                            },
                            "required": [
                                "ok",
                                "items"
                            ],
                            "title": "reactions.list schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from reactions.list method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "user_not_found",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactiv",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "reactions.list error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "reactions:read"
                        ]
                    }
                ],
                "tags": [
                    "reactions"
                ]
            }
        },
        "/reactions.remove": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Removes a reaction from an item.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/reactions.remove"
                },
                "operationId": "reactions_remove",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `reactions:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Reaction (emoji) name.",
                        "in": "formData",
                        "name": "name",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "File to remove reaction from.",
                        "in": "formData",
                        "name": "file",
                        "type": "string"
                    },
                    {
                        "description": "File comment to remove reaction from.",
                        "in": "formData",
                        "name": "file_comment",
                        "type": "string"
                    },
                    {
                        "description": "Channel where the message to remove reaction from was posted.",
                        "in": "formData",
                        "name": "channel",
                        "type": "string"
                    },
                    {
                        "description": "Timestamp of the message to remove reaction from.",
                        "in": "formData",
                        "name": "timestamp",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from reactions.remove method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "reactions.remove schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "no_reaction",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from reactions.remove method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "bad_timestamp",
                                        "file_not_found",
                                        "file_comment_not_found",
                                        "message_not_found",
                                        "no_item_specified",
                                        "invalid_name",
                                        "no_reaction",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "reactions.remove error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "reactions:write"
                        ]
                    }
                ],
                "tags": [
                    "reactions"
                ]
            }
        },
        "/search.messages": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Searches for messages matching a query.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/search.messages"
                },
                "operationId": "search_messages",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `search:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Pass the number of results you want per \"page\". Maximum of `100`.",
                        "in": "query",
                        "name": "count",
                        "type": "integer"
                    },
                    {
                        "description": "Pass a value of `true` to enable query highlight markers (see below).",
                        "in": "query",
                        "name": "highlight",
                        "type": "boolean"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "type": "integer"
                    },
                    {
                        "description": "Search query.",
                        "in": "query",
                        "name": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Return matches sorted by either `score` or `timestamp`.",
                        "in": "query",
                        "name": "sort",
                        "type": "string"
                    },
                    {
                        "description": "Change sort direction to ascending (`asc`) or descending (`desc`).",
                        "in": "query",
                        "name": "sort_dir",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "messages": {
                                    "matches": [
                                        {
                                            "channel": {
                                                "id": "C12345678",
                                                "is_ext_shared": false,
                                                "is_mpim": false,
                                                "is_org_shared": false,
                                                "is_pending_ext_shared": false,
                                                "is_private": false,
                                                "is_shared": false,
                                                "name": "general",
                                                "pending_shared": []
                                            },
                                            "iid": "cb64bdaa-c1e8-4631-8a91-0f78080113e9",
                                            "permalink": "https://hitchhikers.slack.com/archives/C12345678/p1508284197000015",
                                            "team": "T12345678",
                                            "text": "The meaning of life the universe and everything is 42.",
                                            "ts": "1508284197.000015",
                                            "type": "message",
                                            "user": "U2U85N1RV",
                                            "username": "roach"
                                        },
                                        {
                                            "channel": {
                                                "id": "C12345678",
                                                "is_ext_shared": false,
                                                "is_mpim": false,
                                                "is_org_shared": false,
                                                "is_pending_ext_shared": false,
                                                "is_private": false,
                                                "is_shared": false,
                                                "name": "random",
                                                "pending_shared": []
                                            },
                                            "iid": "9a00d3c9-bd2d-45b0-988b-6cff99ae2a90",
                                            "permalink": "https://hitchhikers.slack.com/archives/C12345678/p1508795665000236",
                                            "team": "T12345678",
                                            "text": "The meaning of life the universe and everything is 101010",
                                            "ts": "1508795665.000236",
                                            "type": "message",
                                            "user": "",
                                            "username": "robot overlord"
                                        }
                                    ],
                                    "pagination": {
                                        "first": 1,
                                        "last": 2,
                                        "page": 1,
                                        "page_count": 1,
                                        "per_page": 20,
                                        "total_count": 2
                                    },
                                    "paging": {
                                        "count": 20,
                                        "page": 1,
                                        "pages": 1,
                                        "total": 2
                                    },
                                    "total": 2
                                },
                                "ok": true,
                                "query": "The meaning of life the universe and everything"
                            }
                        },
                        "schema": {
                            "additionalProperties": true,
                            "description": "This method either only returns a brief _OK_ response or a verbose schema is not available for this method.",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "Default success template",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "No query passed",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": true,
                            "description": "This method either only returns a brief _not OK_ response or a verbose schema is not available for this method.",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "Default error template",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "search:read"
                        ]
                    }
                ],
                "tags": [
                    "search"
                ]
            }
        },
        "/stars.add": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Adds a star to an item.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/stars.add"
                },
                "operationId": "stars_add",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `stars:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Channel to add star to, or channel where the message to add star to was posted (used with `timestamp`).",
                        "in": "formData",
                        "name": "channel",
                        "type": "string"
                    },
                    {
                        "description": "File to add star to.",
                        "in": "formData",
                        "name": "file",
                        "type": "string"
                    },
                    {
                        "description": "File comment to add star to.",
                        "in": "formData",
                        "name": "file_comment",
                        "type": "string"
                    },
                    {
                        "description": "Timestamp of the message to add star to.",
                        "in": "formData",
                        "name": "timestamp",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from stars.add method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "stars.add schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from stars.add method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "bad_timestamp",
                                        "message_not_found",
                                        "file_not_found",
                                        "file_comment_not_found",
                                        "channel_not_found",
                                        "no_item_specified",
                                        "already_starred",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "org_login_required",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "stars.add error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "stars:write"
                        ]
                    }
                ],
                "tags": [
                    "stars"
                ]
            }
        },
        "/stars.list": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Lists stars for a user.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/stars.list"
                },
                "operationId": "stars_list",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `stars:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "count",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "type": "string"
                    },
                    {
                        "description": "Parameter for pagination. Set `cursor` equal to the `next_cursor` attribute returned by the previous request's `response_metadata`. This parameter is optional, but pagination is mandatory: the default value simply fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more details.",
                        "in": "query",
                        "name": "cursor",
                        "type": "string"
                    },
                    {
                        "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached.",
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from stars.list method",
                            "properties": {
                                "items": {
                                    "items": {
                                        "items": [
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "channel": {
                                                        "$ref": "#/definitions/defs_channel"
                                                    },
                                                    "date_create": {
                                                        "type": "integer"
                                                    },
                                                    "message": {
                                                        "$ref": "#/definitions/objs_message"
                                                    },
                                                    "type": {
                                                        "enum": [
                                                            "message"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "channel",
                                                    "message",
                                                    "date_create"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "date_create": {
                                                        "type": "integer"
                                                    },
                                                    "file": {
                                                        "$ref": "#/definitions/objs_file"
                                                    },
                                                    "type": {
                                                        "enum": [
                                                            "file"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "file",
                                                    "date_create"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "comment": {
                                                        "$ref": "#/definitions/objs_comment"
                                                    },
                                                    "date_create": {
                                                        "type": "integer"
                                                    },
                                                    "file": {
                                                        "$ref": "#/definitions/objs_file"
                                                    },
                                                    "type": {
                                                        "enum": [
                                                            "file_comment"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "file",
                                                    "comment",
                                                    "date_create"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "channel": {
                                                        "$ref": "#/definitions/defs_channel"
                                                    },
                                                    "date_create": {
                                                        "type": "integer"
                                                    },
                                                    "type": {
                                                        "enum": [
                                                            "channel"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "channel",
                                                    "date_create"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "channel": {
                                                        "$ref": "#/definitions/defs_dm_id"
                                                    },
                                                    "date_create": {
                                                        "type": "integer"
                                                    },
                                                    "type": {
                                                        "enum": [
                                                            "im"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "channel",
                                                    "date_create"
                                                ],
                                                "type": "object"
                                            },
                                            {
                                                "additionalProperties": false,
                                                "properties": {
                                                    "channel": {
                                                        "$ref": "#/definitions/defs_group_id"
                                                    },
                                                    "date_create": {
                                                        "type": "integer"
                                                    },
                                                    "type": {
                                                        "enum": [
                                                            "group"
                                                        ],
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "channel",
                                                    "date_create"
                                                ],
                                                "type": "object"
                                            }
                                        ]
                                    },
                                    "type": "array"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "paging": {
                                    "$ref": "#/definitions/objs_paging"
                                }
                            },
                            "required": [
                                "ok",
                                "items"
                            ],
                            "title": "stars.list schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from stars.list method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "org_login_required",
                                        "user_is_bot",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "stars.list error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "stars:read"
                        ]
                    }
                ],
                "tags": [
                    "stars"
                ]
            }
        },
        "/stars.remove": {
            "post": {
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "application/json"
                ],
                "description": "Removes a star from an item.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/stars.remove"
                },
                "operationId": "stars_remove",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `stars:write`",
                        "in": "header",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Channel to remove star from, or channel where the message to remove star from was posted (used with `timestamp`).",
                        "in": "formData",
                        "name": "channel",
                        "type": "string"
                    },
                    {
                        "description": "File to remove star from.",
                        "in": "formData",
                        "name": "file",
                        "type": "string"
                    },
                    {
                        "description": "File comment to remove star from.",
                        "in": "formData",
                        "name": "file_comment",
                        "type": "string"
                    },
                    {
                        "description": "Timestamp of the message to remove star from.",
                        "in": "formData",
                        "name": "timestamp",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from stars.remove method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                }
                            },
                            "required": [
                                "ok"
                            ],
                            "title": "stars.remove schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from stars.remove method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "bad_timestamp",
                                        "message_not_found",
                                        "file_not_found",
                                        "file_comment_not_found",
                                        "channel_not_found",
                                        "no_item_specified",
                                        "not_starred",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "org_login_required",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "stars.remove error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "stars:write"
                        ]
                    }
                ],
                "tags": [
                    "stars"
                ]
            }
        },
        "/team.info": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Gets information about the current team.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/team.info"
                },
                "operationId": "team_info",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `team:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Team to get info on, if omitted, will return information about the current team. Will only return team that the authenticated token is allowed to see through external shared channels",
                        "in": "query",
                        "name": "team",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true,
                                "team": {
                                    "domain": "example",
                                    "email_domain": "example.com",
                                    "enterprise_id": "E1234A12AB",
                                    "enterprise_name": "Umbrella Corporation",
                                    "icon": {
                                        "image_102": "https://...",
                                        "image_132": "https://...",
                                        "image_34": "https://...",
                                        "image_44": "https://...",
                                        "image_68": "https://...",
                                        "image_88": "https://...",
                                        "image_default": true
                                    },
                                    "id": "T12345",
                                    "name": "My Team"
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from team.info method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "team": {
                                    "$ref": "#/definitions/objs_team"
                                }
                            },
                            "required": [
                                "ok",
                                "team"
                            ],
                            "title": "team.info schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from team.info method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "team.info error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "team:read"
                        ]
                    }
                ],
                "tags": [
                    "team"
                ]
            }
        },
        "/users.conversations": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "List conversations the calling user may access.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/users.conversations"
                },
                "operationId": "users_conversations",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `conversations:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Browse conversations by a specific user ID's membership. Non-public channels are restricted to those where the calling user shares membership.",
                        "in": "query",
                        "name": "user",
                        "type": "string"
                    },
                    {
                        "description": "Mix and match channel types by providing a comma-separated list of any combination of `public_channel`, `private_channel`, `mpim`, `im`",
                        "in": "query",
                        "name": "types",
                        "type": "string"
                    },
                    {
                        "description": "Set to `true` to exclude archived channels from the list",
                        "in": "query",
                        "name": "exclude_archived",
                        "type": "boolean"
                    },
                    {
                        "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the list hasn't been reached. Must be an integer no larger than 1000.",
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    },
                    {
                        "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
                        "in": "query",
                        "name": "cursor",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response with only public channels. Note how `num_members` and `is_member` are not returned like typical `conversations` objects.",
                        "examples": {
                            "application/json": {
                                "channels": [
                                    {
                                        "created": 1449252889,
                                        "creator": "U012A3CDE",
                                        "id": "C012AB3CD",
                                        "is_archived": false,
                                        "is_channel": true,
                                        "is_ext_shared": false,
                                        "is_general": true,
                                        "is_group": false,
                                        "is_im": false,
                                        "is_mpim": false,
                                        "is_org_shared": false,
                                        "is_pending_ext_shared": false,
                                        "is_private": false,
                                        "is_shared": false,
                                        "name": "general",
                                        "name_normalized": "general",
                                        "pending_shared": [],
                                        "previous_names": [],
                                        "purpose": {
                                            "creator": "",
                                            "last_set": 0,
                                            "value": "This channel is for team-wide communication and announcements. All team members are in this channel."
                                        },
                                        "topic": {
                                            "creator": "",
                                            "last_set": 0,
                                            "value": "Company-wide announcements and work-based matters"
                                        },
                                        "unlinked": 0
                                    },
                                    {
                                        "created": 1449252889,
                                        "creator": "U061F7AUR",
                                        "id": "C061EG9T2",
                                        "is_archived": false,
                                        "is_channel": true,
                                        "is_ext_shared": false,
                                        "is_general": false,
                                        "is_group": false,
                                        "is_im": false,
                                        "is_mpim": false,
                                        "is_org_shared": false,
                                        "is_pending_ext_shared": false,
                                        "is_private": false,
                                        "is_shared": false,
                                        "name": "random",
                                        "name_normalized": "random",
                                        "pending_shared": [],
                                        "previous_names": [],
                                        "purpose": {
                                            "creator": "",
                                            "last_set": 0,
                                            "value": "A place for non-work-related flimflam, faffing, hodge-podge or jibber-jabber you'd prefer to keep out of more focused work-related channels."
                                        },
                                        "topic": {
                                            "creator": "",
                                            "last_set": 0,
                                            "value": "Non-work banter and water cooler conversation"
                                        },
                                        "unlinked": 0
                                    }
                                ],
                                "ok": true,
                                "response_metadata": {
                                    "next_cursor": "dGVhbTpDMDYxRkE1UEI="
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": true,
                            "description": "Schema for successful response from users.conversations method. Returned conversation objects do not include `num_members` or `is_member`",
                            "properties": {
                                "channels": {
                                    "items": {
                                        "$ref": "#/definitions/objs_conversation"
                                    },
                                    "type": "array",
                                    "uniqueItems": true
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "response_metadata": {
                                    "additionalProperties": false,
                                    "properties": {
                                        "next_cursor": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "next_cursor"
                                    ],
                                    "type": "object"
                                }
                            },
                            "required": [
                                "ok",
                                "channels"
                            ],
                            "title": "users.conversations success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from users.conversations method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "method_not_supported_for_channel_type",
                                        "missing_scope",
                                        "invalid_types",
                                        "invalid_cursor",
                                        "invalid_limit",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "users.conversations error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "channels:read",
                            "groups:read",
                            "im:read",
                            "mpim:read"
                        ]
                    }
                ],
                "tags": [
                    "users"
                ]
            }
        },
        "/users.getPresence": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Gets user presence information.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/users.getPresence"
                },
                "operationId": "users_getPresence",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `users:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "User to get presence info on. Defaults to the authed user.",
                        "in": "query",
                        "name": "user",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "When requesting information for a different user, this method just returns the current presence (either `active` or `away`).",
                        "examples": {
                            "application/json": {
                                "ok": true,
                                "presence": "active"
                            }
                        },
                        "schema": {
                            "additionalProperties": true,
                            "description": "Generated from users.getPresence with shasum e7251aec575d8863f9e0eb38663ae9dc26655f65",
                            "properties": {
                                "auto_away": {
                                    "type": "boolean"
                                },
                                "connection_count": {
                                    "type": "integer"
                                },
                                "last_activity": {
                                    "type": "integer"
                                },
                                "manual_away": {
                                    "type": "boolean"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "online": {
                                    "type": "boolean"
                                },
                                "presence": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ok",
                                "presence"
                            ],
                            "title": "API method: users.getPresence",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_auth",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": {
                                "type": "object"
                            },
                            "description": "Schema for error response users.getPresence method",
                            "properties": {
                                "error": {
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "users.counts error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "users:read"
                        ]
                    }
                ],
                "tags": [
                    "users"
                ]
            }
        },
        "/users.info": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Gets information about a user.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/users.info"
                },
                "operationId": "users_info",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `users:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Set this to `true` to receive the locale for this user. Defaults to `false`",
                        "in": "query",
                        "name": "include_locale",
                        "type": "boolean"
                    },
                    {
                        "description": "User to get info on",
                        "in": "query",
                        "name": "user",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true,
                                "user": {
                                    "color": "9f69e7",
                                    "deleted": false,
                                    "has_2fa": false,
                                    "id": "W012A3CDE",
                                    "is_admin": true,
                                    "is_app_user": false,
                                    "is_bot": false,
                                    "is_owner": false,
                                    "is_primary_owner": false,
                                    "is_restricted": false,
                                    "is_ultra_restricted": false,
                                    "name": "spengler",
                                    "profile": {
                                        "avatar_hash": "ge3b51ca72de",
                                        "display_name": "spengler",
                                        "display_name_normalized": "spengler",
                                        "email": "spengler@ghostbusters.example.com",
                                        "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_original": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "real_name": "Egon Spengler",
                                        "real_name_normalized": "Egon Spengler",
                                        "status_emoji": ":books:",
                                        "status_text": "Print is dead",
                                        "team": "T012AB3C4"
                                    },
                                    "real_name": "Egon Spengler",
                                    "team_id": "T012AB3C4",
                                    "tz": "America/Los_Angeles",
                                    "tz_label": "Pacific Daylight Time",
                                    "tz_offset": -25200,
                                    "updated": 1502138686
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": true,
                            "description": "Schema for successful response from users.info method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "user": {
                                    "$ref": "#/definitions/objs_user"
                                }
                            },
                            "required": [
                                "ok",
                                "user"
                            ],
                            "title": "users.info success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "user_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from users.info method",
                            "properties": {
                                "callstack": {
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "user_not_found",
                                        "user_not_visible",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "users.info error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "users:read"
                        ]
                    }
                ],
                "tags": [
                    "users"
                ]
            }
        },
        "/users.list": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Lists all users in a Slack team.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/users.list"
                },
                "operationId": "users_list",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `users:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached. Providing no `limit` value will result in Slack attempting to deliver you the entire result set. If the collection is too large you may experience `limit_required` or HTTP 500 errors.",
                        "in": "query",
                        "name": "limit",
                        "type": "integer"
                    },
                    {
                        "description": "Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first \"page\" of the collection. See [pagination](/docs/pagination) for more detail.",
                        "in": "query",
                        "name": "cursor",
                        "type": "string"
                    },
                    {
                        "description": "Set this to `true` to receive the locale for users. Defaults to `false`",
                        "in": "query",
                        "name": "include_locale",
                        "type": "boolean"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "cache_ts": 1498777272,
                                "members": [
                                    {
                                        "color": "9f69e7",
                                        "deleted": false,
                                        "has_2fa": false,
                                        "id": "W012A3CDE",
                                        "is_admin": true,
                                        "is_app_user": false,
                                        "is_bot": false,
                                        "is_owner": false,
                                        "is_primary_owner": false,
                                        "is_restricted": false,
                                        "is_ultra_restricted": false,
                                        "name": "spengler",
                                        "profile": {
                                            "avatar_hash": "ge3b51ca72de",
                                            "display_name": "spengler",
                                            "display_name_normalized": "spengler",
                                            "email": "spengler@ghostbusters.example.com",
                                            "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                            "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                            "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                            "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                            "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                            "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                            "real_name": "Egon Spengler",
                                            "real_name_normalized": "Egon Spengler",
                                            "status_emoji": ":books:",
                                            "status_text": "Print is dead",
                                            "team": "T012AB3C4"
                                        },
                                        "real_name": "spengler",
                                        "team_id": "T012AB3C4",
                                        "tz": "America/Los_Angeles",
                                        "tz_label": "Pacific Daylight Time",
                                        "tz_offset": -25200,
                                        "updated": 1502138686
                                    },
                                    {
                                        "color": "9f69e7",
                                        "deleted": false,
                                        "has_2fa": false,
                                        "id": "W07QCRPA4",
                                        "is_admin": true,
                                        "is_bot": false,
                                        "is_owner": false,
                                        "is_primary_owner": false,
                                        "is_restricted": false,
                                        "is_ultra_restricted": false,
                                        "name": "glinda",
                                        "profile": {
                                            "avatar_hash": "8fbdd10b41c6",
                                            "display_name": "Glinda the Fairly Good",
                                            "display_name_normalized": "Glinda the Fairly Good",
                                            "email": "glenda@south.oz.coven",
                                            "first_name": "Glinda",
                                            "image_1024": "https://a.slack-edge.com...png",
                                            "image_192": "https://a.slack-edge.com...png",
                                            "image_24": "https://a.slack-edge.com...png",
                                            "image_32": "https://a.slack-edge.com...png",
                                            "image_48": "https://a.slack-edge.com...png",
                                            "image_512": "https://a.slack-edge.com...png",
                                            "image_72": "https://a.slack-edge.com...png",
                                            "image_original": "https://a.slack-edge.com...png",
                                            "last_name": "Southgood",
                                            "phone": "",
                                            "real_name": "Glinda Southgood",
                                            "real_name_normalized": "Glinda Southgood",
                                            "skype": "",
                                            "title": "Glinda the Good"
                                        },
                                        "real_name": "Glinda Southgood",
                                        "team_id": "T0G9PQBBK",
                                        "tz": "America/Los_Angeles",
                                        "tz_label": "Pacific Daylight Time",
                                        "tz_offset": -25200,
                                        "updated": 1480527098
                                    }
                                ],
                                "ok": true,
                                "response_metadata": {
                                    "next_cursor": "dXNlcjpVMEc5V0ZYTlo="
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from users.list method",
                            "properties": {
                                "cache_ts": {
                                    "type": "integer"
                                },
                                "members": {
                                    "items": {
                                        "$ref": "#/definitions/objs_user"
                                    },
                                    "minItems": 1,
                                    "type": "array",
                                    "uniqueItems": true
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "response_metadata": {
                                    "$ref": "#/definitions/objs_response_metadata"
                                }
                            },
                            "required": [
                                "ok",
                                "members",
                                "cache_ts"
                            ],
                            "title": "users.list schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "invalid_cursor",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from users.list method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "limit_required",
                                        "invalid_cursor",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "users.list error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "users:read"
                        ]
                    }
                ],
                "tags": [
                    "users"
                ]
            }
        },
        "/users.lookupByEmail": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Find a user with an email address.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/users.lookupByEmail"
                },
                "operationId": "users_lookupByEmail",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `users:read.email`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "An email address belonging to a user in the workspace",
                        "in": "query",
                        "name": "email",
                        "required": true,
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true,
                                "user": {
                                    "color": "9f69e7",
                                    "deleted": false,
                                    "has_2fa": false,
                                    "id": "W012A3CDE",
                                    "is_admin": true,
                                    "is_app_user": false,
                                    "is_bot": false,
                                    "is_owner": false,
                                    "is_primary_owner": false,
                                    "is_restricted": false,
                                    "is_ultra_restricted": false,
                                    "name": "spengler",
                                    "profile": {
                                        "avatar_hash": "ge3b51ca72de",
                                        "display_name": "spengler",
                                        "display_name_normalized": "spengler",
                                        "email": "spengler@ghostbusters.example.com",
                                        "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                        "real_name": "Egon Spengler",
                                        "real_name_normalized": "Egon Spengler",
                                        "status_emoji": ":books:",
                                        "status_text": "Print is dead",
                                        "team": "T012AB3C4"
                                    },
                                    "real_name": "Egon Spengler",
                                    "team_id": "T012AB3C4",
                                    "tz": "America/Los_Angeles",
                                    "tz_label": "Pacific Daylight Time",
                                    "tz_offset": -25200,
                                    "updated": 1502138686
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": true,
                            "description": "Schema for successful response from users.lookupByEmail method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "user": {
                                    "$ref": "#/definitions/objs_user"
                                }
                            },
                            "required": [
                                "ok",
                                "user"
                            ],
                            "title": "users.lookupByEmail success schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "users_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from users.lookupByEmail method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "users_not_found",
                                        "enterprise_is_restricted",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "no_permission",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "users.lookupByEmail error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "users:read.email"
                        ]
                    }
                ],
                "tags": [
                    "users"
                ]
            }
        },
        "/users.profile.get": {
            "get": {
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "description": "Retrieves a user's profile information.",
                "externalDocs": {
                    "description": "API method documentation",
                    "url": "https://api.slack.com/methods/users.profile.get"
                },
                "operationId": "users_profile_get",
                "parameters": [
                    {
                        "description": "Authentication token. Requires scope: `users.profile:read`",
                        "in": "query",
                        "name": "token",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "description": "Include labels for each ID in custom profile fields",
                        "in": "query",
                        "name": "include_labels",
                        "type": "boolean"
                    },
                    {
                        "description": "User to retrieve profile info for",
                        "in": "query",
                        "name": "user",
                        "type": "string"
                    }
                ],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "Typical success response",
                        "examples": {
                            "application/json": {
                                "ok": true,
                                "profile": {
                                    "avatar_hash": "ge3b51ca72de",
                                    "display_name": "spengler",
                                    "display_name_normalized": "spengler",
                                    "email": "spengler@ghostbusters.example.com",
                                    "image_192": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                    "image_24": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                    "image_32": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                    "image_48": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                    "image_512": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                    "image_72": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                    "image_original": "https://.../avatar/e3b51ca72dee4ef87916ae2b9240df50.jpg",
                                    "real_name": "Egon Spengler",
                                    "real_name_normalized": "Egon Spengler",
                                    "status_emoji": ":books:",
                                    "status_expiration": 0,
                                    "status_text": "Print is dead",
                                    "team": "T012AB3C4"
                                }
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for successful response from users.profile.get method",
                            "properties": {
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_true"
                                },
                                "profile": {
                                    "$ref": "#/definitions/objs_user_profile"
                                }
                            },
                            "required": [
                                "ok",
                                "profile"
                            ],
                            "title": "users.profile.get schema",
                            "type": "object"
                        }
                    },
                    "default": {
                        "description": "Typical error response",
                        "examples": {
                            "application/json": {
                                "error": "user_not_found",
                                "ok": false
                            }
                        },
                        "schema": {
                            "additionalProperties": false,
                            "description": "Schema for error response from users.profile.get method",
                            "properties": {
                                "callstack": {
                                    "description": "Note: PHP callstack is only visible in dev/qa",
                                    "type": "string"
                                },
                                "error": {
                                    "enum": [
                                        "user_not_found",
                                        "not_authed",
                                        "invalid_auth",
                                        "account_inactive",
                                        "token_revoked",
                                        "no_permission",
                                        "org_login_required",
                                        "user_is_bot",
                                        "invalid_arg_name",
                                        "invalid_array_arg",
                                        "invalid_charset",
                                        "invalid_form_data",
                                        "invalid_post_type",
                                        "missing_post_type",
                                        "team_added_to_org",
                                        "invalid_json",
                                        "json_not_object",
                                        "request_timeout",
                                        "upgrade_required",
                                        "fatal_error"
                                    ],
                                    "type": "string"
                                },
                                "ok": {
                                    "$ref": "#/definitions/defs_ok_false"
                                }
                            },
                            "required": [
                                "ok",
                                "error"
                            ],
                            "title": "users.profile.get error schema",
                            "type": "object"
                        }
                    }
                },
                "security": [
                    {
                        "slackAuth": [
                            "users.profile:read"
                        ]
                    }
                ],
                "tags": [
                    "users.profile",
                    "users"
                ]
            }
        }
    },
    "schemes": [
        "https"
    ],
    "securityDefinitions": {
        "slackAuth": {
            "authorizationUrl": "https://slack.com/oauth/authorize",
            "flow": "accessCode",
            "scopes": {
                "admin": "admin",
                "admin.apps:read": "admin.apps:read",
                "admin.apps:write": "admin.apps:write",
                "admin.conversations:read": "admin.conversations:read",
                "admin.conversations:write": "admin.conversations:write",
                "admin.invites:read": "admin.invites:read",
                "admin.invites:write": "admin.invites:write",
                "admin.teams:read": "admin.teams:read",
                "admin.teams:write": "admin.teams:write",
                "admin.usergroups:read": "admin.usergroups:read",
                "admin.usergroups:write": "admin.usergroups:write",
                "admin.users:read": "admin.users:read",
                "admin.users:write": "admin.users:write",
                "authorizations:read": "authorizations:read",
                "bot": "Bot user scope",
                "calls:read": "calls:read",
                "calls:write": "calls:write",
                "channels:history": "channels:history",
                "channels:manage": "channels:manage",
                "channels:read": "channels:read",
                "channels:write": "channels:write",
                "chat:write": "chat:write",
                "chat:write:bot": "Author messages as a bot",
                "chat:write:user": "Author messages as a user",
                "conversations:history": "conversations:history",
                "conversations:read": "conversations:read",
                "conversations:write": "conversations:write",
                "dnd:read": "dnd:read",
                "dnd:write": "dnd:write",
                "emoji:read": "emoji:read",
                "files:read": "files:read",
                "files:write:user": "files:write:user",
                "groups:history": "groups:history",
                "groups:read": "groups:read",
                "groups:write": "groups:write",
                "identity.basic": "identity.basic",
                "im:history": "im:history",
                "im:read": "im:read",
                "im:write": "im:write",
                "links:write": "links:write",
                "mpim:history": "mpim:history",
                "mpim:read": "mpim:read",
                "mpim:write": "mpim:write",
                "none": "No scope required",
                "pins:read": "pins:read",
                "pins:write": "pins:write",
                "reactions:read": "reactions:read",
                "reactions:write": "reactions:write",
                "reminders:read": "reminders:read",
                "reminders:write": "reminders:write",
                "remote_files:read": "remote_files:read",
                "remote_files:share": "remote_files:share",
                "remote_files:write": "remote_files:write",
                "rtm:stream": "rtm:stream",
                "search:read": "search:read",
                "stars:read": "stars:read",
                "stars:write": "stars:write",
                "team:read": "team:read",
                "tokens.basic": "tokens.basic",
                "usergroups:read": "usergroups:read",
                "usergroups:write": "usergroups:write",
                "users.profile:read": "users.profile:read",
                "users.profile:write": "users.profile:write",
                "users:read": "users:read",
                "users:read.email": "users:read.email",
                "users:write": "users:write",
                "workflow.steps:execute": "workflow.steps:execute"
            },
            "tokenUrl": "https://slack.com/api/oauth.access",
            "type": "oauth2"
        }
    },
    "swagger": "2.0",
    "tags": []
}
